{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/fastapi/signup-view","result":{"data":{"markdownRemark":{"id":"c2af0926-2d83-5a94-adb0-c3c7c70b07e6","html":"<p>디렉토리 구조도 잡았으니 이제 본격적으로 API를 만들어본다.\n<a href=\"https://jasonkang14.github.io/fastapi/directory-structure\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FastAPI 디렉토리 구조</a>에서 언급한 것처럼, <code class=\"language-text\">pydantic</code>의 <code class=\"language-text\">BaseModel</code>만 request body로 인식하기 때문에, <code class=\"language-text\">schemas/user.py</code>에서 request body의 type을 먼저 설정한다</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># schemas/user.py</span>\n<span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserCreate</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    gender<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    phone<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    birth<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span></code></pre></div>\n<p>사이드 목적상 많은 개인정보는 필요없고, 나이와 성별정도로만 데이터를 저장해보려고한다. 지역구를 저장하는게 의미가 있을 수도 있지만, 정확하게 받아올 수 있는 정보가 아니니 생략한다.</p>\n<p><code class=\"language-text\">routers/user.py</code>에 클라이언트로부터 request를 받을 인터페이스를 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># routers/user.py</span>\n\n<span class=\"token keyword\">from</span> fastapi             <span class=\"token keyword\">import</span> APIRouter<span class=\"token punctuation\">,</span> Depends<span class=\"token punctuation\">,</span> HTTPException\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>orm      <span class=\"token keyword\">import</span> Session\n\n<span class=\"token keyword\">from</span> schemas   <span class=\"token keyword\">import</span> user <span class=\"token keyword\">as</span> user_schema\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>deps <span class=\"token keyword\">import</span> get_db<span class=\"token punctuation\">,</span> Message\n\n<span class=\"token comment\"># 각 router/XXX.py에 선언한 router들을 routers.py에서 import한 후, 해당 router를 main.py에서 import한다.</span>\nrouter <span class=\"token operator\">=</span> APIRouter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 아래와 같이 response 종류들을 선언해줘야 swagger에 나타난다.</span>\nsignup_responses <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token number\">201</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'model'</span><span class=\"token punctuation\">:</span> Message<span class=\"token punctuation\">,</span> <span class=\"token string\">'description'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'회원가입 성공'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">409</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'model'</span><span class=\"token punctuation\">:</span> Message<span class=\"token punctuation\">,</span> <span class=\"token string\">'description'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'email 또는 phone이 중복되는 경우'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token decorator annotation punctuation\">@router<span class=\"token punctuation\">.</span>post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/signup\"</span><span class=\"token punctuation\">,</span> status_code<span class=\"token operator\">=</span><span class=\"token number\">201</span><span class=\"token punctuation\">,</span> responses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">**</span>signup_responses<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">signup</span><span class=\"token punctuation\">(</span>\n    signup_info<span class=\"token punctuation\">:</span> user_schema<span class=\"token punctuation\">.</span>UserCreate<span class=\"token punctuation\">,</span>\n    db<span class=\"token punctuation\">:</span> Session <span class=\"token operator\">=</span> Depends<span class=\"token punctuation\">(</span>get_db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># bcrypt를 사용해서 비밀번호를 단방향 hashing하는 과정을 거친다. 코드는 공식문서 참고</span>\n    <span class=\"token comment\"># signup_info.password를 덮어쓰는 이유는 crud/user.py에서도 UserCreate schema를 사용하기 때문이다. </span>\n    signup_info<span class=\"token punctuation\">.</span>password <span class=\"token operator\">=</span> get_password_hash<span class=\"token punctuation\">(</span>signup_info<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># db에 저장한다.</span>\n    create_user<span class=\"token punctuation\">(</span>signup_info<span class=\"token punctuation\">,</span> db<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 특이하게 dicitionary로 리턴해도 정상 작동한다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'SIGNUP_SUCCESS'</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>이제 sqlalchemy를 사용해서 데이터베이스에 저장하는 과정을 살펴본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># crud/user.py</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_user</span><span class=\"token punctuation\">(</span>\n    signup_info<span class=\"token punctuation\">:</span> UserCreate<span class=\"token punctuation\">,</span>\n    db<span class=\"token punctuation\">:</span> Session<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> User<span class=\"token punctuation\">:</span>\n    db_obj <span class=\"token operator\">=</span> User<span class=\"token punctuation\">(</span>\n                username <span class=\"token operator\">=</span> signup_info<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n                password <span class=\"token operator\">=</span> signup_info<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">,</span>\n                phone    <span class=\"token operator\">=</span> signup_info<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">,</span>\n                gender   <span class=\"token operator\">=</span> signup_info<span class=\"token punctuation\">.</span>gender<span class=\"token punctuation\">,</span>\n                birth    <span class=\"token operator\">=</span> signup_info<span class=\"token punctuation\">.</span>birth\n            <span class=\"token punctuation\">)</span>\n    db<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>db_obj<span class=\"token punctuation\">)</span>\n    db<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> </code></pre></div>\n<p><code class=\"language-text\">db.add()</code>를 하면 깃헙으로 따지면 스테이징이 되고, <code class=\"language-text\">db.commit()</code>을 해야 실제로 디비에 <code class=\"language-text\">INSERT</code>된다. 공식문서 예제에서는 <code class=\"language-text\">.commit()</code> 후에 <code class=\"language-text\">.refresh()</code>를 해준다.\n<code class=\"language-text\">.refresh()</code>를 하는 이유는, 다른 어딘가에서 데이터베이스에 커밋이 발생했을 때, 내가 원하는 객체가 변경될 수 있기 때문이다(회원가입에는 크게 해당하지 않지만 누군가 갑자기 사용자 정보를 바꾼다던지의 문제)\n그렇다면 해당 객체가 내가 원하는 상태의 객체가 아닐 수 있기 때문에 데이터베이스를 read해서 최신화 하는 것이다.\n회원가입 후 사용자 정보를 따로 클라이언트에 리턴하는 절차가 없기 때문이 refresh는 생략한다.</p>\n<p>curl로 시도해보면 잘 작동하는 것을 볼 수 있다.\n<img src=\"https://i.imgur.com/eBZM75g.png\" alt=\"signup-via-curl\"></p>\n<p>서버 로그도 잘 찍히는 것을 볼 수 있다.\n<img src=\"https://i.imgur.com/laT8gEb.png\" alt=\"signup-success-from-uvicorn\"></p>\n<p>이제 API가 하나 만들어졌으니, 클라이언트를 만들어보도록 하겠다.</p>","fields":{"slug":"/posts/2022//fastapi/signup-view","tagSlugs":["/tag/fastapi/"]},"frontmatter":{"date":"2022-07-17T21:21:37.121Z","description":"FastAPI로 회원가입을 진행한다","tags":["FastAPI"],"title":"FastAPI - 회원가입","socialImage":null}}},"pageContext":{"slug":"/posts/2022//fastapi/signup-view"}},"staticQueryHashes":["251939775","288581551","401334301"]}