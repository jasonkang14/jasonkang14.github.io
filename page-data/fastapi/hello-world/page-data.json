{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/fastapi/hello-world","result":{"data":{"markdownRemark":{"id":"15b16dee-e0d7-5265-94f4-3b03b9ed3047","html":"<p>2년만에 사이드 프로젝트를 시작한다. 2년 전에 사이드 프로젝트를 두 개 했었는데, 그 때는 무조건 잘 될거라고 판단하고 앱을 만드는데만 집중했다. 그래서 빨리 찍어내기 위해서 익숙한 기술로 개발했다. 프로젝트는 망했고(앱 정책상 하나는 짤리고, 하나는 게시도 못함) 나에게 남은 건 짤렸던 앱의 클라우드 비용뿐이었다. 그래서 이번엔 평소에 관심있던 기술로 사이드를 진행하고, 블로그라도 남겨보려고 한다.</p>\n<p>사이드에 사용하고자 하는 추천 모델이 python으로 구현되기 때문에, 언어는 python으로 정했다. 그리고 그동안 말만 들어봤던 FastAPI로 서버를 구현하려고 한다. 회사에 쿠버네티스를 구축하면서 Microservice Architecture를 적용하려고 하는데, 그 중에 FastAPI로 하나의 microservice를 구현할 예정이라서 일에도 도움이 될 것 같다. 모든 절차는 공식문서를 따른다</p>\n<p>그래도 나름 규모가 있는—장고를 기준으로 하면 앱이 여러개인—서비스를 만들 예정이기 때문에, 공식문서의 <a href=\"https://fastapi.tiangolo.com/tutorial/bigger-applications/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Bigger Applications</a>를 참고했다. 디렉토리 구조는 아래와 같이 가져갈 예정이다. 공식문서에 나온 구조에서 admin과 dependencies.py를 제외하고 따라해본다.</p>\n<p>admin은 필요 없는 기능인 것 같고—지금 보기에는—dependencies 는 http 통신할 때 토큰을 가져오는 코드인데, 아직 로그인 구현도 안 된 상태에서 토큰을 가져오는 코드는 빌요 없는 것 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app\n├── __init__.py\n├── main.py\n└── routers\n    ├── __init__.py\n    └── users.py\n</code></pre></div>\n<p>그리고 이제 시키는대로 세부 내용들을 작성한다. 우선 <code class=\"language-text\">routers</code> 부터 시작한다. 공식문서 중에서는 <code class=\"language-text\">users.py</code>를 작성한다. 추후에 DB연동할 때 사용자 테이블을 먼저 연동하고, 그와 관련된 회원가입//로그인 등의 기능을 먼저 구현하고 싶기 때문이다. 장고를 처음 접했던 때를 생각하면, 그렇게 하고나면 어느정도 구동 원리가 이해될 것이라고 생각한다. <code class=\"language-text\">app</code>과 <code class=\"language-text\">routers</code> 디렉토리 밑에 <code class=\"language-text\">__init__.py</code>가 있는 이유는, 파이썬 모듈마냥 사용하고 싶기 때문이다.</p>\n<p>공식문서를 잘 따라서 <code class=\"language-text\">main.py</code>를 아래와 같이 구현한다. <code class=\"language-text\">users.py</code>는 공식문서대로 구현한다</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># main.py</span>\n\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> FastAPI\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>routers <span class=\"token keyword\">import</span> users\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span>include_router<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World!\"</span></code></pre></div>\n<p>그냥 튜토리얼을 따라하는 것과 조금 차이가 있는데, 기본 튜토리얼은 파일 하나짜리라서 서로 import하는게 없기 때문에 parent가 없어서 상대경로 import에서 계속 에러를 뱉어낸다. 그래서 최상단에 저 app이라는 디렉토리가 있어야 하고, 서버를 구동하는 명령어도 기본 튜토리얼과 차이가 있다.</p>\n<p><code class=\"language-text\">uvicorn app.main:app --reload</code></p>\n<p>app 디렉토리에서, 해당 디렉토리안에 있는 <code class=\"language-text\">main.py</code>에 선언된 <code class=\"language-text\">app</code>을 실행하는 코드이다. 자주 사용할 명령어인데 반복해서 적기 귀찮아서 <code class=\"language-text\">run.sh</code>파일을 만들고 그 안에 넣어두었다.</p>\n<p><img src=\"https://i.imgur.com/Fypz0l7.png\" alt=\"hello-world-from-fast-api\"></p>\n<p>hello world가 매우 잘 작동하고, routers에 있는 것도 잘 작동한다.\n공식문서를 그대로 따라하면 <code class=\"language-text\">http://localhost:8000</code>으로 get request를 보내면 <code class=\"language-text\">main.py</code>에 있는 값이 아니라 <code class=\"language-text\">routers.users</code>에 있는 경로로 요청을 보내는데, 이건 <code class=\"language-text\">main.py</code>에 선언된 경로보다 <code class=\"language-text\">routers.users</code>이 먼저 import되기 때문인 것 같다.</p>\n<p>사이드에는 <a href=\"https://graphql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL</a>도 적용해보려고 한다. GraphQL역시 회사 개발팀에서 4분기 목표로 잡은 내용인데, 미리 공부해서 팀원들과 공유하려고 한다. 연말 출시 목표인데 별 탈 없이 잘 진행할 수 있기를…</p>","fields":{"slug":"/posts/2022//fastapi/hello-world","tagSlugs":["/tag/fastapi/"]},"frontmatter":{"date":"2022-07-02T16:21:37.121Z","description":"FastAPI로 Hello World!","tags":["FastAPI"],"title":"Hello World from Fast API","socialImage":null}}},"pageContext":{"slug":"/posts/2022//fastapi/hello-world"}},"staticQueryHashes":["251939775","288581551","401334301"]}