{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/fastapi/database-using-mysql","result":{"data":{"markdownRemark":{"id":"b9daed2d-3521-5c37-add3-aa8dff7082d9","html":"<p>FastAPI 공식문서의 tutorial에서 <a href=\"https://fastapi.tiangolo.com/tutorial/sql-databases/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">User Guide - SQL Databases</a>항목을 참고한다. FastAPI 공식문서에 DB연동은 두가지 방법이 소개되어있다. 하나는 <a href=\"https://www.sqlalchemy.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLAlchemy</a>를 사용하는 법이고 다른 하나는 <a href=\"http://docs.peewee-orm.com/en/latest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Peewee</a>를 사용하는 방법이다. 둘중에 고민하다가 예전에 원티드+에서 봤던 영상에 따르면 원티드에서는 SQLAlchemy를 사용한다고 해서, SQLAlchemy로 연동하고자 한다.</p>\n<p>공식문서에서 제시한 대로 파일들을 만들어서 정보를 입력할 생각이다. 차이가 있다면 여기는 <code class=\"language-text\">sql_app</code>이라는 디렉토리를 생성하는데, 나는 이미 <code class=\"language-text\">app</code> 이라는 디렉토리에 <code class=\"language-text\">main.py</code>가 존재하기 때문에, 기존의 <code class=\"language-text\">app</code> 디렉토리 안에 <code class=\"language-text\">sql</code>이라는 디렉토리를 만들어서 데이터베이스 연동과 관련된 코드들을 집어넣으려고 한다. 현재 디렉토리 tree는 아래와 같은 형태이다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">app\n├── __init__.py\n├── main.py\n├── alembic\n│   ├── env.py\n│   ├── script.py.mako\n│   └── versions\n├── alembic.ini\n├── routers\n│   ├── __init__.py\n│   └── users.py\n└── sql\n    ├── __init__.py\n    ├── crud.py\n    ├── database.py\n    ├── models.py\n    └── schemas.py</code></pre></div>\n<p><code class=\"language-text\">crud.py</code>가 가장 위에 있지만 공식문서에 나와있는 순서대로 따라가보기로 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># database.py</span>\n<span class=\"token keyword\">from</span> sqlalchemy <span class=\"token keyword\">import</span> create_engine\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>ext<span class=\"token punctuation\">.</span>declarative <span class=\"token keyword\">import</span> declarative_base\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>orm <span class=\"token keyword\">import</span> sessionmaker\n\nSQLALCHEMY_DATABASE_URL <span class=\"token operator\">=</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'mysql+mysqlconnector://</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>MYSQL_USER<span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>MYSQL_PASSWORD<span class=\"token punctuation\">}</span></span><span class=\"token string\">@</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>MYSQL_SERVER_NAME<span class=\"token punctuation\">}</span></span><span class=\"token string\">:3306/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>DATABASE_NAME<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span> \n\nengine <span class=\"token operator\">=</span> create_engine<span class=\"token punctuation\">(</span>\n    SQLALCHEMY_DATABASE_URL<span class=\"token punctuation\">,</span> \n<span class=\"token punctuation\">)</span>\nSessionLocal <span class=\"token operator\">=</span> sessionmaker<span class=\"token punctuation\">(</span>autocommit<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> autoflush<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> bind<span class=\"token operator\">=</span>engine<span class=\"token punctuation\">)</span>\n\nBase <span class=\"token operator\">=</span> declarative_base<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>데이터베이스는 MySQL을 사용할 예정인데, database와 query 공부를 MySQL로 하기위해 MySQL 서버 하나를 <a href=\"https://www.ncloud.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Naver Cloud Platform</a>에 띄워뒀기 때문이다. f-string 안에 변수들은 import된 곳은 없지만 환경변수이다. 지금은 로컬에서 테스트중이라 하드코딩 해뒀는데 참고하시라고 변수로 적어둔다.</p>\n<p>다음은 <code class=\"language-text\">models.py</code>이다. 공식문서에는 두 개의 테이블을 선언하고 1:N으로 엮는다. 하지만 이전 포스트에서 설명한 것 처럼 사용자 테이블을 먼저 만들고 회원가입/로그인 먼저 구현할 생각이기 때문에 user table만 생성한다. 컬럼도 내가 필요한대로 몇 개 더 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># models.py</span>\n\n<span class=\"token keyword\">from</span> sqlalchemy <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    Boolean<span class=\"token punctuation\">,</span>\n    Column<span class=\"token punctuation\">,</span>\n    Date<span class=\"token punctuation\">,</span>\n    Integer<span class=\"token punctuation\">,</span>\n    String<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>database <span class=\"token keyword\">import</span> Base\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>Base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    __tablename__ <span class=\"token operator\">=</span> <span class=\"token string\">\"users\"</span>\n\n    <span class=\"token builtin\">id</span>        <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    email     <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    password  <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span>\n    is_active <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    phone     <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    birth     <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    gender    <span class=\"token operator\">=</span> Column<span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">'M'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>python은 역시 align해줘야 보기좋다. 다음은 <code class=\"language-text\">schemas.py</code>이다. 회원가입이나 로그인 요청을 받을 때 request body에 들어갈 항목들 정도로 봐주면 된다. <a href=\"https://nestjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Nest.js</a>로 프로젝트를 해봤다면 <code class=\"language-text\">dto</code>와 유사한 개념이라고 생각하시면 되겠다. 사실 굳이 필요는 없는데 <a href=\"https://pydantic-docs.helpmanual.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pydantic</a>을 사용해서 타입체킹을 하기 위함이다. University College London과 마이크로소프트가 발표한 <a href=\"https://earlbarr.com/publications/typestudy.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">논문</a>에 따르면, 자바스크립트 기준으로 볼 때 타입스크립트를 사용하면 버그가 15%정도 줄어든다고 한다. 회원가입(CREATE) 기준으로 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> pydantic <span class=\"token keyword\">import</span> BaseModel\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserBase</span><span class=\"token punctuation\">(</span>BaseModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    email<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    phone<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    birth<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n    gender<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserCreate</span><span class=\"token punctuation\">(</span>UserBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    password<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>UserBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">id</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span>\n    is_active<span class=\"token punctuation\">:</span> <span class=\"token builtin\">bool</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Config</span><span class=\"token punctuation\">:</span>\n        orm_mode <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></code></pre></div>\n<p>마지막으로 <code class=\"language-text\">crud.py</code> 이다. 회원가입 기준으로 <code class=\"language-text\">create_user</code>만 작성한다. 비밀번호 로직 등등은 수정할 예정이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># crud.py</span>\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>orm <span class=\"token keyword\">import</span> Session\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span> models<span class=\"token punctuation\">,</span> schemas\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_user</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">:</span> Session<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">:</span> schemas<span class=\"token punctuation\">.</span>UserCreate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    fake_hashed_password <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>password <span class=\"token operator\">+</span> <span class=\"token string\">\"notreallyhashed\"</span>\n    db_user <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>User<span class=\"token punctuation\">(</span>\n        email    <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">,</span>\n        password <span class=\"token operator\">=</span> fake_hashed_password<span class=\"token punctuation\">,</span>\n        phone    <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">,</span>\n        birth    <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>birth<span class=\"token punctuation\">,</span>\n        gender   <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>gender\n    <span class=\"token punctuation\">)</span>\n\n    db<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>db_user<span class=\"token punctuation\">)</span>\n    db<span class=\"token punctuation\">.</span>commit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    db<span class=\"token punctuation\">.</span>refresh<span class=\"token punctuation\">(</span>db_user<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> db_user</code></pre></div>\n<p>이제 이 정보들을 <code class=\"language-text\">main.py</code> 로 import한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># main.py</span>\n\n<span class=\"token keyword\">from</span> fastapi <span class=\"token keyword\">import</span> Depends<span class=\"token punctuation\">,</span> FastAPI<span class=\"token punctuation\">,</span> Request<span class=\"token punctuation\">,</span> Response\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>routers <span class=\"token keyword\">import</span> users\n\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>orm <span class=\"token keyword\">import</span> Session\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span>database <span class=\"token keyword\">import</span> SessionLocal<span class=\"token punctuation\">,</span> engine\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>sql <span class=\"token keyword\">import</span> crud<span class=\"token punctuation\">,</span> models<span class=\"token punctuation\">,</span> schemas\n\nmodels<span class=\"token punctuation\">.</span>Base<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">.</span>create_all<span class=\"token punctuation\">(</span>bind<span class=\"token operator\">=</span>engine<span class=\"token punctuation\">)</span>\n\napp <span class=\"token operator\">=</span> FastAPI<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span>include_router<span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>middleware</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">db_session_middleware</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> Request<span class=\"token punctuation\">,</span> call_next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> Response<span class=\"token punctuation\">(</span><span class=\"token string\">\"Internal server error\"</span><span class=\"token punctuation\">,</span> status_code<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        request<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>db <span class=\"token operator\">=</span> SessionLocal<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> call_next<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        request<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>db<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> response\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_db</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">:</span> Request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>db\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World!\"</span></code></pre></div>\n<p><code class=\"language-text\">get_db</code> 함수는 router에 선언된 함수들의 dependency로 추가 될 예정이다. 아마도 나중에 <code class=\"language-text\">dependencies.py</code>파일로 옮길 것 같다. 하지만 이상태로 서버를 실행하면 에러가 발생하는데, 바로 서버에 데이터베이스와 테이블 정보가 없기 때문이다. django에서 migration과 유사한 기능을 하는 파이썬 패키지가 필요하다. 검색하다가 SQLAlchemy와 관련이 있는 것 같은 <a href=\"https://alembic.sqlalchemy.org/en/latest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alembic</a>을 사용하기로 한다.</p>\n<p><code class=\"language-text\">alembic</code>사용법은 <a href=\"https://jasonkang14.github.io/fastapi/offline-database-migration-with-alembic\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">다음 포스트</a>에서 다뤄보도록 하겠다.</p>","fields":{"slug":"/posts/2022//fastapi/database-using-mysql","tagSlugs":["/tag/fastapi/"]},"frontmatter":{"date":"2022-07-05T21:21:37.121Z","description":"SQLAlchemy를 사용해서 FastAPI를 MySQL과 연결하는 방법","tags":["FastAPI"],"title":"FastAPI - SQLAlchemy & MySQL","socialImage":null}}},"pageContext":{"slug":"/posts/2022//fastapi/database-using-mysql"}},"staticQueryHashes":["251939775","288581551","401334301"]}