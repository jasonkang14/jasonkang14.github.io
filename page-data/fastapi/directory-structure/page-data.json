{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/fastapi/directory-structure","result":{"data":{"markdownRemark":{"id":"a935b958-8325-5652-b03f-cfd939af8ff7","html":"<p>FastAPI 공식문서의 튜토리얼을 따라해보면 알겠지만, 각 섹션이 모여서 거대한 하나의 어플리케이션을 만드는게 아니라, 모든 파트가 나눠져있다.\n따라서 이들은 모든 코드를 main.py안에서 해결한다.</p>\n<p>하지만 실제 프로그램은 그렇게 돌아가지 않는다. 적절히 분산해서 import해서 사용하는 것이 일반적이다.</p>\n<p>디렉토리 구조를 고민하던 와중에, 그동안 작성했던 <a href=\"https://jasonkang14.github.io/tag/fast-api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FastAPI 시리즈</a>를 보신 CTO님께서 회사에서 진행하는 신규 프로젝트에서 FastAPI를 적용해보자고 하셨다. 직장인 특성상 회사일을 하게되면 개인 프로젝트보다 조금 더 열심히 하게되는 특성이 있다. 열심히 구글링했고, 결국 FastAPI maintainer가 공개한 프로젝트 구조 예제를 찾았다. 그를 기반으로 조금 확장해서 디렉토리 구조를 아래와 같이 변경했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── README.md\n├── alembic\n│   ├── README\n│   ├── env.py\n│   ├── script.py.mako\n│   └── versions\n├── alembic.ini\n├── core\n│   ├── __init__.py\n│   ├── auth.py\n│   └── config.py\n├── crud\n│   ├── __init__.py\n│   └── user.py\n├── database\n│   ├── __init__.py\n│   ├── models.py\n│   └── session.py\n├── main.py\n├── requirements.txt\n├── routers\n│   ├── __init__.py\n│   ├── deps.py\n│   ├── router.py\n│   └── user.py\n├── run.sh\n└── schemas\n    ├── __init__.py\n    └── user.py</code></pre></div>\n<ol>\n<li>\n<p>alembic - database migration을 담당한다.</p>\n<ul>\n<li>하나의 database에 여러명이 migration 하는 경우 <code class=\"language-text\">alembic_version</code> table을 확인해서 에러를 수정해야 한다.</li>\n<li>또한 <code class=\"language-text\">versions</code> 디렉토리 내의 파일을 수정해서 에러를 해결할 수도 있다.</li>\n</ul>\n</li>\n<li>\n<p>core</p>\n<ul>\n<li>주요 기능(?) 들을 넣는다</li>\n<li>일단은 인증/인가를 관장하는 <code class=\"language-text\">auth.py</code>와 환경변수를 담당하는 <code class=\"language-text\">config.py</code>를 생성했다.</li>\n<li>나중에 firebase와 관련된 기능들도 추가할 예정이다.</li>\n</ul>\n</li>\n<li>\n<p>crud</p>\n<ul>\n<li>database manipulation을 담당한다</li>\n<li>Create, Read, Update, Delete</li>\n</ul>\n</li>\n<li>\n<p>routers</p>\n<ul>\n<li>controller에 해당한다고 보면 되겠다.</li>\n<li>interface를 규정하고, 적절하게 crud를 실시한다.</li>\n<li>database dependency를 <code class=\"language-text\">deps.py</code>에 선언한다</li>\n</ul>\n</li>\n<li>\n<p>schemas</p>\n<ul>\n<li>database로 연결하는 schema들을 선언한다.</li>\n<li>회사에서 프로젝트 진행하면서 확인하니 <code class=\"language-text\">pydantic</code>의 <code class=\"language-text\">BaseModel</code>을 사용하지 않으면 해당 값을 request body로 인식하지 못하고 query parameter로 받아들이는 문제가 있다.</li>\n</ul>\n</li>\n</ol>","fields":{"slug":"/posts/2022//fastapi/directory-structure","tagSlugs":["/tag/fastapi/"]},"frontmatter":{"date":"2022-07-15T12:21:37.121Z","description":"FastAPI 디렉토리 구조를 재설정한다","tags":["FastAPI"],"title":"FastAPI - 디렉토리 구조 변경","socialImage":null}}},"pageContext":{"slug":"/posts/2022//fastapi/directory-structure"}},"staticQueryHashes":["251939775","288581551","401334301"]}