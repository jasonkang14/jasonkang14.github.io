{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/javascript/Callback-and-Promise-in-JavaScript","result":{"data":{"markdownRemark":{"id":"06247ae2-014c-5acd-a10c-939186347cc9","html":"<h3 id=\"synchronous-vs-asynchronous\" style=\"position:relative;\"><a href=\"#synchronous-vs-asynchronous\" aria-label=\"synchronous vs asynchronous permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Synchronous vs Asynchronous</h3>\n<ul>\n<li>\n<p>In synchronous programming, things happen one at a time. If there is a function that takes a while to finish, nothing will happen until that function is finished running.</p>\n</li>\n<li>\n<p>In asynchronous programming, a lot of things happen at the same time. Even if there is a function that takes a while to finish, the program continues to run.</p>\n</li>\n<li>\n<p>JavaScript is single-threaded, therefore, it can do only one thing at a time. Therefore, asynchronous programming helps JavaScript programs to do mutliple things at the same time while waiting for other functions to finish running.</p>\n</li>\n</ul>\n<h2 id=\"there-are-things-like-callback-promise-and-generator-that-help-javascript-to-run-asynchronously\" style=\"position:relative;\"><a href=\"#there-are-things-like-callback-promise-and-generator-that-help-javascript-to-run-asynchronously\" aria-label=\"there are things like callback promise and generator that help javascript to run asynchronously permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>There are things like <code class=\"language-text\">callback</code>, <code class=\"language-text\">promise</code>, and <code class=\"language-text\">generator</code> that help JavaScript to run asynchronously.</h2>\n<h3 id=\"1-callback\" style=\"position:relative;\"><a href=\"#1-callback\" aria-label=\"1 callback permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Callback</h3>\n<ul>\n<li>Simply put, <code class=\"language-text\">callback</code> is a function to be called later. It is used as a property of an object, or a parameter that you pass to another function.</li>\n<li><code class=\"language-text\">callback</code> can access the scope of where it gets called.</li>\n<li><code class=\"language-text\">error-first-callback</code>: using an error object as the first parameter of a <code class=\"language-text\">callback</code> in order to check if there is an error associated with the <code class=\"language-text\">callback</code>\n<ul>\n<li>if the error is either <code class=\"language-text\">null</code> or <code class=\"language-text\">undefined</code>, there is no error associated with the <code class=\"language-text\">callback</code> But if there is an error, you must return the error, otherwise, it will get stuck there.</li>\n<li>if you have a lot of asynchronous codes, there is a higher change of bugs, and it will be difficult to manage. this is why <code class=\"language-text\">promise</code> has appeared.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-promise\" style=\"position:relative;\"><a href=\"#2-promise\" aria-label=\"2 promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Promise</h3>\n<ul>\n<li>Every async function returns a <code class=\"language-text\">promise</code></li>\n<li><code class=\"language-text\">Promise</code> solves the problem of <code class=\"language-text\">callbacks</code> getting called multiple times. because when a <code class=\"language-text\">promise</code> is rejected, it calls an <code class=\"language-text\">errback</code> instead of a <code class=\"language-text\">callback</code></li>\n<li><code class=\"language-text\">Promise</code> can be either <code class=\"language-text\">fulfilled</code> or <code class=\"language-text\">rejected</code></li>\n<li>a <code class=\"language-text\">promise</code> can be created like this: below is a code from <a href=\"https://github.com/versatica/mediasoup-client\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mediasoup-client</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">safeEmitAsPromise</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">safeEmit</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args<span class=\"token punctuation\">,</span> resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">resolve</code> and <code class=\"language-text\">reject</code> are also functions. However, they do not stop the function from running. They simply takes care of the <code class=\"language-text\">state</code> of a <code class=\"language-text\">promise</code></p>\n</li>\n<li>\n<p><code class=\"language-text\">Promises</code> can be connected with a chain to return a different <code class=\"language-text\">promise</code> after a <code class=\"language-text\">promise</code> is fulfilled.</p>\n</li>\n<li>\n<p>if you set <code class=\"language-text\">timeout</code> to a <code class=\"language-text\">promise</code>, you can prevent a <code class=\"language-text\">promise</code> from not getting fulfilled or rejected.</p>\n<ul>\n<li>I used this when I implemented social login. if there is no answer from a social login server, it throws an error to inform that a promise has been rejected instead of waiting forever.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Promise.all</code> returns a single Promise after multiple promises get resolved. Below example is from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a></p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">var</span> promise1 <span class=\"token operator\">=</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> promise2 <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> promise3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span> promise2<span class=\"token punctuation\">,</span> promise3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"3-generator\" style=\"position:relative;\"><a href=\"#3-generator\" aria-label=\"3 generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Generator</h3>\n<ul>\n<li>A <code class=\"language-text\">generator</code> allows bi-directional communication between a caller and a function. A <code class=\"language-text\">generator</code> has synchronous properties, but it can manage asynchronous codes easily if used with a <code class=\"language-text\">promise</code></li>\n<li>Read a section about a generator, but still kinda confused. needs to do more studies on it. One lesson that I got is that I don’t need to create a generator luncher on my own. it is better to use either <code class=\"language-text\">co</code> or <code class=\"language-text\">Koa</code></li>\n</ul>","fields":{"slug":"/posts/2019//posts/javascript/Callback-and-Promise-in-JavaScript","tagSlugs":["/tag/javascript/"]},"frontmatter":{"date":"2019-08-21T22:27:37.121Z","description":"Asynchronous Programming in JavaScript explained","tags":["JavaScript"],"title":"Callback and Promise in JavaScript","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/javascript/Callback-and-Promise-in-JavaScript"}},"staticQueryHashes":["251939775","288581551","401334301"]}