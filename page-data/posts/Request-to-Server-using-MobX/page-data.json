{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/Request-to-Server-using-MobX","result":{"data":{"markdownRemark":{"id":"7f83c0cc-a99d-5612-8b73-7df589c4e683","html":"<p>State like login must be handled globally since your login information should be accessible in every single page that requires permissions. So when you send a request to a server for login, you have to do it globally. <code class=\"language-text\">MobX</code> is the way to go.</p>\n<p>I have already posted about how to set up your <code class=\"language-text\">React Native</code> project using <code class=\"language-text\">MobX</code>. And this post is about how you send a request.</p>\n<p>First, you have to create a <code class=\"language-text\">Store</code> which changes a state and detects such changes.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> observable<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">,</span> runInAction <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"mobx\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> LoginManager<span class=\"token punctuation\">,</span> AccessToken <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-native-fbsdk'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">API_URL</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../config\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">UserStore</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">observable</span></span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">observable</span></span> facebookLoginStatus <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">observable</span></span> state <span class=\"token operator\">=</span> <span class=\"token string\">\"pending\"</span>\n\n    <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p><code class=\"language-text\">observable</code> in <code class=\"language-text\">MobX</code> is data of which change could be observable. When Facebook login is successful, his or her user information is going to be stored in <code class=\"language-text\">@observable user</code></p>\n<p>And you implement the Facebook login by using the code provided by Facebook Github. I used a custom button, so my code is like below.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">action</span></span>\n    <span class=\"token function\">facebookLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        LoginManager<span class=\"token punctuation\">.</span><span class=\"token function\">logInWithPermissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"public_profile\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">action</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>isCancelled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Login cancelled\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                AccessToken<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentAccessToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n                   <span class=\"token function\">action</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>facebookToken <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>accessToken<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">const</span> headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token string-property property\">\"Accept\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>facebookToken<span class=\"token punctuation\">)</span>\n\n                    axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">API_URL</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">account/facebooklogin</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> headers <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span> <span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n                        <span class=\"token function\">action</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token string\">\"done\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>facebookLoginStatus<span class=\"token operator\">=</span><span class=\"token string\">\"fail\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token operator\">=</span> <span class=\"token string\">\"done\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>facebookLoginStatus<span class=\"token operator\">=</span><span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>user_info<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span>\n                <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\n                  <span class=\"token string\">\"Login success with permissions: \"</span> <span class=\"token operator\">+</span>\n                    result<span class=\"token punctuation\">.</span>grantedPermissions<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token function\">action</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Login fail with error: \"</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">action</code> is anything that can modify a <code class=\"language-text\">state</code>. Since I am going to change the state called <code class=\"language-text\">user</code>, I am calling this request an <code class=\"language-text\">action</code>. I used <code class=\"language-text\">async/await</code> like above since the instruction was very clear in the <a href=\"https://mobx.js.org/best/actions.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MobX website</a>.</p>\n<p>And when you send a request to a server using a token from Facebook, your server will return the access token from your server, which you have to store in your storage.</p>\n<p>One thing <code class=\"language-text\">React Native</code> is different from <code class=\"language-text\">React</code> is that you have to store the token by using <code class=\"language-text\">async-storage</code> library. I will talk about this in the next post</p>","fields":{"slug":"/posts/2019//posts/Request-to-Server-using-MobX","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-08-02T18:27:37.121Z","description":"How to send a request to the server via MobX","tags":["React"],"title":"Request to Server using MobX","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/Request-to-Server-using-MobX"}},"staticQueryHashes":["251939775","288581551","401334301"]}