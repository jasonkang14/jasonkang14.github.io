{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/React Remaking-Miniter-Using-React-part-five","result":{"data":{"markdownRemark":{"id":"3944683d-36f3-519f-867f-03209c31562b","html":"<p>A React list is like a JavaScript array, but it is recommended—not required—to provide a key to each element of a list. The key provided to each elemenet must be unique to the element. React executes the code whether a unique key is assigned to each element or not, but it keep throwing a warning if it is not.</p>\n<p>#1. Keys\nAccording to the React official document, key helps React identify which items have changed and are added/removed. Which is why keys have to be unique in order to distinguish which items have been affected by a change.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const todoItems = todos.map((todo) =>\n  &lt;li key={todo.id}>\n    {todo.text}\n  &lt;/li>\n);</code></pre></div>\n<p>I have said that React will still execute your code even if a list doesn’t have a key assigned to it, and that is because React automatically assigns an index as a key to each element, but there are some negative impacts to it, which is why you gotta get some unique keys to each and every item. Details can be found <a href=\"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></p>\n<p>It is recommended to use <code class=\"language-text\">shortid</code>, which generates short non-sequential url-friendly unique keys like below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var shortid = require('shortid');\nfunction createNewTodo(text) {\n  return {\n    completed: false,\n    id: shortid.generate(),\n    text\n  }\n}</code></pre></div>\n<p>#2. Keys with <code class=\"language-text\">map()</code> method\nto display tweets for my miniter project, I made each tweet as an object and nested it into an array. Instead of requiring <code class=\"language-text\">shortid</code>, I decided to use the indexes of the array with a prefix like below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  this.state.tweetArr.map((el, idx) =>\n          &lt;DisplayTweets\n              key={`tweet-${idx}`}\n              tweet={el}\n          />\n\n  )\n}</code></pre></div>\n<p>if I were to connect this with an API, it would be better to require <code class=\"language-text\">shortid</code>, but for the sake of this specific project, I decided to go with this.</p>","fields":{"slug":"/posts/2019//posts/React Remaking-Miniter-Using-React-part-five","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-06-26T20:56:37.121Z","description":"Remaking Miniter Using React","tags":["React"],"title":"React[05]Remaking Miniter Using React V - List and Keys","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/React Remaking-Miniter-Using-React-part-five"}},"staticQueryHashes":["251939775","288581551","401334301"]}