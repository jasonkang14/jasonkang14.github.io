{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/JWT-Token-returned-upon-login","result":{"data":{"markdownRemark":{"id":"ed8064d7-6e21-5a6d-826f-430c21104610","html":"<p><code class=\"language-text\">JWT</code> is a token that a server hands out to a user so that a user and server just exchanges the token instead of logging in every time you switch a page. After sending a <code class=\"language-text\">JWT</code> token to a user, you use a <code class=\"language-text\">login decorator</code> to check if he or she has an authentication to access a webpage.</p>\n<p>Apparently, thereâ€™s a <code class=\"language-text\">JWT</code> directly associated with <code class=\"language-text\">django</code>, but I used <code class=\"language-text\">PyJWT</code> instead.</p>\n<p>so first install <code class=\"language-text\">pyjwt</code>\n<code class=\"language-text\">pip install pyjwt</code></p>\n<p>This is the how you <code class=\"language-text\">encode</code> using <code class=\"language-text\">JWT</code>:\n<code class=\"language-text\">encoded_jwt = jwt.encode({'some': 'payload'}, 'secret', algorithm='HS256')</code></p>\n<ol>\n<li><code class=\"language-text\">payload</code> is some information that you want to send</li>\n<li><code class=\"language-text\">secret</code> is a key that you use when you encode</li>\n<li><code class=\"language-text\">algorithm</code> is how you want to encode your token</li>\n</ol>\n<p>So simple. It is so easy to encode, but I faced so many errors while implementing this. But the most important thing is that you have to <code class=\"language-text\">decode</code> your <code class=\"language-text\">JWT</code> token before sending it to a user.</p>\n<p>My first code was something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> bcrypt<span class=\"token punctuation\">.</span>checkpw<span class=\"token punctuation\">(</span>login_password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> registered_password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"iss\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"team_babKKUNG\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    key <span class=\"token operator\">=</span> db_settings<span class=\"token punctuation\">.</span>LUNCHBUDDYDATABASES<span class=\"token punctuation\">[</span><span class=\"token string\">\"jwt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"KEY\"</span><span class=\"token punctuation\">]</span>\n    algorithm <span class=\"token operator\">=</span> <span class=\"token string\">'HS256'</span>\n\n    jwt_token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> algorithm<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">:</span> jwt_token<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And below is the error that I got:\n<code class=\"language-text\">Object of type bytes is not JSON serializable</code>,\nwhich is very straight forward. you have to decode it like this in order to avoid the error and successfully.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> bcrypt<span class=\"token punctuation\">.</span>checkpw<span class=\"token punctuation\">(</span>login_password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> registered_password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"iss\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"team_babKKUNG\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    key <span class=\"token operator\">=</span> db_settings<span class=\"token punctuation\">.</span>LUNCHBUDDYDATABASES<span class=\"token punctuation\">[</span><span class=\"token string\">\"jwt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"KEY\"</span><span class=\"token punctuation\">]</span>\n    algorithm <span class=\"token operator\">=</span> <span class=\"token string\">'HS256'</span>\n\n    jwt_token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> algorithm<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">:</span> jwt_token<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","fields":{"slug":"/posts/2019//posts/JWT-Token-returned-upon-login","tagSlugs":["/tag/python/"]},"frontmatter":{"date":"2019-07-04T23:27:37.121Z","description":"Implementing Authentication using JWT","tags":["Python"],"title":"JWT Token Returned upon Login","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/JWT-Token-returned-upon-login"}},"staticQueryHashes":["251939775","288581551","401334301"]}