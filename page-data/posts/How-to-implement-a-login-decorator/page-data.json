{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/How-to-implement-a-login-decorator","result":{"data":{"markdownRemark":{"id":"62263f8c-c70a-5430-88ef-53d198f54cfd","html":"<p>The definition of decorator is a function that must execute before executing a function. Therefore, a login decorator is used where user authorization is necessary. For example, when you look up a registered-member-only event, you must be logged in, which is supposed to be done via a login decorator.</p>\n<p>The code is like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> jwt\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http          <span class=\"token keyword\">import</span> JsonResponse\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models              <span class=\"token keyword\">import</span> Account\n<span class=\"token keyword\">from</span> db_settings          <span class=\"token keyword\">import</span> jwt_key\n<span class=\"token keyword\">from</span> lunch_buddy<span class=\"token punctuation\">.</span>settings <span class=\"token keyword\">import</span> JWT_ALGORITHM\n<span class=\"token keyword\">def</span> <span class=\"token function\">login_decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">login_wrapper</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        token <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">]</span>\n\n        check_auth <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> jwt_key<span class=\"token punctuation\">,</span> JWT_ALGORITHM<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> Account<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>pk <span class=\"token operator\">=</span> check_auth<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            request<span class=\"token punctuation\">.</span>user <span class=\"token operator\">=</span> Account<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>pk <span class=\"token operator\">=</span> check_auth<span class=\"token punctuation\">[</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"error_code\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"INVALID_LOGIN\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> login_wrapper</code></pre></div>\n<p>Decorators could be “nested” into multiple layers depending on how you want to use it. In this case, I did not need much nesting.</p>\n<p>The basic logic of a login decorator is checking whether the user is a registered user or not by using a token, which is supposed to be given out by a server you have developed.</p>\n<ol>\n<li>Receive a token from <code class=\"language-text\">request headers</code></li>\n<li><code class=\"language-text\">Decode</code> using a <code class=\"language-text\">jwt</code> method</li>\n<li>Check if he or she has been registered.</li>\n</ol>\n<p>One thing that I find very clever is the use of a <code class=\"language-text\">primary key</code> to distinguish different users as you save the data to the database. As you use the token to see if a user with such <code class=\"language-text\">primary key</code> exists, you give the user authorizaion/authentication to access a page which requires a login.</p>","fields":{"slug":"/posts/2019//posts/How-to-implement-a-login-decorator","tagSlugs":["/tag/python/"]},"frontmatter":{"date":"2019-07-11T20:27:37.121Z","description":"How to implement a login decorator","tags":["Python"],"title":"Login Decorator","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/How-to-implement-a-login-decorator"}},"staticQueryHashes":["251939775","288581551","401334301"]}