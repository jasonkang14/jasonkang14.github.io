{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/Bcrypt-Signup-Function-using-hashpw","result":{"data":{"markdownRemark":{"id":"87c34aa1-dc19-5a37-9d93-c0d70388aa6b","html":"<p>I’ve been using Django to make API for a project, which was very straight forward as long as I follow the tutorial from the official website. And signup was also fairly easy.</p>\n<p>First, install bcrypt:\n<code class=\"language-text\">pip install bcrypt</code></p>\n<p>And using bcrypt, you gotta encode the entered password into <code class=\"language-text\">bytes</code> type,and then hash the password using a salt.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n    password <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>new_account_info<span class=\"token punctuation\">[</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n    hashed <span class=\"token operator\">=</span> bcrypt<span class=\"token punctuation\">.</span>hashpw<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> bcrypt<span class=\"token punctuation\">.</span>gensalt<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    new_account <span class=\"token operator\">=</span> Account<span class=\"token punctuation\">(</span>\n        user_id <span class=\"token operator\">=</span> new_account_info<span class=\"token punctuation\">[</span><span class=\"token string\">\"user_id\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        password <span class=\"token operator\">=</span> hashed<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n    new_account<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can use a randomly generated salt using <code class=\"language-text\">bcrypt.gensalt()</code>, which gets added to the password entered by the user. Then it gets hashed by using <code class=\"language-text\">bcrypt.hashpw()</code>, which gets decoded again before getting saved to the database.</p>\n<p>I saved the decoded password to the databse, which doesn’t really seem to make sense becuase the database probably should have encoded password, which sounds more secure. However, if I save encoded password to the database, it causes problem when the server checks the password upon login,which will be discussed in the next post.</p>","fields":{"slug":"/posts/2019//posts/Bcrypt-Signup-Function-using-hashpw","tagSlugs":["/tag/django/"]},"frontmatter":{"date":"2019-07-02T21:27:37.121Z","description":"Implementing Signup using Django and Bcrypt","tags":["Django"],"title":"Bcrypt[hashpw()] Signup, how to hash password securely","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/Bcrypt-Signup-Function-using-hashpw"}},"staticQueryHashes":["251939775","288581551","401334301"]}