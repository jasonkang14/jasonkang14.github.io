{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/JWT-Token-for-a-login-decorator","result":{"data":{"markdownRemark":{"id":"70f00a3d-36e2-5375-8080-9e536b770e1d","html":"<p>Using a <code class=\"language-text\">JWT</code> token for a <code class=\"language-text\">login decorator</code>is similar to checking hashed password. You just have to use a method to <code class=\"language-text\">decode</code> the token to see if a <code class=\"language-text\">payload</code> or <code class=\"language-text\">key</code> you used to <code class=\"language-text\">encode</code> your token is retrieved.</p>\n<p><code class=\"language-text\">jwt.decode(encoded_jwt, 'secret', algorithms=['HS256'])</code></p>\n<p>This is all that is to it, and it is really simple.\nBut the problem that I ran into while writing this was that I messed up the order of positional arguments and kept giving the <code class=\"language-text\">encoded_jwt</code> as the second argument.</p>\n<p>I tried so hard to look this up on <code class=\"language-text\">StackOverflow</code>, but couldn’t find anyone who made a stupid mistake like I did. So I fixed my code like below, and it is now working as a <code class=\"language-text\">login decorator</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> jwt\n<span class=\"token keyword\">import</span> db_settings\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> JsonResponse\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">login_decorator</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">login_wrapper</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        token <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">[</span><span class=\"token string\">\"Authentication\"</span><span class=\"token punctuation\">]</span>\n\n        team_name <span class=\"token operator\">=</span> <span class=\"token string\">\"team_babKKUNG\"</span>\n        key       <span class=\"token operator\">=</span> db_settings<span class=\"token punctuation\">.</span>LUNCHBUDDYDATABASES<span class=\"token punctuation\">[</span><span class=\"token string\">\"jwt\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"KEY\"</span><span class=\"token punctuation\">]</span>\n        algorithm <span class=\"token operator\">=</span> <span class=\"token string\">'HS256'</span>\n\n        check_auth <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> algorithm<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> check_auth<span class=\"token punctuation\">[</span><span class=\"token string\">\"iss\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> team_name<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> func<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"승인되지 않은 사용자입니다.\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> login_wrapper</code></pre></div>","fields":{"slug":"/posts/2019//posts/JWT-Token-for-a-login-decorator","tagSlugs":["/tag/python/"]},"frontmatter":{"date":"2019-07-05T19:27:37.121Z","description":"Implementing Authentication using JWT","tags":["Python"],"title":"JWT Token for a Login Decorator","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/JWT-Token-for-a-login-decorator"}},"staticQueryHashes":["251939775","288581551","401334301"]}