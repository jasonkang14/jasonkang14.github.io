{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/react/react-advanced-guide-context-explained","result":{"data":{"markdownRemark":{"id":"2b6f16c7-b475-5f52-b205-1b7715dc2abc","html":"<p>##This post is a summarized version of <a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react doc</a></p>\n<ol>\n<li>\n<p>When to use it\nAccording to the official React docs, <code class=\"language-text\">Context</code> is designed to share data that can be considered “global” for a tree of React components.</p>\n<ul>\n<li>\n<p>you use <code class=\"language-text\">Context</code> when you have to pass <code class=\"language-text\">props</code> to a grandchild-of-a-grandchild-of-a-grandchild component</p>\n</li>\n<li>\n<p>so <code class=\"language-text\">Context</code> can be used instead of <code class=\"language-text\">Redux</code> or <code class=\"language-text\">MobX</code> unless you are familiar with them or you choose to use an outside library. I am familiar with <code class=\"language-text\">MobX</code>, so I tried my best to compare the two, so hope that helps.</p>\n</li>\n<li>\n<p>If you don’t use <code class=\"language-text\">Context</code> when you pass down <code class=\"language-text\">props</code> to a deeply nexted component, you can just create a separate component for the specific <code class=\"language-text\">props</code> instead. So make sure that using <code class=\"language-text\">Context</code> is more efficient than any other methods that you can think of.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>How to use it\n<code class=\"language-text\">const MyContext = React.createContext(defaultValue);</code></p>\n<ul>\n<li>This creates a <code class=\"language-text\">Context</code> object. And when React renders, the object will read the current context value from the closest matching <code class=\"language-text\">Provider</code> above it in the tree.</li>\n<li>This is like an <code class=\"language-text\">observable</code> in <code class=\"language-text\">MobX</code>. The value/props that could be changed depending on events and its changes should be monitored globally.</li>\n<li>The <code class=\"language-text\">defaultValue</code> argument is only used when a component does not have a matching <code class=\"language-text\">Provider</code> above it in the tree. So <code class=\"language-text\">defaultValue</code> does not have to be set/determined all the time.</li>\n</ul>\n<p><code class=\"language-text\">&lt;MyContext.Provider value={/* some value */}></code></p>\n<ul>\n<li>\n<p>Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes.</p>\n</li>\n<li>\n<p>so I think <code class=\"language-text\">Provider</code> is something like a <code class=\"language-text\">Redux</code> or <code class=\"language-text\">MobX</code> store that handles events associated with such changes.</p>\n</li>\n<li>\n<p><code class=\"language-text\">Provider</code> accepts a <code class=\"language-text\">value</code> props and can provide such values to many consumers. This is similar to how many components can access change of <code class=\"language-text\">props</code> or <code class=\"language-text\">states</code> in a <code class=\"language-text\">Redux/MobX</code> store.</p>\n</li>\n</ul>\n<p><code class=\"language-text\">Class.contextType</code></p>\n<ul>\n<li>lets you consume the nearest current value of that Context type using this.context.</li>\n<li>in <code class=\"language-text\">MobX</code>, you can determine the type of <code class=\"language-text\">observable</code> when you declare it for the first time. I think this is similar to that.</li>\n<li>this is associated with <code class=\"language-text\">lifecycle</code> methods, but not to sure how to use it. I think I would have to use it myself in my code to fully understand it.</li>\n</ul>\n<p><code class=\"language-text\">Context.Consumer</code></p>\n<ul>\n<li>A React component that subscribes to context changes. This lets you subscribe to a context within a function component.</li>\n<li>this is like an <code class=\"language-text\">observer</code> in <code class=\"language-text\">MobX</code>. <code class=\"language-text\">Consumer</code> pretty much represents a component</li>\n<li><code class=\"language-text\">Consumer</code> detects change of <code class=\"language-text\">props</code> in <code class=\"language-text\">Provider</code> and have <code class=\"language-text\">React</code> render again.</li>\n</ul>\n</li>\n</ol>","fields":{"slug":"/posts/2019//posts/react/react-advanced-guide-context-explained","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-08-27T22:27:37.121Z","description":"React Context Explained","tags":["React"],"title":"React - Context Explained","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/react/react-advanced-guide-context-explained"}},"staticQueryHashes":["251939775","288581551","401334301"]}