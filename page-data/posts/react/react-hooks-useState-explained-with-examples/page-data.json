{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/react/react-hooks-useState-explained-with-examples","result":{"data":{"markdownRemark":{"id":"2552dcac-ad06-5c30-b853-94c4669f4a06","html":"<p><code class=\"language-text\">React</code> has come out with <code class=\"language-text\">hooks</code> while ago, but it is still not that common to use hooks even though it helps a lot with program performance. I have already written about <code class=\"language-text\">useEffect()</code> in a different <a href=\"https://jasonkang14.github.io/posts/React-Hooks-useEffect-update-when-you-want\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">post</a></p>\n<p>I personally find <code class=\"language-text\">hooks</code> a lot easier. <code class=\"language-text\">useEffect()</code> is a lot easier to use than <code class=\"language-text\">componentDidUpdate()</code>. I faced so many infinite loops while trying to use <code class=\"language-text\">componentDidUpdate()</code>, so ended up using different lifecycle methods such as <a href=\"https://jasonkang14.github.io/posts/react/react-life-cycle-get-derived-state-from-props-with-mobx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">getDerivedStateFromProps</a></p>\n<p>When you change a state in a react component, you have to <code class=\"language-text\">setState</code> like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function-variable function\">increasePrice</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    priceChange<span class=\"token operator\">:</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>priceChange<span class=\"token punctuation\">,</span>\n    price<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>price <span class=\"token operator\">+</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>By chaning the state of price, I was trying to update the total price that appears in a component.</p>\n<p>If I were to use <code class=\"language-text\">useState()</code> instead, I can change the above method/function like below</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>priceChange<span class=\"token punctuation\">,</span> setPriceChange<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>price<span class=\"token punctuation\">,</span> setPrice<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function-variable function\">increasePrice</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setPrieChange</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>priceChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span>price <span class=\"token operator\">+</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The value inside <code class=\"language-text\">useState(value)</code> represents the intial value of the state. By using <code class=\"language-text\">useState</code>, there is no need for destructuring, and the code itself becomes a lot more straight-forward. The downside is that if you have a lot of states to manage within a single component, you have to declare all of them like I did in the second example.</p>\n<p><code class=\"language-text\">React Hooks</code> allows you to write your React project as a function rather than a class, which could increase the performance exponentially especially if your project is huge. I have actually did the entire project with function components without having to use class.</p>","fields":{"slug":"/posts/2019//posts/react/react-hooks-useState-explained-with-examples","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-09-07T14:27:37.121Z","description":"How to use the state hook in React","tags":["React"],"title":"React Hooks[useState()] - setState has become easier","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/react/react-hooks-useState-explained-with-examples"}},"staticQueryHashes":["251939775","288581551","401334301"]}