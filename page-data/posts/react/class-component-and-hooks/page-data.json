{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/react/class-component-and-hooks","result":{"data":{"markdownRemark":{"id":"ce1620d8-9a6e-5504-9732-8abb054b1250","html":"<p>I have already written about how <code class=\"language-text\">componentDidMount</code>, <code class=\"language-text\">componentDidUpdate</code> could be replaced with <code class=\"language-text\">useEffect()</code> in React Hooks in this <a href=\"https://jasonkang14.github.io/posts/React-Hooks-useEffect-update-when-you-want\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">post</a>.</p>\n<p>And instead of declaring <code class=\"language-text\">this.state</code> inside <code class=\"language-text\">constructor()</code>, you can just use <code class=\"language-text\">useState()</code>, which is supposed to be faster as explained in this <a href=\"https://jasonkang14.github.io/posts/react/react-hooks-useState-explained-with-examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">link</a>.</p>\n<p>There is another hook called <code class=\"language-text\">useRef</code>, which can be used to ensure that a certain function is called only when the component is called for the first time. <code class=\"language-text\">useRef</code> hook is used to remember/store the initial value.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Profile</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jason\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isFirstRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isFirstRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    isFirstRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the function above, <code class=\"language-text\">isFirstRef</code> is initially set <code class=\"language-text\">true</code>, which is why the if clause works, and then the function <code class=\"language-text\">callApi()</code> gets called when the Profile component is called for the first time. However, after calling <code class=\"language-text\">callApi()</code>, the value of <code class=\"language-text\">isFirstRef</code> changes to <code class=\"language-text\">false</code>, therefore, the if clause does not work if the component gets called again.</p>\n<p>If you need to use the same logic in different components, you can create a custom hook like below.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// useOnFirstRender.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useOnFirstRender</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> isFirstRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isFirstRef<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    isFirstRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Profile.js</span>\n\n<span class=\"token keyword\">import</span> useOnFirstRender <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Profile</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jason\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useOnFirstRender</span><span class=\"token punctuation\">(</span>callApi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Changing <code class=\"language-text\">getDerivedStateFromProps</code> is interesting. I posted about <code class=\"language-text\">getDerivedStateFromProps</code> <a href=\"https://jasonkang14.github.io/posts/react/react-life-cycle-get-derived-state-from-props-with-mobx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>. Instead of comparing a newly received props and a previously stored state as you would do in a class component, you can easily do it using <code class=\"language-text\">useState()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SpeedIndicator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> speed <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isFaster<span class=\"token punctuation\">,</span> setIsFaster<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>prevSpeed<span class=\"token punctuation\">,</span> setPrevSpeed<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>speed <span class=\"token operator\">!==</span> prevSpeed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setIsFaster</span><span class=\"token punctuation\">(</span>speed <span class=\"token operator\">></span> prevSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setPrevSpeed</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The values of <code class=\"language-text\">isFaster</code> and <code class=\"language-text\">prevSpeed</code> changes right away as the state changes. Apprently this is slightly less efficient than using 1<code class=\"language-text\">getDerivedStateFromProps</code>, but it shouldnâ€™t be too bad since it happens before forming DOM.</p>\n<p><code class=\"language-text\">useDebounce</code> provides a debounce, which is a higher-order function that returns another function. To be honest, I am not sure why you would use this.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useDebounce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> callback<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">,</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Profile</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> setName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>nameTemp<span class=\"token punctuation\">,</span> setNameTemp<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">useDebounce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span>nameTemp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    ms<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    args<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>nameTemp<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It looks like, after a second, the <code class=\"language-text\">useDebounce</code> hook <code class=\"language-text\">setName</code> the <code class=\"language-text\">name</code> state as <code class=\"language-text\">nameTemp</code>. I feel like a custom hook is just creating a separate function that you might use in different components. Personally, I donâ€™t see a point of using a <code class=\"language-text\">hook</code> called <code class=\"language-text\">useDebounce</code> when you can just create a simple function that has <code class=\"language-text\">setTimeout</code>. If I get to think otherwise later on, I will post about it as well.</p>\n<p>According to <code class=\"language-text\">usehooks.com</code>: When used in conjunction with useEffect, as we do in the recipe below, you can easily ensure that expensive operations like API calls are not executed too frequently.</p>\n<p><code class=\"language-text\">useHasMounted</code> seems useless. and it is not found anywhere.</p>","fields":{"slug":"/posts/2019//posts/react/class-component-and-hooks","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-10-16T23:27:37.121Z","description":"React.js class component and hooks: ","tags":["React"],"title":"React Hooks - Rewriting Class Component Using React Hooks","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/react/class-component-and-hooks"}},"staticQueryHashes":["251939775","288581551","401334301"]}