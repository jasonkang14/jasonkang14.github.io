{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/react/react-life-cycle-get-derived-state-from-props-with-mobx","result":{"data":{"markdownRemark":{"id":"2abda92b-cfe0-586f-a612-3141ee1ddf07","html":"<p>I am sure someone out there—or maybe you who are reading this post—has/have experienced infinite loop while trying to use <code class=\"language-text\">componentDidUpdate()</code>. Or you might have experienced that <code class=\"language-text\">this.props</code> and <code class=\"language-text\">prevProps</code> turned out to be same, so your <code class=\"language-text\">setState</code> inside <code class=\"language-text\">componentDidUpdate()</code> won’t trigger.</p>\n<p>I personally struggled a lot with <code class=\"language-text\">this.props</code> and <code class=\"language-text\">prevProps</code> being equal, but couldn’t solve the problem. Adn the worst part was that it would work in some screens, but won’t in others.</p>\n<p>The solution that I have found is using <code class=\"language-text\">getDerivedStateFromProps()</code>. While <code class=\"language-text\">componentDidUpdate()</code> compares <code class=\"language-text\">this.props</code> with <code class=\"language-text\">prevProps</code> or <code class=\"language-text\">this.state</code> with <code class=\"language-text\">prevState</code>, <code class=\"language-text\">getDerivedStateFromProps()</code> compares <code class=\"language-text\">this.props</code> and <code class=\"language-text\">this.state</code> which are written as <code class=\"language-text\">props</code> and <code class=\"language-text\">state</code> respectively.</p>\n<p>Look at my code below</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">toJS</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>MainScreenStore<span class=\"token punctuation\">.</span>snsPostArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">!==</span> state<span class=\"token punctuation\">.</span>prPostArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                prPostArr<span class=\"token operator\">:</span> <span class=\"token function\">toJS</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>MainScreenStore<span class=\"token punctuation\">.</span>snsPostArr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                likedPostSet<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token function\">toJS</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>MainScreenStore<span class=\"token punctuation\">.</span>snsPostArr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the code above, I am trying to <code class=\"language-text\">setState</code> <code class=\"language-text\">prPostArr</code> and <code class=\"language-text\">likedPostSet</code> by using <code class=\"language-text\">props.MainScreenStore.snsPostArr</code>. I am fetching data from a server and storing the information into an <code class=\"language-text\">observable</code> called <code class=\"language-text\">snsPostArr</code> in a <code class=\"language-text\">MobX store</code>. The screen receives <code class=\"language-text\">observable</code> as a <code class=\"language-text\">props</code> from <code class=\"language-text\">MainScreenStore</code>, which handles all the requests made in <code class=\"language-text\">MainScreen</code></p>\n<p><img src=\"https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-9/69336415_10219573739995003_5495412085456109568_n.jpg?_nc_cat=107&#x26;_nc_eui2=AeHeNzCxq53g06myCRPZzTYxjOPVBfNNOXSFhqfm7hXjR57BI6yyNUUt6gOxPfaZRp2ET59PczlEK707VjsINBi3Ro8DifNNkrXbVs870wTPTg&#x26;_nc_oc=AQmuevn132BoKchtXMlt-yPVxxZ6pWYPDGS2_CLlvSmbMwqDeNCc4bJCW2iuiV483iQ&#x26;_nc_ht=scontent-icn1-1.xx&#x26;oh=4635c18a9e8eb6058c336e3d8519ca80&#x26;oe=5E1606EA\" alt=\"console logs from getDerivedStateFromProps\"></p>\n<p>Since both parameters are arrays, you cannot compare them by simply using <code class=\"language-text\">===</code>, I am comparing the length of the two arrays. Initially both of them have the length of zero, but when the store fetches data from the server, the array from <code class=\"language-text\">props</code> changes, thus changing the length.</p>\n<p><img src=\"https://scontent-icn1-1.xx.fbcdn.net/v/t1.0-9/68536951_10219573747355187_4747634622542643200_n.jpg?_nc_cat=109&#x26;_nc_eui2=AeGhYQeQJYys75YQjbuhqREOamP-ebJ-BO_-n32QJn-yvOOKKollYbMxo9G7ymGayhAO4rCtd8PhBq6ocoHd5OzzCZBuxmUvkmb20DPEYTTmNQ&#x26;_nc_oc=AQlHNJT-h8gYLBqESNBg0F9y1DX5Pf5DGmGWOJccOXpAOmSyPFNw_-AJoI1lNa08wIU&#x26;_nc_ht=scontent-icn1-1.xx&#x26;oh=463d669a534169eb83cf512188228cff&#x26;oe=5DDB3625\" alt=\"iPhone Simulator\"></p>\n<p>I will write about changing the timestamp in a later post</p>","fields":{"slug":"/posts/2019//posts/react/react-life-cycle-get-derived-state-from-props-with-mobx","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-08-14T14:27:37.121Z","description":"How to use getDerivedStateFromProps instead of componentDidUpdate","tags":["React"],"title":"React Lifecycle - Using getDerivedStateFromProps with React Native and MobX","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/react/react-life-cycle-get-derived-state-from-props-with-mobx"}},"staticQueryHashes":["251939775","288581551","401334301"]}