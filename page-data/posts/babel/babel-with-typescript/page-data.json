{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/babel/babel-with-typescript","result":{"data":{"markdownRemark":{"id":"5e31a484-69d0-5465-8e47-5f3fc1ee19a8","html":"<p>Babel 7 supports TypeScript. Since I am pretty new to web development, I did not fully understand why people were struggling to use Babel with TypeScript. According to what I have found online, Babel did not support type check, which is a key feature of TypeScript. And TypeScript itself could do both compiling and type checking. But now Babel 7 allows TypeScript to compile faster by allowsing the TypeScript compiler to only check types wihtout emitting files</p>\n<p>Install all the necessary plugins:\n<code class=\"language-text\">npm install --save-dev @babel/preset-typescript @babel/preset-env @babel/plugin-proposal-class-properties @babel/plugin-proposal-object-rest-spread</code></p>\n<p>Set up <code class=\"language-text\">.babelrc</code> like below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n    \"presets\": [\n        \"@babel/env\",\n        \"@babel/preset-typescript\"\n    ],\n    \"plugins\": [\n        \"@babel/proposal-class-properties\",\n        \"@babel/proposal-object-rest-spread\"\n    ]\n}</code></pre></div>\n<p>Create a <code class=\"language-text\">tsconfig.json</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"compilerOptions\": {\n    // Target latest version of ECMAScript.\n    \"target\": \"esnext\",\n    // Search under node_modules for non-relative imports.\n    \"moduleResolution\": \"node\",\n    // Process &amp; infer types from .js files.\n    \"allowJs\": true,\n    // Don't emit; allow Babel to transform files.\n    \"noEmit\": true,\n    // Enable strictest settings like strictNullChecks &amp; noImplicitAny.\n    \"strict\": true,\n    // Disallow features that require cross-file information for emit.\n    \"isolatedModules\": true,\n    // Import non-ES modules as default imports.\n    \"esModuleInterop\": true\n  },\n  \"include\": [\n    \"src\"\n  ]\n}</code></pre></div>","fields":{"slug":"/posts/2019//posts/babel/babel-with-typescript","tagSlugs":["/tag/typescript/"]},"frontmatter":{"date":"2019-12-07T23:27:37.121Z","description":"Using Babel with TypeScript","tags":["TypeScript"],"title":"Babel - How to Make a Babel Plugin","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/babel/babel-with-typescript"}},"staticQueryHashes":["251939775","288581551","401334301"]}