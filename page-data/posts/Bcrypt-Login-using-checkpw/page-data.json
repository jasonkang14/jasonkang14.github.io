{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/Bcrypt-Login-using-checkpw","result":{"data":{"markdownRemark":{"id":"97903689-d98a-5711-922c-50f3bf0fc311","html":"<p>Bcrypt has a method called <code class=\"language-text\">checkpw()</code>, which allows you to check whether the entered password matches the hashed password, which is saved in the database.\n<code class=\"language-text\">bcrypt.checkpw(password, hashed):</code></p>\n<p>I used <code class=\"language-text\">checkpw()</code> method as well like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> bcrypt<span class=\"token punctuation\">.</span>checkpw<span class=\"token punctuation\">(</span>login_password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> registered_password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"login success\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In my last post, I mentioned that you have to save a decoded password to the database because it would cause errors in login otherwise. I encoded the <code class=\"language-text\">login_password</code>, which is the password that a user entered to login, but did not encode <code class=\"language-text\">registered_password</code>, which is the hashed password because I had encoded it before hasing when I saved it to the database.</p>\n<p>But it gave me this error\n<code class=\"language-text\">Unicode-objects must be encoded before checking</code></p>\n<p>Facing the error message, I changed my code to this</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> bcrypt<span class=\"token punctuation\">.</span>checkpw<span class=\"token punctuation\">(</span>login_password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> registered_password<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"login success\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>But the code above doesn’t really make sense because I am “double-encoding” my hashed password, so I go another error message like this below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">File \"/Users/byeongjinkang/miniconda3/envs/lunch_buddy/lib/python3.7/site-packages/bcrypt/__init__.py\", line 86, in hashpw\n    raise ValueError(\"Invalid salt\")\nValueError: Invalid salt</code></pre></div>\n<p>I thought this implied that my salt, which was randomly generated by <code class=\"language-text\">bcrypt.gensalt()</code>, was invalid, which doesn’t make sense. Why is bcrypt telling me that a salt, which was randomly generated by bcrypt, was invalid? In order to get deeper into the problem, I decided to look into that <code class=\"language-text\">__init__.py</code>, and this is where the error occurred.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">hashed <span class=\"token operator\">=</span> _bcrypt<span class=\"token punctuation\">.</span>ffi<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span><span class=\"token string\">\"char[]\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\nretval <span class=\"token operator\">=</span> _bcrypt<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>bcrypt_hashpass<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">,</span> salt<span class=\"token punctuation\">,</span> hashed<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>hashed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> retval <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Invalid salt\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The bcrypt library describes this section that the hashed password must have the <code class=\"language-text\">$2b$</code> prefix, which is achived by decoding the password. If you save the password without decoding it, its prefix becomes <code class=\"language-text\">b'$2b$</code>, which raises an error.</p>\n<p>Then you could argue “why don’t you save it as an encoded password?” I tried it, but unfortunately(?) <code class=\"language-text\">bytes</code> object, whish is a type of the hashed password, doesn’t have an attribute <code class=\"language-text\">encode</code>. So this is pretty much the only way.</p>\n<p>In my next post, I am going to talk about how to use <code class=\"language-text\">jwt</code> token.</p>","fields":{"slug":"/posts/2019//posts/Bcrypt-Login-using-checkpw","tagSlugs":["/tag/django/"]},"frontmatter":{"date":"2019-07-03T13:27:37.121Z","description":"Implementing Login using Django and Bcrypt","tags":["Django"],"title":"Bcrypt[checkpw()] Login, how to check if an entered password matches the hashed password saved in the database","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/Bcrypt-Login-using-checkpw"}},"staticQueryHashes":["251939775","288581551","401334301"]}