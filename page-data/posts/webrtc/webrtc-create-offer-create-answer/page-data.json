{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/webrtc/webrtc-create-offer-create-answer","result":{"data":{"markdownRemark":{"id":"03b94cdb-577f-5bfb-9a16-1d528eceec1e","html":"<p>##This post is about using WebRTC in React Native.</p>\n<p>make sure to install <code class=\"language-text\">react-native-webrtc</code> versions 1.75 or above <br>\n<code class=\"language-text\">npm install --save react-native-webrtc</code></p>\n<p>And then you have to import. <br>\n<code class=\"language-text\">import { RTCPeerConnection } from 'react-native-webrtc'</code></p>\n<p>Now create a caller</p>\n<p><code class=\"language-text\">const caller = new RTCPeerConnection()</code></p>\n<p>Now the caller has to <code class=\"language-text\">createOffer()</code> with <code class=\"language-text\">offerOptions</code>.\n<code class=\"language-text\">offerOptions</code> represent which source of data you are going to offer: either audio or video, or could be both.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> offerOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  offerToReceiveAudio<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  offerToReceiveVideo<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  voiceActivityDetection<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Using the created <code class=\"language-text\">offer</code>, the caller must set his/her <code class=\"language-text\">localDescription</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">caller<span class=\"token punctuation\">.</span><span class=\"token function\">createOffer</span><span class=\"token punctuation\">(</span>offerOptions<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> caller<span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDescription</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then the caller sends this <code class=\"language-text\">localDescription</code> to a callee, which is another <code class=\"language-text\">RTCPeerConnection</code>. <br>\n<code class=\"language-text\">const callee = new RTCPeerConnection()</code><br></p>\n<p>Then the callee uses the <code class=\"language-text\">localDescription</code> from the caller to set the callee’s <code class=\"language-text\">remoteDescription</code>. After setting the <code class=\"language-text\">remoteDescription</code>, the callee now <code class=\"language-text\">createAnswer()</code> and uses the answer to set the callee’s <code class=\"language-text\">localDescription</code>.</p>\n<p>The callee then sends the <code class=\"language-text\">localDescription</code> to the caller so that the caller can use the callee’s <code class=\"language-text\">localDescription</code> to set the caller’s <code class=\"language-text\">remoteDescription</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">callee<span class=\"token punctuation\">.</span><span class=\"token function\">setRemoteDescription</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> callee<span class=\"token punctuation\">.</span><span class=\"token function\">createAnswer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> callee<span class=\"token punctuation\">.</span><span class=\"token function\">setLocalDescription</span><span class=\"token punctuation\">(</span>desc<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The caller receives the callee’s <code class=\"language-text\">localDescription</code> and uses the <code class=\"language-text\">localDescription</code> to set the caller’s <code class=\"language-text\">remoteDescription</code></p>\n<p><code class=\"language-text\">caller.setRemoteDescription(desc)</code></p>\n<p>Then the caller and callee needs to change their Interactive Connectivity Establishment(ICE) information in order to build connection. It is managed using an eventhandler, which I will talk about in a later post.</p>","fields":{"slug":"/posts/2019//posts/webrtc/webrtc-create-offer-create-answer","tagSlugs":["/tag/webrtc/"]},"frontmatter":{"date":"2019-08-16T17:27:37.121Z","description":"WebRTC flow explained","tags":["WebRTC"],"title":"WebRTC Flow[01] - createOffer() and createAnswer()","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/webrtc/webrtc-create-offer-create-answer"}},"staticQueryHashes":["251939775","288581551","401334301"]}