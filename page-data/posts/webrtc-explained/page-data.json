{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/webrtc-explained","result":{"data":{"markdownRemark":{"id":"dd8c0a32-0490-5472-ba0d-e1dcf49e6d91","html":"<p>###This is a summary of a post at <a href=\"https://www.innoarchitech.com/blog/what-is-webrtc-and-how-does-it-work\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">innoarchitech</a></p>\n<h4 id=\"webrtc-stands-for-web-real-time-communications\" style=\"position:relative;\"><a href=\"#webrtc-stands-for-web-real-time-communications\" aria-label=\"webrtc stands for web real time communications permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WebRTC stands for Web Real-Time Communications</h4>\n<p>###Intro</p>\n<ol>\n<li>A set of plugin-free APIs</li>\n<li>Leverages multiple standards and protocols such as data streams, STUN/TURN servers, signaling, JSEP, ICE, SIP, SDP, NAT, UDP/TCP, network sockets, and more</li>\n</ol>\n<p>###Detail</p>\n<p>####Peer-To-Peer Communication</p>\n<ul>\n<li>\n<p>audio and video communications</p>\n</li>\n<li>\n<p>each person’s web browser must agree to begin communication, know how to locate one anohter, bypass security and firewall protections, and transmit all multimedia communications in real-time</p>\n</li>\n<li>\n<p>knowing how to locate and establish a network socket connection with another computer’s web browser is crucial</p>\n<ul>\n<li>you need to bidirectionally transmit multimedia data</li>\n<li>difficult to make a request to another computer because it is hard to know exactly where it is.\n<ul>\n<li>you have to send a request by sending your audio/video data while receiving it from the othe rside without going through an external server</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>####Firewalls and NAT Traversal</p>\n<ul>\n<li>\n<p>Firewall enforces a set of rules about what data packets will be allowed to enter of leave a network. some sort of a security system</p>\n</li>\n<li>\n<p>computer sits behind a firewall and Network Access Translation device (NAT)</p>\n<ul>\n<li>which is why your computer does not have a static public IP address</li>\n<li>NAT device translates private IP address from inside a firewall to public-facing IP addresses\n<ul>\n<li>NAT is needed for security</li>\n<li>NAT makes your request IP to look different from your actualy IP address</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>STUN(Session Traversal Utilities for NAT) and TURN(Traversal Using Relays around NAT) servers allow you to get someone else’s IP to make a call by sending audio/video data</p>\n<ul>\n<li>a request for your public-facing IP address is first made to a STUN server\n<ul>\n<li>you tell your peers to send a request to your server via your public-facing IP address</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>####Signaling, Sessions, and Protocols</p>\n<ul>\n<li>\n<p>negotiate and establish the network session connection with your peer</p>\n<ul>\n<li>The initial session negotiation and establishment happens using a signaling/communication protocol specialized in multimedia communications\n<ul>\n<li>something like Session Initiation Protocol(SIP)\n<ul>\n<li>the chosen signaling protocol must work with an application layer protocol called the Session Description Protocol (SDP)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>when you try to communicate with someone, you generate a set of Interactive Connectivity Establishment(ICE) protocol candidates</p>\n<ul>\n<li>the candidates represent a given combination of IP address, port, and transport protocol to be used</li>\n</ul>\n<p><img src=\"https://mdn.mozillademos.org/files/6119/webrtc-complete-diagram.png\" alt=\"WebRTC exchange diagram from MDN\"></p>\n</li>\n</ul>\n<p>####Complete Process Summarized</p>\n<ul>\n<li>\n<p>Each peer first establishes its public-facing IP address by sending a request to STUN</p>\n<ul>\n<li>Signaling data channels are then dynamically created to detect peers\n<ul>\n<li>this channel is somewhat like a private room</li>\n<li>only those who know about the room can send and receive messages</li>\n<li>you need a unique idenfitier to access it</li>\n<li>but some protocols do not require a channel since webRTC is flexibile and does not specify the signaling process</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>support peer-to-peer negotiations and session establishment</p>\n<ul>\n<li>once two or more peers are connected to the same channel, the peers are able to communicate and negotiate session information\n<ul>\n<li>initiating peer sends an offer using a signaling protocol and waits to receive an answer from any receivers that are connected to the given channel</li>\n<li>Once the answer is received, a process occurs to determine and negotiate the best of the ICE candidates gathered by each peer.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>once the optimal ICE candidates are chosen,</p>\n<ul>\n<li>things like all of the required metadata, network routing, and media information is agreed</li>\n<li>the network socket session between the peers is then fully established and active. - local data streams and data channel endpoints are created by each peer, and multimedia data is finally transmitted both ways</li>\n</ul>\n</li>\n<li>\n<p>if the process of agreeing on the best ICE candidates fails, the fallback is to use a TURN server as a relay instead of using STUN</p>\n<ul>\n<li>basically employs a server that acts as an intermediary and relays any stransmitted data between peers.</li>\n<li>when TURN is used, each peer no longer needs to know how to contact and transmit data to each other.\n<ul>\n<li>they need to know what public TURN server to send and receive real-time multimedia data during a communication session</li>\n</ul>\n</li>\n<li>TURN servers need to be quite robust, have extensive bandwidth and processing capabilities, and handle potentially large amounts of data.</li>\n</ul>\n</li>\n</ul>\n<p>####WebRTC JavaScript APIs</p>\n<ul>\n<li>WebRTC and the processes described are implemented through a set of JavaScript APIs that actually produce and transmit the multimedia data being used for real-time communications.</li>\n<li>The primary WebRTC APIs include, Navigator.getUserMedia (capture audio and video), RTCPeerConnection (create and negotiate peer-to-peer connections), and RTCDataChannel (represents a bidirectional data channel between peers).</li>\n</ul>","fields":{"slug":"/posts/2019//posts/webrtc-explained","tagSlugs":["/tag/webrtc/"]},"frontmatter":{"date":"2019-08-03T14:27:37.121Z","description":"Basics of WebRTC Explained","tags":["WebRTC"],"title":"What is WebRTC and How Does It Work?","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/webrtc-explained"}},"staticQueryHashes":["251939775","288581551","401334301"]}