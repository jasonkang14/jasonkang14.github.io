{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/Miniter-Events/","result":{"data":{"markdownRemark":{"id":"d0a9f9b3-2daf-5070-9f2f-dfccb17fabea","html":"<p>I had to make some events such as <code class=\"language-text\">keyup</code> and <code class=\"language-text\">click</code> for my Miniter. <br>\nI used <code class=\"language-text\">addEventListner</code> on certain elements in order to give events to them so that they may do what I want them to do.</p>\n<p>#1. keyup, keydown, onKeyUp, onKeyDown\nChange the color of a button from gray to blue if all cateroies are filled.<br>\nBelow is the code I wrote to accomplish this</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// HTML\n&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n\n&lt;body>\n  &lt;div class=\"container\">\n    &lt;img class=\"logo\" src=\"https://upload.wikimedia.org/wikipedia/fr/thumb/c/c8/Twitter_Bird.svg/944px-Twitter_Bird.svg.png\">\n    &lt;header>&lt;b>Log in to Miniter&lt;/b>&lt;/header>\n    &lt;form>\n      &lt;div class=\"input-wrap\">\n        &lt;input type=\"text\" placeholder=\"Enter ID\" class=\"enterId\" autocomplete=\"username\">\n      &lt;/div>\n      &lt;div class=\"input-wrap\">\n        &lt;input type=\"password\" placeholder=\"Password\" class=\"enterPassword\" autocomplete=\"current-password\">\n      &lt;/div>\n      &lt;div class=\"input-wrap\">\n        &lt;button class=\"login-btn\">&lt;b>Log in&lt;/b>&lt;/button>\n      &lt;/div>\n    &lt;/form>\n    &lt;div class=\"input-wrap\">\n      &lt;a href=\"./signup.html\">Sign Up for Miniter&lt;/a>\n    &lt;/div>\n  &lt;/div>\n  &lt;script src=\"js/login.js\">&lt;/script>\n&lt;/body>\n&lt;/html>\n</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// CSS\n.login-btn {\n  border: none;\n  border-radius: 30px;\n  color: white;\n  font-size: 20px;\n  text-align: center;\n  background-color: gray;\n}\n\nbutton:hover, a:hover {\n  cursor: pointer;\n  opacity: 0.7;\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// JavaScript\nconst elLoginBtn = document.querySelector('.login-btn');\nconst elInputId = document.querySelector('.enterId');\nconst elInputPassword = document.querySelector('.enterPassword');\n\nconst changeBtnColor = () => {\n  if(elInputId.value !== \"\" &amp;&amp; elInputPassword.value !== \"\") {\n    elLoginBtn.style.backgroundColor = \"#0099ff\";\n  } else {\n    elLoginBtn.style.backgroundColor = \"gray\";\n  }\n};\n\nelInputId.addEventListener('keyup', changeBtnColor);\nelInputPassword.addEventListener('keyup', changeBtnColor);</code></pre></div>\n<p>I used <code class=\"language-text\">document.querySelector()</code> instead of <code class=\"language-text\">document.getElementById()</code> or <code class=\"language-text\">document.getElementsByClassName()</code> for the consistency purpose.</p>\n<p>I also used <code class=\"language-text\">keyup</code> instead of <code class=\"language-text\">keydown</code> since <code class=\"language-text\">keyup</code> triggers an event when you release a key that just pressed. <br>\nI tried using <code class=\"language-text\">keydown</code> first because <code class=\"language-text\">keydown</code> triggers an event when you press down a key.<br> However, it required me to press an extra key in order to trigger the event. I believe that is because when <code class=\"language-text\">keydown</code>is used, the function <code class=\"language-text\">changeBtnColor</code> is executed before a key gets inserted as a value.</p>\n<p>#2. click, onClick\nAdded a <code class=\"language-text\">click</code> event to generate a tweet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const makeTweetList = (obj) => {\n  let tweet =\n  `\n    &lt;span class=\"user\">${obj.user}&lt;/span>\n    &lt;span class=\"date\">${obj.date}&lt;/span>\n    &lt;div class=\"content\">${obj.contents}&lt;/div>\n  `\n  return tweet;\n};\n\nconst makeNewTweet = () => {\n  count++;\n  if (elTextarea.value === \"\") {\n    alert(\"write your tweet\");\n    event.preventDefault();\n    return;\n  }\n\n  const newTweet = document.createElement('li');\n  newTweet.className = \"tweet\";\n  let tweetObj = {\n    user: elUserName.innerHTML,\n    date: getDate(),\n    contents: elTextarea.value\n  }\n\n  newTweet.innerHTML = makeTweetList(tweetObj);\n  elTweetList.insertBefore(newTweet, elTweetList.childNodes[0]);\n}\n\nelMakeBtn.addEventListener('click', makeNewTweet);</code></pre></div>\n<p>I decided to use <code class=\"language-text\">backtick</code> to create HTML elements and put them directly into the HTML using DOM as shown in the function <code class=\"language-text\">makeTwitList(obj)</code>. <br>\nThe function <code class=\"language-text\">makeTwitList(obj)</code> is called from function <code class=\"language-text\">makeNewTweet()</code> after receiving input values upon <code class=\"language-text\">click</code>. <br>\n<code class=\"language-text\">makeNewTweet()</code> function stores input values into an object and sends the object to <code class=\"language-text\">makeTwitList(obj)</code> as a parameter so that the callback function may require data from the object.</p>\n<p>Then the returned value gets assigned as <code class=\"language-text\">innerHTML</code> of a <code class=\"language-text\">newTweet</code> element. <code class=\"language-text\">insertBefore()</code>was used so that a new tweet may get stacked upon old tweets.</p>\n<p>#3. event.stopPropagation()\nI was trying my best—ok I admit not my utmost best— to make it look similar to the actual Twitter. So I added a feature to enlarge the textarea when someone clicks the textarea to make a new tweet and return it to its original size if elsewhere is clicked. Below is my code</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//HTML\n\n&lt;div class=\"enterNewTweet\">\n  &lt;textarea placeholder=\"What's happening?\" class=\"newMessage\">&lt;/textarea>\n  &lt;div class=\"toolBar\">\n    &lt;button class=\"make-btn\">Tweet&lt;/button>\n  &lt;/div>\n&lt;/div></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//CSS\n\ntextarea {\n  border-radius: 5px;\n  border: 3px solid #99d6ff;\n  height: 50px;\n  width: 90%;\n  margin: 15px auto;\n  padding: 10px;\n  resize: none;\n  font-size: 20px;\n}\n\ntextarea::placeholder {\n  font-size: 20px;\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//JavaScript\n\nconst enlargeTextarea = () => {\n  event.stopPropagation();\n  elTextarea.style.height = \"150px\";\n  elToolBar.style.display = \"block\";\n}\n\nelTextarea.addEventListener('click', enlargeTextarea);\n\ndocument.addEventListener('click', () => {\n  elTextarea.style.height = \"50px\";\n  elToolBar.style.display = \"none\";\n});</code></pre></div>\n<p>I added a <code class=\"language-text\">click</code> event to <code class=\"language-text\">document</code> to change the size if any areas rather than the textarea was clicked. And this was a problem <code class=\"language-text\">document</code> includes <code class=\"language-text\">textarea</code> as well. <br>This is where <code class=\"language-text\">event.stopPropagation()</code> comes in. According to MDN, <code class=\"language-text\">event.stopPropagation()</code> prevents further propagation of the current event in the capturing and bubbling phase.<br>\nThis means that when <code class=\"language-text\">textarea</code> is clicked, it stops the current event, which is the event set on <code class=\"language-text\">document</code>, so that the event on <code class=\"language-text\">textarea</code> may take place.</p>","fields":{"slug":"/posts/2019//posts/Miniter-Events/","tagSlugs":["/tag/html/"]},"frontmatter":{"date":"2019-06-06T11:50:32.169Z","description":"How to set events in attempt to make a mini-version of Twitter.","tags":["HTML"],"title":"Miniter[02] Events","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/Miniter-Events/"}},"staticQueryHashes":["251939775","288581551","401334301"]}