{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/React-Remaking-Miniter-Using-React-part-four","result":{"data":{"markdownRemark":{"id":"2a436b27-c44a-5fc3-ba66-3f6d81ccb707","html":"<p>React event handlers are slighlty different from HTML event handlers</p>\n<p>#1. React events are named using camelCase and pass a function as the event handler using JSX</p>\n<p>notice the difference below</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//HTML\n&lt;button onclick=\"activateLasers()\">\n  Activate Lasers\n&lt;/button>\n\n//React\n&lt;button onClick={activateLasers}>\n  Activate Lasers\n&lt;/button></code></pre></div>\n<p>#2. Call event.preventDefault() explicitly to prevent default behavior</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function ActionLink() {\n  function handleClick(e) {\n    e.preventDefault();\n    console.log('The link was clicked.');\n  }\n\n  return (\n    &lt;a href=\"#\" onClick={handleClick}>\n      Click me\n    &lt;/a>\n  );\n}</code></pre></div>\n<p>#3. binding <code class=\"language-text\">this</code>\nsince event handlers are added as a method on a class, binding is required in order to make <code class=\"language-text\">this</code>work in callback functions. Otherwise, when a callback function receives <code class=\"language-text\">this</code>, the <code class=\"language-text\">this</code> will be <code class=\"language-text\">window</code> instead of the class to which the method belongs.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Toggle extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {isToggleOn: true};\n\n    // This binding is necessary to make `this` work in the callback\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn\n    }));\n  }\n\n  render() {\n    return (\n      &lt;button onClick={this.handleClick}>\n        {this.state.isToggleOn ? 'ON' : 'OFF'}\n      &lt;/button>\n    );\n  }\n}\n\nReactDOM.render(\n  &lt;Toggle />,\n  document.getElementById('root')\n);</code></pre></div>\n<p>if you build a habit of writing the method in an ES6 format, binding is not necessary.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//ES6 example I\nclass LoggingButton extends React.Component {\n  // This syntax ensures `this` is bound within handleClick.\n  // Warning: this is *experimental* syntax.\n  handleClick = () => {\n    console.log('this is:', this);\n  }\n\n  render() {\n    return (\n      &lt;button onClick={this.handleClick}>\n        Click me\n      &lt;/button>\n    );\n  }\n}\n\n//ES6 exmample II\nclass LoggingButton extends React.Component {\n  handleClick() {\n    console.log('this is:', this);\n  }\n\n  render() {\n    // This syntax ensures `this` is bound within handleClick\n    return (\n      &lt;button onClick={(e) => this.handleClick(e)}>\n        Click me\n      &lt;/button>\n    );\n  }\n}</code></pre></div>\n<p>However, the problem with the above syntax is that a different callback is created each time <code class=\"language-text\">LoggingButton</code> renders. If this callback is passed as a prop to lower components, it might do an extra re-rendering, which would decrease the efficiency of your code. So binding is recommended.</p>\n<p>#4. Passing arguments to event handlers\nEither way is fine</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;button onClick={(e) => this.deleteRow(id, e)}>Delete Row&lt;/button>\n&lt;button onClick={this.deleteRow.bind(this, id)}>Delete Row&lt;/button></code></pre></div>","fields":{"slug":"/posts/2019//posts/React-Remaking-Miniter-Using-React-part-four","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-06-25T17:56:37.121Z","description":"Remaking Miniter Using React","tags":["React"],"title":"React[04]Remaking Miniter Using React IV - Handling Events","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/React-Remaking-Miniter-Using-React-part-four"}},"staticQueryHashes":["251939775","288581551","401334301"]}