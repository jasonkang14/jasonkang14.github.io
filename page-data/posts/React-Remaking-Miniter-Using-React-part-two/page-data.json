{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/React-Remaking-Miniter-Using-React-part-two","result":{"data":{"markdownRemark":{"id":"18b375ff-f2ee-57b4-9226-9b03a88ac9bc","html":"<p>React app consists of multiple <code class=\"language-text\">components</code> and they transfer imformation in the format of <code class=\"language-text\">props</code> (<code class=\"language-text\">props</code> stands for properties). To be exact, a parent component transfers its infomration to its children as <code class=\"language-text\">props</code></p>\n<p>#1. Function and Class\nyou can write a function to define a component</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function Welcome(props) {\n  return &lt;h1>Hello, {props.name}&lt;/h1>;\n}</code></pre></div>\n<p>you can also use an ES6 class to define a component</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Welcome extends React.Component {\n  render() {\n    return &lt;h1>Hello, {this.props.name}&lt;/h1>;\n  }\n}</code></pre></div>\n<p>From my own understanding, it is better to use an ES6 class when you define a component, because it allows you to use <code class=\"language-text\">constructor()</code> method to set <code class=\"language-text\">state</code>, which is a topic to discuss later</p>\n<p>#2. Composing Components\nComponents can refer to other components in their input, which allows us to re-use the same component for different purposes. For example, a single button component can be used for log-in, sign-up, and main-tweet pages.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function Welcome(props) {\n  return &lt;h1>Hello, {props.name}&lt;/h1>;\n}\n\nfunction App() {\n  return (\n    &lt;div>\n      &lt;Welcome name=\"Sara\" />\n      &lt;Welcome name=\"Cahal\" />\n      &lt;Welcome name=\"Edite\" />\n    &lt;/div>\n  );\n}\n\nReactDOM.render(\n  &lt;App />,\n  document.getElementById('root')\n);</code></pre></div>\n<p>In the code above, you can see that the <code class=\"language-text\">App</code> component refers to <code class=\"language-text\">Welcome</code> component.<br>\nYou can maximize the use of children components to simplify a parent component.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// parnet component\nfunction Comment(props) {\n  return (\n    &lt;div className=\"Comment\">\n      &lt;div className=\"UserInfo\">\n        &lt;img className=\"Avatar\"\n          src={props.author.avatarUrl}\n          alt={props.author.name}\n        />\n        &lt;div className=\"UserInfo-name\">\n          {props.author.name}\n        &lt;/div>\n      &lt;/div>\n      &lt;div className=\"Comment-text\">\n        {props.text}\n      &lt;/div>\n      &lt;div className=\"Comment-date\">\n        {formatDate(props.date)}\n      &lt;/div>\n    &lt;/div>\n  );\n}</code></pre></div>\n<p>The above parent component is really long. But you can simplify it by using children component.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// child component called Avatar\nfunction Avatar(props) {\n  return (\n    &lt;img className=\"Avatar\"\n      src={props.user.avatarUrl}\n      alt={props.user.name}\n    />\n\n  );\n}\n\n// parent component re-written\nfunction Comment(props) {\n  return (\n    &lt;div className=\"Comment\">\n      &lt;div className=\"UserInfo\">\n        &lt;Avatar user={props.author} />\n        &lt;div className=\"UserInfo-name\">\n          {props.author.name}\n        &lt;/div>\n      &lt;/div>\n      &lt;div className=\"Comment-text\">\n        {props.text}\n      &lt;/div>\n      &lt;div className=\"Comment-date\">\n        {formatDate(props.date)}\n      &lt;/div>\n    &lt;/div>\n  );\n}</code></pre></div>","fields":{"slug":"/posts/2019//posts/React-Remaking-Miniter-Using-React-part-two","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-06-23T14:56:37.121Z","description":"Remaking Miniter Using React","tags":["React"],"title":"React[02] Remaking Miniter Using React II - Components and Props","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/React-Remaking-Miniter-Using-React-part-two"}},"staticQueryHashes":["251939775","288581551","401334301"]}