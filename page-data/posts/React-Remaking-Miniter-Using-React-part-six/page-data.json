{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/React-Remaking-Miniter-Using-React-part-six","result":{"data":{"markdownRemark":{"id":"aaf1e623-c3db-56aa-a181-052a1f7f7d9b","html":"<p>I used three HTML form elemements for this proejct.</p>\n<p>#1. Textarea\nA textarea component looks like this;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from 'react';\n\nconst Textarea = props => {\n    return (\n        &lt;textarea\n            value={props.value}\n            className={props.className}\n            placeholder={props.placeholder}\n            onChange={props.handleInput}\n        />\n    );\n}\n\nexport default Textarea;</code></pre></div>\n<p><code class=\"language-text\">value</code> is to handle inputs to the text area <br>\n<code class=\"language-text\">className</code> is to apply CSS<br>\n<code class=\"language-text\">placeholder</code> is for placeholder<br>\n<code class=\"language-text\">onChange</code> is to use <code class=\"language-text\">setState()</code> method to change the state of <code class=\"language-text\">value</code><br>\nSince Textarea does not need a constructor, I used a function format in order to define the component. Passing props allows me to omit <code class=\"language-text\">this</code>, which normally comes in front of <code class=\"language-text\">props</code>, making the code slightly more efficient.</p>\n<p>The parent component of the textarea code is below;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">handleInputChange = (event) => {\n        this.setState ({\n            value: event.target.value\n        })\n    }\n\n...\n\n&lt;Textarea\n    className=\"newMessage\"\n    placeholder=\"What's happening?\"\n    value={this.state.value}\n    handleInput={this.handleInputChange}\n/></code></pre></div>\n<p>When an input is made into the textarea, it runs <code class=\"language-text\">handleInputchange()</code> and changes the state of <code class=\"language-text\">value</code>, which will be used as contents for a tweet.</p>\n<p>#2. Input\nThis is used for id and password section.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from 'react';\n\nconst Input = props => {\n    return (\n        &lt;input\n            className={props.className}\n            type={props.type}\n            name={props.name}\n            placeholder={props.placeholder}\n            autoComplete={props.autoComplete}\n            onChange={props.changeInput}\n        />\n    );\n}\n\nexport default Input;</code></pre></div>\n<p>the only thing that is different is <code class=\"language-text\">type</code> since an <code class=\"language-text\">input</code>element can be of different types. <br>\nalso added <code class=\"language-text\">autoComplete</code> upon the advice of Chrome brower.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;form>\n    &lt;Input\n    type=\"text\"\n    placeholder=\"Enter ID\"\n    className=\"enterId\"\n    name=\"userId\"\n    autoComplete=\"username\"\n    changeInput={this.handleChange}\n    />\n\n    &lt;Input\n    type=\"password\"\n    name=\"password\"\n    placeholder=\"Password\"\n    className=\"enterPassword\"\n    autocomplete=\"current-password\"\n    changeInput={this.handleChange}\n    />\n&lt;/form></code></pre></div>\n<p>very similar to <code class=\"language-text\">textarea</code>, it takes an <code class=\"language-text\">onChange</code> attribute to run <code class=\"language-text\">handleChange()</code> so that input value to the <code class=\"language-text\">input</code> elements can be used to change the <code class=\"language-text\">state</code> of value</p>\n<p>#3. Button</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from 'react';\n\nconst Button = props => {\n    return (\n        &lt;button\n            className={props.className}\n            name={props.name}\n            onClick={props.btnClicked}\n        >\n            {props.innerHTML}\n        &lt;/button>\n    );\n}\n\nexport default Button;</code></pre></div>\n<p><code class=\"language-text\">button</code> elements have an <code class=\"language-text\">onClick</code> event to take care of it.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;Button\n    className=\"make-btn\"\n    name={`${this.state.mode === \"generate\" ? \"makeTweetBtn\" : \"updateTweetBtn\"}`}\n    innerHTML={`${this.state.mode === \"generate\" ? \"Tweet\" : \"Update\"}`}\n    btnClicked={this.state.mode === \"generate\" ? this.generateNewTweet : this.updateTweet}\n/></code></pre></div>\n<p>Each tweet also has an <code class=\"language-text\">edit</code> button. Therefore, when the <code class=\"language-text\">edit</code> button is clicked, it changes the generate button into an edit button, which is why the conditional operator was used.</p>","fields":{"slug":"/posts/2019//posts/React-Remaking-Miniter-Using-React-part-six","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-06-27T19:56:37.121Z","description":"Remaking Miniter Using React","tags":["React"],"title":"React[06]Remaking Miniter Using React VI - Forms","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/React-Remaking-Miniter-Using-React-part-six"}},"staticQueryHashes":["251939775","288581551","401334301"]}