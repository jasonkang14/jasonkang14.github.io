{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/typescript/conditional-types","result":{"data":{"markdownRemark":{"id":"45b9f967-3bfb-5a7a-b59a-58d596ee1b8e","html":"<p><strong>This is a summary of the <a href=\"https://typesriptlang.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official document</a></strong></p>\n<p>Conditional types are very self-explanatory. Depending on its condition, the type can be either one or the other.</p>\n<p><code class=\"language-text\">T extends U ? X: Y</code></p>\n<p>A conditional type T is either X, or, Y, or deferred depending on one or more type variables. The type of T depends on whether the type system has enough information to conclude that T is always assignable to U.</p>\n<p>Look at the example below;</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">f</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">boolean</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token boolean\">true</span></span> <span class=\"token operator\">?</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If I were to examine the code above, type T could be either <code class=\"language-text\">string</code>, <code class=\"language-text\">number</code>, or deferred. And it depends on whether the type system has enough information to conclude that T is always assignable to <code class=\"language-text\">true</code> in this case.</p>\n<p>if <code class=\"language-text\">Math.random()</code> is a number less than 0.5, the type T is <code class=\"language-text\">number</code>.</p>","fields":{"slug":"/posts/2020//posts/typescript/conditional-types","tagSlugs":["/tag/typescript/"]},"frontmatter":{"date":"2020-01-04T13:27:37.121Z","description":"TypeScript, conditional types explained","tags":["TypeScript"],"title":"TypeScript - Conditional Types","socialImage":null}}},"pageContext":{"slug":"/posts/2020//posts/typescript/conditional-types"}},"staticQueryHashes":["251939775","288581551","401334301"]}