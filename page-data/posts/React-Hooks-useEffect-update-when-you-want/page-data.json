{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/React-Hooks-useEffect-update-when-you-want","result":{"data":{"markdownRemark":{"id":"6e83ad57-c933-5ffc-ba6d-c2f9cb84a958","html":"<p>I wanted to use <code class=\"language-text\">useEffect()</code> to work like <code class=\"language-text\">componentDidUpda()</code>. Whenever I click a certain button, I wanted the states updated so that React may render components. Last time I talked about how to add <code class=\"language-text\">[]</code> as a second argument to <code class=\"language-text\">useEffect()</code> in order to prevent infinte loops. This time, it is about how to call it when you want.</p>\n<p>Check out the code below;</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>joinPartyBtnClick<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> getToken <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wtw-token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">ADDRESS</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">party/join</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string-property property\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n        Accept<span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n        Authorization<span class=\"token operator\">:</span> getToken<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> idJoinParty<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setParticipationStatus</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>participationStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">setJoinPartyBtnClick</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>joinPartyBtnClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>joinPartyBtnClick<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is very straight-forward. If <code class=\"language-text\">joinPartyBtnClick === true</code>, you run the <code class=\"language-text\">fetch</code> as written. I can set that the <code class=\"language-text\">useEffect()</code> runs whenever the state of <code class=\"language-text\">joinPartyBtnClick</code> changes by adding it as the second argument like above.</p>","fields":{"slug":"/posts/2019//posts/React-Hooks-useEffect-update-when-you-want","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2019-07-09T22:27:37.121Z","description":"How to use `useEffect()` instead of `componentDidUpdate()`","tags":["React"],"title":"React Hooks [useEffect()] how to update when you want","socialImage":null}}},"pageContext":{"slug":"/posts/2019//posts/React-Hooks-useEffect-update-when-you-want"}},"staticQueryHashes":["251939775","288581551","401334301"]}