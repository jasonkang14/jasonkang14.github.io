{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/nextjs/head-from-next-head-and-next-document","result":{"data":{"markdownRemark":{"id":"377e1a45-3b4c-55ab-b28b-5fb28819c81f","html":"<p>Next.js로 사이드 프로젝트를 시작하면서 <a href=\"https://nextjs.org/docs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">공식문서에서 시키는대로</a> <code class=\"language-text\">create-next-app</code>을 사용해서 프로젝트를 init했다. 13으로 버전업 되면서 차이가 생긴건지 다양한 옵션들이 생겼다.</p>\n<p><img src=\"https://i.imgur.com/5lTV6ET.png\" alt=\"create-next-app-init\"></p>\n<p>eslint를 사용할지 말지, <code class=\"language-text\">src</code> directory를 추가할지 말지, <code class=\"language-text\">app</code> 디렉토리를 추가할지 말지 고를 수 있다. experimental이라길래 <code class=\"language-text\">app</code>은 제끼고, 나머지를 받아들여보았다.</p>\n<p>자동으로 생성된 디렉토리를 확인하면서 파일을 보는데 <code class=\"language-text\">index.tsx</code>와 <code class=\"language-text\">_document.tsx</code> 모두 <code class=\"language-text\">Head</code>라는 컴포넌트가 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// index.tsx</span>\n\n<span class=\"token keyword\">import</span> Head <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/head\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Home</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Head<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Create Next App<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"description\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"Generated by create next app\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"width=device-width, initial-scale=1\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"icon\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"/favicon.ico\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Head<span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// _document.tsx</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Html<span class=\"token punctuation\">,</span> Head<span class=\"token punctuation\">,</span> Main<span class=\"token punctuation\">,</span> NextScript <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"next/document\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Document</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Html lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Head <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Html<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>왜 굳이 import 경로가 다른 <code class=\"language-text\">Head</code>가 두개나 필요할까?</p>\n<p>최근에 추천사를 작성하게 되면서 <a href=\"https://m.hanbit.co.kr/media/books/book_view.html?p_code=B1068448075\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">실전에서 바로쓰는 Next.js</a>라는 책을 받았는데. 이 책에는</p>\n<ol>\n<li><code class=\"language-text\">next/head</code>에 있는 <code class=\"language-text\">Head</code>는 오픈그래프 속성, 메타데이터를 정의할 때 사용하고,</li>\n<li><code class=\"language-text\">next/document</code>에 있는 <code class=\"language-text\">Head</code>는 웹사이트의 모든 페이지에 공통으로 사용되는 코드가 있을 때 사용할 수 있고, 메타데이터를 정의하는 태그와 다르다고 설명되어있다.</li>\n</ol>\n<p>1번은 알겠는데 2번은 잘 모르겠으니, 소스코드를 열어보려고 한다.</p>\n<p><code class=\"language-text\">next/head</code>의 <code class=\"language-text\">Head</code>는 <a href=\"https://github.com/vercel/next.js/blob/canary/packages/next/src/shared/lib/head.tsx#L182\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/shared/lib/head.tsx</a>에서 온다. 주석에는 <code class=\"language-text\">&lt;head></code>에 element를 inject하기 위해 사용된다고 설명되어있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// next/head</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Head</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> children<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ampState <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>AmpStateContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> headManager <span class=\"token operator\">=</span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>HeadManagerContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Effect\n      reduceComponentsToState<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>reduceComponents<span class=\"token punctuation\">}</span>\n      headManager<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>headManager<span class=\"token punctuation\">}</span>\n      inAmpMode<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">isInAmpMode</span><span class=\"token punctuation\">(</span>ampState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Effect<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">ReactNode</code>들을 <code class=\"language-text\">children</code>으로 받아오고 <code class=\"language-text\">Effect</code>라는 태그로 감싸준다. <code class=\"language-text\">Effect</code> 컴포넌트는 <code class=\"language-text\">useLayoutEffect</code> hook을 사용해서 <code class=\"language-text\">headManager</code>의 <code class=\"language-text\">updateHead</code>라는 method를 실행시킨다. 이를 통해<code class=\"language-text\">index.tsx</code>에 있던 아래 태그들을 브라우저가 화면을 업데이트 시킬 때마다 <code class=\"language-text\">defaultHead</code>로 선언된 아래 두개의 <code class=\"language-text\">meta</code> tag와</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">defaultHead</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inAmpMode <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> head <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charSet</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>inAmpMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    head<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">next/head</code>에서 import한 <code class=\"language-text\">Head</code>의 children tag들을 <code class=\"language-text\">&lt;head></code>안에 children으로 넣어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Generated by create next app<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/favicon.ico<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><code class=\"language-text\">next/document</code>의 <code class=\"language-text\">Head</code>는 <a href=\"https://github.com/vercel/next.js/blob/canary/packages/next/src/pages/_document.tsx#L419\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">src/pages/_document.tsx</a>에서 온다. 주석을 보니 <code class=\"language-text\">next/head</code>와 가장 큰 차이는 <code class=\"language-text\">next/document</code>는 서버컴포넌트라는 것이다. 따라서 <code class=\"language-text\">next/head</code>처럼 <code class=\"language-text\">useLayoutEffect</code>등의 방식으로 헤더를 업데이트 할 수 없다. 따라서 <code class=\"language-text\">클라이언트 사이드와 관계없는 tag들만</code> 넣어주어야 한다.</p>\n<p>따라서 화면에 해당하는 값을 보여줘야하는 <code class=\"language-text\">&lt;title></code>과 같은 값을 <code class=\"language-text\">next/document</code>의 <code class=\"language-text\">Head</code>에 넣어주면 경고가 발생한다.</p>\n<p><img src=\"https://i.imgur.com/JCDaad0.png\" alt=\"no-title-in-document\"></p>\n<p>스크린샷에 있는 사이트에서 확인하면 아래 에러메세지를 확인할 수 있다.</p>\n<blockquote>\n<p>Adding <code class=\"language-text\">&lt;title></code> in <code class=\"language-text\">pages/_document.js</code> will lead to unexpected results with <code class=\"language-text\">next/head</code> since <code class=\"language-text\">_document.js</code> is only rendered on the initial pre-render.</p>\n</blockquote>\n<p>같인 이유로 <code class=\"language-text\">&lt;title></code>외에 화면의 크기와 관련있는 <code class=\"language-text\">viewport</code> option을 넣어도 경고메세지가 발생한다.</p>\n<p><code class=\"language-text\">next/document</code>의 <code class=\"language-text\">Head</code>의 소스코드는, <code class=\"language-text\">create-next-app</code>으로 프로젝트를 처음 생성할 때 <code class=\"language-text\">index.tsx</code>에 적용할 style속성과 script태그들을 가지고있다. <code class=\"language-text\">&lt;title></code> 관련 경고메세지에서 본 것처럼 해당 <code class=\"language-text\">Head</code>는 최초 pre-render에 적용되기 때문에, SEO에 사용될만한 <code class=\"language-text\">&lt;meta></code> tag들을 열심히 심어두면 되겠다.</p>\n<p>또 하나의 차이는 <code class=\"language-text\">next/document</code>의 <code class=\"language-text\">Head</code>를 <code class=\"language-text\">_document.tsx</code>외 다른 파일에 넣으면 에러가 발생한다. 이것도 주의해야한다.</p>\n<p>앞으로 계속 세팅을 하면서 궁금한 부분이나, 새롭거나 신기한 것을 발견하면 지속적으로 포스팅 해보도록 하겠다.</p>","fields":{"slug":"/posts/2023//nextjs/head-from-next-head-and-next-document","tagSlugs":["/tag/nextjs/"]},"frontmatter":{"date":"2023-02-18T20:35:37.121Z","description":"next/document의 Head와 next/head의 Head는 어떻게 다른가","tags":["Nextjs"],"title":"Next.js의 Head 컴포넌트에 대해","socialImage":null}}},"pageContext":{"slug":"/posts/2023//nextjs/head-from-next-head-and-next-document"}},"staticQueryHashes":["251939775","288581551","401334301"]}