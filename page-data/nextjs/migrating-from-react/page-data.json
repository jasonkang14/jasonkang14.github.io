{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/nextjs/migrating-from-react","result":{"data":{"markdownRemark":{"id":"db27b3e4-b4d7-5fe6-88db-c908a3c000b9","html":"<p>회사에서 새로운 프로젝트를 하는데, 기획에 대시보드가 생겼다.\n대시보드는 특성상 그래프가 많이 들어가서 서버에서 불러온 데이터를 화면에서 보여주는데 시간이 많이 걸릴 것 같았다.\n<a href=\"https://medium.com/myrealtrip-product/%EC%83%81%ED%99%A9%EC%97%90-%EB%A7%9E%EB%8A%94-%EB%A1%9C%EB%94%A9-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-2018af51c197\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">마이리얼트립 블로그</a>에서 본 Skeleton UI를 적용할 까 고민하다가, 서버사이드 렌더링이 해결책이 될 수 있을 것 같았다.</p>\n<p>Next.js는 사이드 프로젝트 목적으로 공부중이기도 하고, 사실 지금 private repo에 완성된 프로젝트들도 있어서, 생각보다 쉽게 Next.js로 전환할 수 있을 것 같았다.\n지금 React로 이루어진 웹 클라이언트의 구조는 아래와 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"tree\"><pre class=\"language-tree\"><code class=\"language-tree\">.\n├── README.md\n├── package-lock.json\n├── package.json\n├── public\n├── src\n│   ├── App.tsx\n│   ├── hooks\n│   ├── index.tsx\n│   ├── libs\n│   │   └── axios\n│   ├── pages\n│   │   ├── Login\n│   │   │   ├── index.tsx\n│   │   │   └── queries\n│   │   │       └── useLoginQuery.ts\n│   │   └── recoil\n│   │       └── auth\n│   │           ├── atom.ts\n│   │           └── index.ts\n│   ├── react-app-env.d.ts\n│   ├── setupTests.ts\n│   ├── styles\n│   ├── types\n│   └── utils\n└── tsconfig.json</code></pre></div>\n<p>상세한 파일 컴포넌트 명들은 생략했다.\n디렉토리 구조 상 React.js와 Next.js의 차이는, Next.js에는 <code class=\"language-text\">pages</code>라는 디렉토리가 <code class=\"language-text\">src</code>의 밖에 위치하며, <code class=\"language-text\">pages</code> 디렉토리 내의 sub-directory들의 이름으로 routing이 이루어진다는 것이다.</p>\n<p>따라서 지금 React.js 프로젝트에서 <code class=\"language-text\">App.tsx</code> 내에서 <a href=\"https://v5.reactrouter.com/web/guides/quick-start\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">react-router</a>로 import해서 사용하는 <code class=\"language-text\">src/pages</code> 내의 컴포넌트들을 <code class=\"language-text\">pages/login</code>과 같은 디렉토리에서 import해서 사용해주면 필요한 패키지가 모두 설치되어있다는 전제하에 정상적으로 작동해야한다.</p>\n<p>일단 create-next-app을 사용해서 프로젝트를 init한다</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx create-next-app PROJECT_NAME <span class=\"token parameter variable\">--typescript</span></code></pre></div>\n<p>자바스크립트 사용 프로젝트는 항상 타입스크립트를 사용한다. 블로그에서 여러번 언급했지만, University College London과 마이크로소프트가 발표한 <a href=\"https://earlbarr.com/publications/typestudy.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">논문</a>에 따르면, 자바스크립트 기준으로 볼 때 타입스크립트를 사용하면 버그가 15%정도 줄어든다고 한다. 회원가입(CREATE) 기준으로 작성한다. 놓치는 버그들을 잡는데 유리하고, 타입스크립트를 사용하면(any를 남발하지 않는다는 전제하에) 프로젝트 규모가 커졌을 때 용이하다. any를 남발하지 않기위해 <code class=\"language-text\">tsconfig.json</code>에서 항상 <code class=\"language-text\">\"noImplicitAny\": true</code>로 설정하고 프로젝트를 진행한다.</p>\n<p>처음 생성된 Next.js 프로젝트의 디렉토리 구조는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tree\"><pre class=\"language-tree\"><code class=\"language-tree\">.\n├── README.md\n├── next-env.d.ts\n├── next.config.js\n├── package.json\n├── pages\n│   ├── _app.tsx\n│   ├── api\n│   │   └── hello.ts\n│   └── index.tsx\n├── styles\n│   ├── Home.module.css\n│   └── globals.css\n├── tsconfig.json\n└── yarn.lock</code></pre></div>\n<p>이제 React.js 프로젝트의 <code class=\"language-text\">src</code> 디렉토리를 옮긴다. 스타일은 React.js프로젝트에 적용되어있던 것을 사용할 것이기 때문에 <code class=\"language-text\">styles</code> 디렉토리는 삭제한다. 그럼 아래와 같이 구조가 변경된다</p>\n<div class=\"gatsby-highlight\" data-language=\"tree\"><pre class=\"language-tree\"><code class=\"language-tree\">.\n├── README.md\n├── next-env.d.ts\n├── next.config.js\n├── package.json\n├── pages\n│   ├── _app.tsx\n│   ├── api\n│   │   └── hello.ts\n│   └── index.tsx\n├── src\n│   ├── App.tsx\n│   ├── hooks\n│   ├── index.tsx\n│   ├── libs\n│   │   └── axios\n│   ├── pages\n│   │   ├── Login\n│   │   │   ├── index.tsx\n│   │   │   └── queries\n│   │   │       └── useLoginQuery.ts\n│   │   └── recoil\n│   │       └── auth\n│   │           ├── atom.ts\n│   │           └── index.ts\n│   ├── react-app-env.d.ts\n│   ├── setupTests.ts\n│   ├── styles\n│   ├── types\n│   └── utils\n├── tsconfig.json\n└── yarn.lock</code></pre></div>\n<p>next에 필요없는 파일들을 삭제하면 구조는 아래와 같이 바뀐다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tree\"><pre class=\"language-tree\"><code class=\"language-tree\">.\n├── README.md\n├── next-env.d.ts\n├── next.config.js\n├── package.json\n├── pages\n│   └── login\n│       └── index.tsx\n│   ├── _app.tsx\n│   ├── api\n│   │   └── hello.ts\n│   └── index.tsx\n├── src\n│   ├── hooks\n│   ├── index.tsx\n│   ├── libs\n│   │   └── axios\n│   ├── pages\n│   │   ├── Login\n│   │   │   ├── index.tsx\n│   │   │   └── queries\n│   │   │       └── useLoginQuery.ts\n│   │   └── recoil\n│   │       └── auth\n│   │           ├── atom.ts\n│   │           └── index.ts\n│   ├── styles\n│   ├── types\n│   └── utils\n├── tsconfig.json\n└── yarn.lock</code></pre></div>\n<p>이제 <code class=\"language-text\">pages</code> 디렉토리 아래에 <code class=\"language-text\">login</code> 디렉토리를 만들고, 해당 디렉토리 내의 <code class=\"language-text\">index.tsx</code>에서 <code class=\"language-text\">src/pages/Login</code>의 component를 import한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> Login <span class=\"token keyword\">from</span> <span class=\"token string\">\"pages/Login\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">LoginPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Login <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>절대경로를 사용한 것을 볼 수 있는데. 개인적으로 절대경로를 선호한다. 리팩토링 하거나 프로젝트 구조를 변경할 때 절대경로를 사용하면 에러가 덜 나기 때문이다. TypeScript에서 절대경로를 사용하려면 <code class=\"language-text\">tsconfig.json</code>에서 <code class=\"language-text\">baseUrl: \"./src\"</code>로 해주면된다.</p>\n<p>이제 실행해서 확인한다</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> run dev</code></pre></div>\n<p>아래와 같이 잘 보이는 것을 확인할 수 있다.\n<img src=\"https://i.imgur.com/w4Be4er.png\" alt=\"login-with-nextjs\"></p>","fields":{"slug":"/posts/2022//nextjs/migrating-from-react","tagSlugs":["/tag/nextjs/"]},"frontmatter":{"date":"2022-07-28T01:41:37.121Z","description":"React로 이루어진 프로젝트를 Next.js로 이관한다","tags":["Nextjs"],"title":"Reactjs 프로젝트 Nextjs로 이관","socialImage":null}}},"pageContext":{"slug":"/posts/2022//nextjs/migrating-from-react"}},"staticQueryHashes":["251939775","288581551","401334301"]}