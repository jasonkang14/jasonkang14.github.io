{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/nextjs/is-server-side-rendering-really-faster","result":{"data":{"markdownRemark":{"id":"4d0cd329-ffed-5a03-b072-0b28b79efab0","html":"<p>개인 학습 목적도 있지만, 사실 이 포스트는 팀원들과 공유하기 위한 목적이 더 크다. 이정도면 회사에서 기술블로그를 운영하는 것도 나쁘지 않을 것 같은데 왠지 일이 커질 것 같아서 망설이는 중이다.</p>\n<p>개인적으로 새로운 툴이나 라이브러리를 도입할 때마다 <a href=\"https://reactjs.org/docs/profiler.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Profiler</a>로 시간을 비교하는 것을 좋아한다. 설득이 쉽기 때문이다. 단순히 “이렇게 하는게 더 좋대요~” 보다는 “이렇게 하는게 OO ms 더 빠릅니다”가 더 개발자스럽다고 해야하나. 실제로 상당히 많은 포스트들을 작성했다.</p>\n<ol>\n<li><a href=\"https://jasonkang14.github.io/react/functional-programming-with-react-part-three\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">함수평 프로그래밍이 렌더링 효율에 미치는 영향</a></li>\n<li><a href=\"https://jasonkang14.github.io/react/introducing-react-query\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Query와 Context API의 성능 비교</a></li>\n<li><a href=\"https://jasonkang14.github.io/react/introducing-recoil\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Recoil과 Context API의 성능 비교</a></li>\n</ol>\n<p>React로 작성하던 프로젝트를 Next로 이관한 가장 큰 이유인 대시보드를 위해 사용되는 데이터를 서버사이드와 클라이언트 사이드에서 각각 호출하고 Profiler를 사용해서 렌더링 시간을 비교해보려고 한다.</p>\n<p>dashboard 로 routing될 때 <code class=\"language-text\">Layout</code>이라는 컴포넌트가 바뀌기 때문에, 해당 컴포넌트의 렌더링 시간을 Profiler로 측정해본다.</p>\n<p>클라이언트 사이드 먼저 확인한다. 지금은 [react-query]를 사용하고 있다. 리액트 도입할 때 사용하기로 결정한 라이브러리라서 클라이언트 리퀘스트는 react-query를 사용하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useQuery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@tanstack/react-query'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchDashboardData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getDashboardInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useDashboardQuery</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n    <span class=\"token generic-function\"><span class=\"token function\">useQuery</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IDashboardInfo<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Dashboard'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'dashboardData'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchDashboardData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get team info error'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Dashboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useDashboardQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Layout이 render되는데 약 <strong>29.7ms</strong> 소요된다.</p>\n<p><img src=\"https://i.imgur.com/WBkutcw.png\" alt=\"react-query-layout\"></p>\n<p>그리고 layout이 렌더된 이후에 데이터를 추가로 불러와야 하기 때문에, 시간이 추가로 소요된다.</p>\n<p><img src=\"https://i.imgur.com/8sKeSir.png\" alt=\"react-query-data\"></p>\n<p>두 소요 시간을 더하면 약 <strong>67.2ms</strong> 가 소요된다.</p>\n<p>그리고 Next.js 공식문서에서는 클라이언트 사이드에서 서버로 데이터 요청을 할 때 <a href=\"https://nextjs.org/docs/basic-features/data-fetching/client-side#client-side-data-fetching-with-swr\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SWR</a>을 권장한다. 따라서 SWR도 사용해서 시간을 측정해보도록 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> useSWR <span class=\"token keyword\">from</span> <span class=\"token string\">'swr'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetcher</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getDashboardInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n</code></pre></div>\n<p><img src=\"https://i.imgur.com/oI0sidh.png\" alt=\"swr-layout\"></p>\n<p>layout을 렌더할 때 약 <strong>25.8ms</strong> 소요된다. 그리고 dashboard가 다시 한 번 업데이트되는데, 이 부분이 데이터를 불러오는 영역이라고 판단된다.</p>\n<p><img src=\"https://i.imgur.com/jIFkV6O.png\" alt=\"swr-data-fetching\">\n여기서 약 <strong>53.4ms</strong> 소요된다. 따라서 총 <strong>79.2ms</strong> 소요된다.</p>\n<blockquote>\n<blockquote>\n<p>여러번 반복해서 측정해도 디테일한 시간은 달라지지만 <br/></p>\n</blockquote>\n</blockquote>\n<p>react-query가 swr보다 빠른 것을 볼 수 있었다</p>\n<p>공식적으로 추천하는 라이브러리보다 다른게 빠르다니 상당히 충격적이다.</p>\n<p>이제 서버사이드를 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getDashboardInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            dashboardInfo<span class=\"token operator\">:</span> res<span class=\"token punctuation\">.</span>data\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">DashboardPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>dashboardInfo<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Dashboard dashboardInfo<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>dashboardInfo<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>먼저 서버사이드 렌더링의 경우 아래와 같다\n<img src=\"https://i.imgur.com/Za5Zwoz.png\" alt=\"server-side-rendring\"></p>\n<p>레이아웃 컴포넌트 렌더링 시간만 비교해도 <strong>24.1ms</strong>로 클라이언트 사이드 렌더링보다 짧게 소요된다. 사실 이건 로그인 이후에 넘어가는 과정이라 큰 의미는 없다. 실제로 layout의 렌더링시간만 비교했을 때는 클라이언트 사이드 렌더링과 크게 차이가 나지 않는다.</p>\n<blockquote>\n<p>하지만 서버사이드 렌더링의 경우 <br/> 이미 데이터를 가져온 상태로 렌더가 이루어지기 때문에 <br/> react-query나 swr의 경우와 다르게<br/> 데이터를 불러오면서 발생하는 추가 렌더링이 일어나지 않는다.</p>\n</blockquote>\n<p>따라서 길게는 약 <strong>60ms</strong>의 렌더링 시간을 절약할 수 있다. 지금 하나 걸리는 점은 로그인에서 넘어갈 때 약간의 버퍼링이 있다. 24ms도 엄청 긴 시간이기 때문이다. 다음 스프린트에서는 저 시간을 어떻게 줄일지 고민할 예정인데, 결론에 도달하면 공유해보도록 하겠다.</p>","fields":{"slug":"/posts/2022//nextjs/is-server-side-rendering-really-faster","tagSlugs":["/tag/nextjs/"]},"frontmatter":{"date":"2022-08-05T21:41:37.121Z","description":"Server Side Rendering과 Client Side Rendering의 rendering 시간 비교","tags":["Nextjs"],"title":"Server Side Rendering은 정말 빠르게 render 되는가","socialImage":null}}},"pageContext":{"slug":"/posts/2022//nextjs/is-server-side-rendering-really-faster"}},"staticQueryHashes":["251939775","288581551","401334301"]}