{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/nextjs/authenticate-with-next-auth","result":{"data":{"markdownRemark":{"id":"4d0e9a5e-a0a3-538c-85f2-35380ec64389","html":"<p><a href=\"https://jasonkang14.github.io/nextjs/migrating-from-react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React.js를 Next.js로 이관하는 과정에 대해 설명한 포스트</a>에서 로그인의 성공을 포스트 했다. 그런데 여기에 한가지 문제가 있었다. 기존에 서버에서 받아온 토큰을 세션 스토리지에 저장했었는데, 이 토큰을 사용해서 <a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">getServerSideProps</a>에서 데이터를 가져오려니 아래와 같은 에러를 만났다.</p>\n<p><code class=\"language-text\">sessionStorage is not defined</code>\n<img src=\"https://i.imgur.com/vhmHcLl.png\" alt=\"session-storage-is-not-defined\"></p>\n<p>생각해보면 당연한 이야기다. 서버는 브라우저가 아니기때문에 스토리지가 존재하지 않는다. 그래서 자연스럽게 쿠키에 데이터를 저장해야했고, 기존 설정들을 바꿔서 쿠키에 데이터를 저장해보기로 했다.</p>\n<p>일단 axios설정에 <code class=\"language-text\">withCredentials: true</code> 를 추가한다</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> axiosClient <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  baseURL<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXT_PUBLIC_API_ADDRESS</span><span class=\"token punctuation\">,</span>\n  timeout<span class=\"token operator\">:</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">,</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string-property property\">'Content-type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  withCredentials<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 여기가 추가된다. </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MDN</a>에 보면 브라우저에서 쿠키를 사용하려면, 리퀘스트 보낼 때  <code class=\"language-text\">credentials: 'include'</code> 로 해야한다고 나와있는데 axios에서는 위와 같이 설정해야 한다. 그리고 이제 서버에서 보내는 response의 body가 아니라 cookie에 세션을 담아서 전송하는 방식으로 변경한다. 회사의 서버는 fastapi로 되어있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">  response <span class=\"token operator\">=</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  response<span class=\"token punctuation\">.</span>set_cookie<span class=\"token punctuation\">(</span>\n    key<span class=\"token operator\">=</span><span class=\"token string\">\"session\"</span><span class=\"token punctuation\">,</span>\n    value<span class=\"token operator\">=</span>FASTAPI_SESSION<span class=\"token punctuation\">,</span>\n    samesite<span class=\"token operator\">=</span><span class=\"token string\">'None'</span><span class=\"token punctuation\">,</span>\n    secure<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    httponly<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    expires<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token operator\">*</span><span class=\"token number\">60</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>그런데 저렇게 작업을 해도, response header에 보면 <code class=\"language-text\">set-cookie</code>가 있는데, 개발자도구의 application 탭에서는 쿠키를 확인할 수 없다. 심지어 서버 설정에 <code class=\"language-text\">expose_header</code>인가 라는 설정도 있어서 해봤는데 안된다. 지금 생각으로는 서버와 클라이언트의 도메인이 다르기 때문인걸로 보인다. 그래서 로컬호스트에 도메인을 붙이는 작업을 해볼까 하다가 찾아보니 <a href=\"https://nextjs.org/docs/authentication#authentication-providers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Next.js 공식문서</a>에서 <a href=\"https://next-auth.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NextAuth.js</a>라는 라이브러리를 추천하는 것을 보고 사용해보기로 했다.</p>\n<p>다수의 예제들이 소셜로그인을 위한 것인데(신기하게도 네이버와 카카오 예제도 있다) 지금은 회사에서 자체적으로 올린 인증서버를 사용해야 해서 <a href=\"https://next-auth.js.org/providers/credentials\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">credentials</a> provider를 사용해서 작업해보기로 했다.</p>\n<p>일단 시키는대로 <code class=\"language-text\">pages/api</code> 디렉토리에 <code class=\"language-text\">auth</code>라는 디렉토리를 만들고 그 안에 <code class=\"language-text\">[...nextauth].ts</code>라는 파일을 생성한다. 그리고 아래와 같이 작성한다</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> NextAuth<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> NextAuthOptions <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> CredentialsProvider <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth/providers/credentials'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> authOptions<span class=\"token operator\">:</span> NextAuthOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">CredentialsProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'Credentials'</span><span class=\"token punctuation\">,</span>\n      credentials<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        username<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          label<span class=\"token operator\">:</span> <span class=\"token string\">'Email'</span><span class=\"token punctuation\">,</span>\n          type<span class=\"token operator\">:</span> <span class=\"token string\">'email'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        password<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'Password'</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'password'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token keyword\">async</span> <span class=\"token function\">authorize</span><span class=\"token punctuation\">(</span>credentials<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NEXTAUTH_URL</span> <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> credentials<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  session<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    strategy<span class=\"token operator\">:</span> <span class=\"token string\">'jwt'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  callbacks<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">jwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> user <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      token<span class=\"token punctuation\">.</span>sessionToken <span class=\"token operator\">=</span> user<span class=\"token operator\">?.</span>token<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> token<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> session<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> token <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> session<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">NextAuth</span><span class=\"token punctuation\">(</span>authOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<p>next auth는 자체적으로 아이디, 비밀번호를 입력하는 <code class=\"language-text\">&lt;form></code>을 제공하는데, <code class=\"language-text\">credentials</code>에 작성한 값들이 사용된다. 환경변수로 <code class=\"language-text\">NEXTAUTH_URL</code>을 꼭 설정해줘야지 next-auth를 사용한 authentication이 가능하다. 안그러면 계속 자체적으로 만들어진 서버주소 <code class=\"language-text\">localhost:3000/api/auth/signin</code>으로 요청을 보내서 에러가 발생한다.</p>\n<p>설정해둔 인증서버 주소로 요청을 보내면, 서버는 response body에 토큰을 담아서 return한다. authorize가 res.data를 return하면 저 정보는 <code class=\"language-text\">jwt</code> callback의 user에 담긴다… next-auth의 의도는 서버에서 유저 정보를 리턴하는 것을 의도한 것 같다.</p>\n<p>user.token에 접근하여 자체 인증서버가 발급한 토큰을 token이라는 객체에 sessionToken이라는 key에 담아서 리턴하면 <code class=\"language-text\">session</code> callback의 session에 담기고, 이 session의 session.sessionToken이 쿠키로 들어가게 된다. <code class=\"language-text\">sessionToken</code>에 토큰을 담아야하는 이유는 소스코드를 열어보니 <code class=\"language-text\">session.sessionToken</code>이 <code class=\"language-text\">__Secure-next-auth.session-token</code>이라는 key로 쿠키에 저장되고, 이 쿠키를 next auth에서 제공하는 <a href=\"https://next-auth.js.org/tutorials/securing-pages-and-api-routes#using-gettoken\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">getToken()</a>이라는 함수를 사용해서 가져올 수 있기 때문이다.</p>\n<p>여기서 추가로 설정을 하나 더 해줘야 하는데, 위에서 언급한 것처럼 서버에서 보내준 정보가 <code class=\"language-text\">jwt</code> callback의 user에 담기기 때문인지는 모르겠으나, next-auth는 자체적으로 jwt토큰을 생성한다. 그래서 나는 저 라이브러리를 fork해서 서버에서 제공하는 토큰을 바로 쿠키에 넣도록 수정했다.</p>\n<p>그리고 로그인 버튼을 클릭하면 <code class=\"language-text\">authorize</code>라는 함수가 실행돼서, 함수 로직을 타게 된다. 하지만 이미 만들어둔 로그인 페이지가 있기 때문에, 그 페이지를 사용하고 싶었다. 다행히 next-auth에서는 그 기능을 제공한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signIn <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth/react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Login</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLogin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> loginRes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">signIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'credentials'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      username<span class=\"token punctuation\">,</span>\n      password<span class=\"token punctuation\">,</span>\n      redirect<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>저기 <code class=\"language-text\">signIn</code> 이라는 함수를 호출하면 <code class=\"language-text\">[...nextauth].ts</code>에 있는 <code class=\"language-text\">authorize</code>를 호출하는 구조이다. 여기서 <code class=\"language-text\">redirect: false</code>로 해둔 이유는 <code class=\"language-text\">redirect: true</code>인 경우, <code class=\"language-text\">NEXTAUTH_URL</code>이라는 환경변수에 선언한 주소로 redirect되기 때문이다. signIn 함수로 <code class=\"language-text\">callbackUrl</code>이라는 값을 넘길 수도 있는데, <code class=\"language-text\">http://</code>를 포함한 주소를 입력해도 무시하고 <code class=\"language-text\">NEXTAUTH_URL</code>로 이동한다. 따라서 loginRes에서 제공하는 status를 확인해서 아래와 같이 redirect하는 식으로 구현했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> signIn <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next-auth/react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useRouter <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'next/router'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Login</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleLogin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> loginRes <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">signIn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'credentials'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      username<span class=\"token punctuation\">,</span>\n      password<span class=\"token punctuation\">,</span>\n      redirect<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loginRes<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/dashboard'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음 포스트에서는 dashboard페이지에서 서버사이드 렌더링을 어떻게 구현했고, 이 방법이 client side rendering과 비교했을 때 얼마나 효율적인지에 대해 작성할 예정이다.</p>","fields":{"slug":"/posts/2022//nextjs/authenticate-with-next-auth","tagSlugs":["/tag/nextjs/"]},"frontmatter":{"date":"2022-08-01T21:41:37.121Z","description":"next-auth를 활용해서 서버로 인증하는 방법","tags":["Nextjs"],"title":"Next.js에서 서버로 인증하는 방법","socialImage":null}}},"pageContext":{"slug":"/posts/2022//nextjs/authenticate-with-next-auth"}},"staticQueryHashes":["251939775","288581551","401334301"]}