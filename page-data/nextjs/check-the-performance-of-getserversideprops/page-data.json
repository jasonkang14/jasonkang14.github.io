{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/nextjs/check-the-performance-of-getserversideprops","result":{"data":{"markdownRemark":{"id":"8b939daf-054d-5447-a1f6-f73d022c2811","html":"<p>개인 학습 목적도 있지만, 이 포스트는 팀원들에게 <a href=\"https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">getServerSideProps</a>를 많이 사용해야 하는 근거를 제공하기 위해 작성한다.</p>\n<p>서버사이드 렌더링의 장점은 렌더링 속도가 빠르다는 것이다. 이론상으로는 서버 &#x3C;-> 서버 사이에 통신이 이루어지기 때문에 브라우저 &#x3C;-> 서버 간의 통신보다 빠르다. 그리고 JavaScript 코드를 다운로드 하기 전에 HTML을 먼저 보여주기 때문이다. 그리고 그것이 팩트인지<a href=\"https://jasonkang14.github.io/nextjs/is-server-side-rendering-really-faster\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Profiler로 시간을 측정</a>해서 확인했다.</p>\n<p>기존에 리액트로 이루어진 코드(Client Side Rendering)을 Next.js(Server Side Rendering)로 전환했기 때문에, 기존에 모든 코드의 fetch는 클라이언트 사이드에서 일어나고 있었다. 따라서 이것을 모두 <code class=\"language-text\">getServerSideProps</code>로 옮겨달라고 제안하기에는 뭔가 근거가 부족했다. 특히 서비스는 이미 전혀 무리없이 잘 굴러가고 있기 때문에. 그래서 렌더링 효율을 측정해보기로 했다.</p>\n<p>우선 기존 코드의 렌더링 시간이다. Profiler를 <code class=\"language-text\">pages</code> directory의 컴포넌트를 감싸도록 설정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// index.tsx</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Profiler</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onRender</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Component</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Profiler</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>렌더링 시간을 확인해본다.\n<img src=\"https://i.imgur.com/7dbl5rV.png\" alt=\"client-side-fetch\">\n해당 컴포넌트를 렌더링 하는데 <strong>67.5ms</strong> 소요됐다.</p>\n<p>이제 <code class=\"language-text\">getServerSideProps</code>를 사용해서 데이터를 불러오고, react-query를 통해 이 데이터를 Hydrate해주기로 한다. 위에 <code class=\"language-text\">index.tsx</code> 하단에 아래 코드를 추가한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> req <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> req<span class=\"token operator\">:</span> NextApiRequest<span class=\"token punctuation\">;</span> res<span class=\"token operator\">:</span> NextApiResponse <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> queryClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchSummary</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> Axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token constant\">FETCH_API_ADDRESS</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        Authorization<span class=\"token operator\">:</span> token<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">await</span> queryClient<span class=\"token punctuation\">.</span><span class=\"token function\">prefetchQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Page'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'state'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fetchSummary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> token<span class=\"token punctuation\">,</span> dehydratedState<span class=\"token operator\">:</span> <span class=\"token function\">dehydrate</span><span class=\"token punctuation\">(</span>queryClient<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>이제 시간을 측정한다\n<img src=\"https://i.imgur.com/YhvKmb3.png\" alt=\"server-side-fetch\"></p>\n<p>해당 컴포넌트를 렌더링 하는데 <strong>47.1ms</strong>소요됐다.</p>\n<p>단순히 수치로 계산하면 20ms, 비율로 따지면 <strong>33%</strong> 더 효율적이다. 이제 최초 렌더링에 필요한 데이터는 모두 <code class=\"language-text\">getServerSideProps</code>에서 fetch하기로 한다.</p>","fields":{"slug":"/posts/2022//nextjs/check-the-performance-of-getserversideprops","tagSlugs":["/tag/nextjs/"]},"frontmatter":{"date":"2022-09-02T21:41:37.121Z","description":"getServerSideProps에서 fetch는 client side의 fetch 보다 빠르다","tags":["Nextjs"],"title":"getServerSideProps로 Next.js 효율 개선","socialImage":null}}},"pageContext":{"slug":"/posts/2022//nextjs/check-the-performance-of-getserversideprops"}},"staticQueryHashes":["251939775","288581551","401334301"]}