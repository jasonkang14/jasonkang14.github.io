{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/django/django-relationships-explained","result":{"data":{"markdownRemark":{"id":"43f9403e-4730-53da-8367-4232070f8c62","html":"<h3 id=\"many-to-one-relationships\" style=\"position:relative;\"><a href=\"#many-to-one-relationships\" aria-label=\"many to one relationships permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Many-to-One Relationships</h3>\n<p>In order to define a many-to-one relationship, you can use <code class=\"language-text\">django.db.models.ForeignKey</code> like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Manufacturer</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    company <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    manufacturer <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Manufacturer<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    name         <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You just have to add the name of the model as an argument to the field. Make sure that the model you are referencing in your <code class=\"language-text\">ForienKey</code> field is delcared before. If you are creating a relationship on a model that has not yet been defined, you have to use the name of the model instead of the model object itself like below:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    manufacturer <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span><span class=\"token string\">'Manufacturer'</span><span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    name         <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Manufacturer</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    company <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you want to create a recursive relationship, which is an object that has a many-to-one relationship with itself, you can use <code class=\"language-text\">models.ForeignKey('self', on_delete=models.CASCADE)</code>. An example that I have found is when an employee supervies multiple employees. An employee has a many-to-one relatiponship with multiple employees.</p>\n<h3 id=\"many-to-many-relationships\" style=\"position:relative;\"><a href=\"#many-to-many-relationships\" aria-label=\"many to many relationships permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Many-to-Many Relationships</h3>\n<p>In order to define a many-to-one relationship, you can use <code class=\"language-text\">ManyToManyField</code> like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Topping</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Pizza</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    toppings <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ManyToManyField<span class=\"token punctuation\">(</span>Topping<span class=\"token punctuation\">)</span>\n    name     <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Like you would do with <code class=\"language-text\">ForeignKey</code>, you can create recursive relationships and relationships to models not yet defined.</p>\n<p>Sometimes, you might want to use an extra table in order to describe the relationship between two models by using the <code class=\"language-text\">through</code> argument like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Group</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name    <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\n    members <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ManyToManyField<span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">,</span> through<span class=\"token operator\">=</span><span class=\"token string\">'Membership'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Membership</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    person        <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    group         <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ForeignKey<span class=\"token punctuation\">(</span>Group<span class=\"token punctuation\">,</span> on_delete<span class=\"token operator\">=</span>models<span class=\"token punctuation\">.</span>CASCADE<span class=\"token punctuation\">)</span>\n    date_joined   <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    invite_reason <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">Group</code> model has a many-to-many relationship with the <code class=\"language-text\">Person</code> model through a model called <code class=\"language-text\">Membership</code> which has many-to-one relationships with both <code class=\"language-text\">Person</code> and <code class=\"language-text\">Group</code></p>\n<p>You can use <code class=\"language-text\">add()</code>, <code class=\"language-text\">create()</code>, <code class=\"language-text\">set()</code> to create relationships as long as you specify <code class=\"language-text\">through_defulats</code> like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">beatles<span class=\"token punctuation\">.</span>members<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>john<span class=\"token punctuation\">,</span> through_defaults<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'date_joined'</span><span class=\"token punctuation\">:</span> date<span class=\"token punctuation\">(</span><span class=\"token number\">1960</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nbeatles<span class=\"token punctuation\">.</span>members<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"George Harrison\"</span><span class=\"token punctuation\">,</span> through_defaults<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'date_joined'</span><span class=\"token punctuation\">:</span> date<span class=\"token punctuation\">(</span><span class=\"token number\">1960</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nbeatles<span class=\"token punctuation\">.</span>members<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>john<span class=\"token punctuation\">,</span> paul<span class=\"token punctuation\">,</span> ringo<span class=\"token punctuation\">,</span> george<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> through_defaults<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'date_joined'</span><span class=\"token punctuation\">:</span> date<span class=\"token punctuation\">(</span><span class=\"token number\">1960</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you call <code class=\"language-text\">remove()</code>, all intermediate model instances related to the model will be removed. If you call <code class=\"language-text\">clear()</code>, all many-to-many relationships for an instance will be deleted.</p>\n<p>f<code class=\"language-text\">{modelname}_set</code> like <code class=\"language-text\">membership_set</code> can be used in order to mane a query on <code class=\"language-text\">Person</code> model</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">ringos_membership <span class=\"token operator\">=</span> ringo<span class=\"token punctuation\">.</span>membership_set<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>group<span class=\"token operator\">=</span>beatles<span class=\"token punctuation\">)</span>\nringos_membership<span class=\"token punctuation\">.</span>date_joined   <span class=\"token comment\">#  datetime.date(1962, 8, 16)</span></code></pre></div>\n<h3 id=\"one-to-one-relationships\" style=\"position:relative;\"><a href=\"#one-to-one-relationships\" aria-label=\"one to one relationships permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>One-to-One Relationships</h3>\n<p>In order to define a many-to-one relationship, you can use <code class=\"language-text\">OneToOneField</code>. This is very straight-forward. Like you would do with <code class=\"language-text\">ForeignKey</code>, you can create recursive relationships and relationships to models not yet defined. This is somewhat similar to inheritance, which is inheriting a previously declared model like a normal python class.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CommonInfo</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    age <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>PositiveIntegerField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        abstract <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span>CommonInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    home_group <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In this case, the <code class=\"language-text\">Student</code> model has three fields: <strong>name</strong>, <strong>age</strong>, and <strong>home_group</strong>. And the <code class=\"language-text\">CommonInfo</code> class cannot be used as a normal Django model since it is an abstract base class.</p>","fields":{"slug":"/posts/2020//django/django-relationships-explained","tagSlugs":["/tag/django/"]},"frontmatter":{"date":"2020-04-25T12:53:37.121Z","description":"Django models: relationships like Many-to-One, Many-to-Many, and One-to-One explained","tags":["Django"],"title":"Django - Relationships Explained","socialImage":null}}},"pageContext":{"slug":"/posts/2020//django/django-relationships-explained"}},"staticQueryHashes":["251939775","288581551","401334301"]}