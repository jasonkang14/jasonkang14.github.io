{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/django/prefetch-related","result":{"data":{"markdownRemark":{"id":"150919da-7388-5acd-9f76-2cf1f58f661a","html":"<p>According to the <a href=\"https://docs.djangoproject.com/en/3.0/ref/models/querysets/#prefetch-related\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official document</a> <code class=\"language-text\">preftecth_related()</code> returns in a single batch, related objects for each of the specified lookups.</p>\n<p>This is somewhat similar to <code class=\"language-text\">select_related()</code> as both methods save you some time by not hitting the database whenever you access a queried object.</p>\n<p>While <code class=\"language-text\">select_related()</code> is limited to <strong>ForeignKey</strong> or <strong>OneToOneField</strong>, <code class=\"language-text\">prefetch_related()</code> can be used for <strong>ManyToManyField</strong> and even used for reverse lookup for many-to-one relationship which is the opposite of <strong>ForeignKey</strong> which represents one-to-many relationship.</p>\n<p>It was kinda tricky to come up with my own example, so I decided to create models provided in the official document, and ran some test queries. Here are the models that I have created;</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Topping</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Pizza</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name     <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span>\n    toppings <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>ManyToManyField<span class=\"token punctuation\">(</span>Topping<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__str__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"%s (%s)\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>\n            self<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\", \"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>topping<span class=\"token punctuation\">.</span>name <span class=\"token keyword\">for</span> topping <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>toppings<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span></code></pre></div>\n<p>And then I ran queries to call the <code class=\"language-text\">__str__()</code> method on the Pizza class. One using <code class=\"language-text\">prefetch_related()</code> and the other without it .</p>\n<p>When I ran <code class=\"language-text\">Pizza.objects.all()</code>,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">before == 2020-06-07 09:31:07.965861\npizza_info == &lt;QuerySet [&lt;Pizza: hawaiian (pineapple, ham)>, &lt;Pizza: combination (ham, pepperoni, vegetable)>, &lt;Pizza: pepperoni (pepperoni, olive, cheese)>]>\nafter  == 2020-06-07 09:31:07.975982</code></pre></div>\n<p>You can see that the query took 0.01 second as it ran <code class=\"language-text\">self.toppings.all()</code> every single time in order to get the toppings related to each pizza object that was created.</p>\n<p>But when I ran <code class=\"language-text\">Pizza.objects.all().prefetch_related('toppings')</code>,</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">before == 2020-06-07 09:31:15.091070\npizza_info == &lt;QuerySet [&lt;Pizza: hawaiian (pineapple, ham)>, &lt;Pizza: combination (ham, pepperoni, vegetable)>, &lt;Pizza: pepperoni (pepperoni, olive, cheese)>]>\nafter  == 2020-06-07 09:31:15.097154</code></pre></div>\n<p>It took 0.006 second, which is which is about 1.6 times more efficient as the single query has already retrieved all the information about toppings. Therefore, it wonâ€™t have to run <code class=\"language-text\">self.toppings.all()</code> over and over again. As you an see there are only three rows in the Pizza table, so the efficiency may not seem that much different, but if you were to have a huge dataset with more than 10,000 rows in a table, it would come in handy</p>","fields":{"slug":"/posts/2020//django/prefetch-related","tagSlugs":["/tag/django/"]},"frontmatter":{"date":"2020-06-07T10:53:37.121Z","description":"Let's try to improve efficiency when you make a query in Django","tags":["Django"],"title":"Django - Prefetch Related","socialImage":null}}},"pageContext":{"slug":"/posts/2020//django/prefetch-related"}},"staticQueryHashes":["251939775","288581551","401334301"]}