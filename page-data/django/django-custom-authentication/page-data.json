{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/django/django-custom-authentication","result":{"data":{"markdownRemark":{"id":"7b540a50-16f8-531e-b92f-7e00af88805e","html":"<h3 id=\"djangos-official-documentation-about-customizing-authentication-can-be-found-here\" style=\"position:relative;\"><a href=\"#djangos-official-documentation-about-customizing-authentication-can-be-found-here\" aria-label=\"djangos official documentation about customizing authentication can be found here permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Djangoâ€™s official documentation about customizing authentication can be found <a href=\"https://docs.djangoproject.com/en/3.0/topics/auth/customizing/#customizing-authentication-in-django\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></h3>\n<p>In order to create custom authentication, you have to create a model. You can extend the existing <strong>User</strong> model from <code class=\"language-text\">django.contrib.auth.models</code> and create an one-to-one relationship with your model and the default <strong>User</strong> model. However, I cannot assure this because I ahve not done it myself, but I believe this would create an extra table in your database. So I have decided to substitute a custom <strong>User</strong> model by using <strong>AbstractUser</strong> from <code class=\"language-text\">django.contrib.auth.models</code> like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>AbstractUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    nickname      <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    phone         <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token string\">\"010-1234-1234\"</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    date_of_birth <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>DateField<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">birthday</code> could be a better name for the field, but I just decided to go with <code class=\"language-text\">date_of_birth</code>. Unless you create a completely new model for your <code class=\"language-text\">User</code>, the default <strong>User</strong> object has some primary attributes like <strong>username</strong>, <strong>password</strong>, <strong>email</strong>, <strong>first_name</strong>, and <strong>last_name</strong>. The model also has some other attributes like <strong>is_superuser</strong>, <strong>is_staff</strong>, and so on.</p>\n<p>Now you have to authenticate this user via a sign up request. I decided to go with a class view because I wanted to use a <code class=\"language-text\">get</code> request for sign up to check if a user with the same username, nickname, and/or email already exists.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>http         <span class=\"token keyword\">import</span> JsonResponse<span class=\"token punctuation\">,</span> HttpResponse\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>views        <span class=\"token keyword\">import</span> View\n<span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>contrib<span class=\"token punctuation\">.</span>auth <span class=\"token keyword\">import</span> authenticate<span class=\"token punctuation\">,</span> login\n\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>models             <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span>                                 <span class=\"token comment\">## I take Align very seriously</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SignupView</span><span class=\"token punctuation\">(</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">post</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        new_user_info <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n        req_username  <span class=\"token operator\">=</span> new_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">]</span>\n        req_phone     <span class=\"token operator\">=</span> new_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">]</span>\n        req_email     <span class=\"token operator\">=</span> new_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'email'</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token keyword\">if</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>req_username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'USERNAME_ALREADY_EXISTS'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">409</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">elif</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>phone<span class=\"token operator\">=</span>req_phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'PHONE_NUMBER_ALREADY_EXISTS'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">409</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">elif</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>email<span class=\"token operator\">=</span>req_email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> JsonResponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'message'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'EMAIL_ALREADY_EXISTS'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> status<span class=\"token operator\">=</span><span class=\"token number\">409</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            new_user <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>objects<span class=\"token punctuation\">.</span>create_user<span class=\"token punctuation\">(</span>\n                username      <span class=\"token operator\">=</span> req_username<span class=\"token punctuation\">,</span>\n                phone         <span class=\"token operator\">=</span> req_phone<span class=\"token punctuation\">,</span>\n                email         <span class=\"token operator\">=</span> req_email<span class=\"token punctuation\">,</span>\n                first_name    <span class=\"token operator\">=</span> new_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'first_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                last_name     <span class=\"token operator\">=</span> new_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'last_name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                password      <span class=\"token operator\">=</span> new_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                nickname      <span class=\"token operator\">=</span> new_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'nickname'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                date_of_birth <span class=\"token operator\">=</span> new_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'dateOfBirth'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                height        <span class=\"token operator\">=</span> new_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'height'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                body_type     <span class=\"token operator\">=</span> new_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'bodyType'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                occupation    <span class=\"token operator\">=</span> new_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'occupation'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">)</span>\n\n            new_user <span class=\"token operator\">=</span> authenticate<span class=\"token punctuation\">(</span>username<span class=\"token operator\">=</span>req_username<span class=\"token punctuation\">,</span> password<span class=\"token operator\">=</span>new_user_info<span class=\"token punctuation\">[</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">return</span> HttpResponse<span class=\"token punctuation\">(</span>status<span class=\"token operator\">=</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>I used 409 status if a user with same info already exists because <code class=\"language-text\">409 Conflict</code> is used in situations <strong>where it is iexpected that the user might be able to resolve the conflict and resubmit the request</strong>. Since the user can enter a new username, nickname, and/or email to resolve the <strong>conflict</strong> I used 409 as the status code.</p>\n<p>After creating a user by using <code class=\"language-text\">User.objects.create_user</code>, you have to <strong>authenticate</strong> the user via <code class=\"language-text\">new_user = authenticate(username=req_username, password=new_user_info['password'])</code> in order to set the password. I will write about login in a later post</p>","fields":{"slug":"/posts/2020//django/django-custom-authentication","tagSlugs":["/tag/django/"]},"frontmatter":{"date":"2020-05-12T21:53:37.121Z","description":"How to create a custom user model and authentication method in Django","tags":["Django"],"title":"Django - Custom Authentication","socialImage":null}}},"pageContext":{"slug":"/posts/2020//django/django-custom-authentication"}},"staticQueryHashes":["251939775","288581551","401334301"]}