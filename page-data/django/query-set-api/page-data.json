{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/django/query-set-api","result":{"data":{"markdownRemark":{"id":"53d32bf5-341f-56df-bae4-e10ea71c27b7","html":"<h3 id=\"exclude\" style=\"position:relative;\"><a href=\"#exclude\" aria-label=\"exclude permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>exclude()</h3>\n<p>very straight forward. you can exclude multiple properties using a comma like below\n<code class=\"language-text\">Entry.objects.exclude(pub_date__gt=datetime.date(2005, 1, 3), headline='Hello')</code></p>\n<h3 id=\"order_by\" style=\"position:relative;\"><a href=\"#order_by\" aria-label=\"order_by permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>order_by()</h3>\n<p>getting a query set in an ascending or a descending order. <code class=\"language-text\">order_by(id)</code> will give you a query set in an ascending order, and <code class=\"language-text\">order_by(-id)</code> in which you use a negative sign will give you a query set in a descending order.</p>\n<p>You can add multiple parameters using a comma like below as well.</p>\n<p><code class=\"language-text\">order_by(-id, headline)</code></p>\n<p>In the case above, your query set will be organized in a descending order of id, and then in an ascending order of headline afterwards.</p>\n<p>You can also use a double underscore <strong>(__)</strong> if you want to query by joining a table</p>\n<p>There are also expressions like <code class=\"language-text\">asc()</code> and <code class=\"language-text\">desc()</code> of which roles are very straight forward. These two methods are helpful because they allow you to have <code class=\"language-text\">null</code> values at the beginning of your query set or at the end of your query set by using <strong>nulls_first</strong> or <strong>nulls_last</strong> arguments.</p>\n<h3 id=\"reverse-and-distinct\" style=\"position:relative;\"><a href=\"#reverse-and-distinct\" aria-label=\"reverse and distinct permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reverse() and distinct()</h3>\n<p>straight forward. <strong>reverse()</strong> does not take any argument, but <strong>distinct()</strong> does.</p>\n<h3 id=\"values\" style=\"position:relative;\"><a href=\"#values\" aria-label=\"values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>values()</h3>\n<p>probaly the one that is used the most. you can get a queryset of dictionaries. arguments are optional in which the entire row will be retrieved. But you can also add arguments if you want specific columns from the queryset. You can use a comma if you want to get multiple values from the query set.</p>\n<h3 id=\"values_lst\" style=\"position:relative;\"><a href=\"#values_lst\" aria-label=\"values_lst permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>values_lst()</h3>\n<p>you get a query set of tuples instead of dictionaries. if you add the <code class=\"language-text\">flat=True</code> argument, you get a dictionary in which all the tuples are concated. if you add the <code class=\"language-text\">named=True</code> argument, you get named tuples instead.</p>","fields":{"slug":"/posts/2020//django/query-set-api","tagSlugs":["/tag/django/"]},"frontmatter":{"date":"2020-06-02T15:53:37.121Z","description":"Methods you can use to make queries in Django","tags":["Django"],"title":"Django - Query Set API","socialImage":null}}},"pageContext":{"slug":"/posts/2020//django/query-set-api"}},"staticQueryHashes":["251939775","288581551","401334301"]}