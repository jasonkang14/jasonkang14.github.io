{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/django/django-models-explained","result":{"data":{"markdownRemark":{"id":"d9fe9663-2a0c-576d-ab7d-ea7d1ff0e45a","html":"<p>I am trying to go through the <a href=\"https://docs.djangoproject.com/en/3.0/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official documentation</a> of Django and read through every aspect of it in order to build a server using Django. The first section is Models</p>\n<h2 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h2>\n<p>A Django model becomes a table and its rows in your database.</p>\n<h2 id=\"explanation\" style=\"position:relative;\"><a href=\"#explanation\" aria-label=\"explanation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Explanation</h2>\n<ol>\n<li>Each model is a Python class that subclasses <code class=\"language-text\">django.db.models.Model</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    first_name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n    last_name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You have just created a <code class=\"language-text\">Person</code> model with fields name <code class=\"language-text\">first_name</code> and <code class=\"language-text\">last_name</code>. If you use a database, <code class=\"language-text\">Person</code> is your table, and <code class=\"language-text\">first_name</code> and <code class=\"language-text\">last_name</code> are its rows. And an <code class=\"language-text\">id</code> is added automatically as a primary key for your convenience.</p>\n<p>But the name of the table becomes <code class=\"language-text\">myapp_person</code> instead of <code class=\"language-text\">person</code>. If you want to want a table called <code class=\"language-text\">person</code> instead, you can write your model like this by using a <code class=\"language-text\">Meta</code> class.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    first_name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n    last_name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Meta</span><span class=\"token punctuation\">:</span>\n        db_table <span class=\"token operator\">=</span> <span class=\"token string\">'person'</span></code></pre></div>\n<p>After creating a model, you have to make migrations with <code class=\"language-text\">manage.py makemigrations</code> and then <code class=\"language-text\">manage.py migrate</code>. The first command creates migration files which declares what you have done with your <code class=\"language-text\">models.py</code> like creating a table and rows or alternating rows. And the next command applies the changes to your database.</p>\n<ol start=\"2\">\n<li>Fields</li>\n</ol>\n<p>Each field takes a certain set of field-specific arguments. Some fields requires certain arguments while others do not. I feel like it is not really worth memorizing those, so you can find the information <a href=\"https://docs.djangoproject.com/en/3.0/ref/models/fields/#model-field-types\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a></p>\n<p>Certain arguments may come to you as you write more codes. For example, a <code class=\"language-text\">CharField</code> requires an <code class=\"language-text\">max_length</code> argument. If you add <code class=\"language-text\">null=True</code> as an argument to a field, Django will store empty values as <code class=\"language-text\">NULL</code>. If you add <code class=\"language-text\">blank=True</code> as an argument to a field, Django will store an empty value instead of using <code class=\"language-text\">NULL</code>.</p>\n<p>There is also an argument called <code class=\"language-text\">choices</code>, which is a sequence of 2-tuples. Check the example below;</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    SHIRT_SIZES <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">'S'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Small'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">'M'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Medium'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Large'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n    shirt_size <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>SHIRT_SIZES<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you make a query to a <code class=\"language-text\">Person</code> class, <code class=\"language-text\">person.shirt_size</code> would give you S, M, or an L. If you call a function like <code class=\"language-text\">person.get_shirt_size_display()</code>, yow would get Small, Medium, or Large.</p>\n<p>You can also use enumeration classes like below;</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> django<span class=\"token punctuation\">.</span>db <span class=\"token keyword\">import</span> models\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Runner</span><span class=\"token punctuation\">(</span>models<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    MedalType <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>TextChoices<span class=\"token punctuation\">(</span><span class=\"token string\">'MedalType'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'GOLD, SILVER, BRONZE'</span><span class=\"token punctuation\">)</span>\n    name <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>max_length<span class=\"token operator\">=</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n    medal <span class=\"token operator\">=</span> models<span class=\"token punctuation\">.</span>CharField<span class=\"token punctuation\">(</span>blank<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> choices<span class=\"token operator\">=</span>MedalType<span class=\"token punctuation\">.</span>choices<span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>There is an argument called <code class=\"language-text\">verbose_name</code>, which is automatically generated if you do not specify. I think you can use this as for your reference for you to help other developers what you were trying to do with this field.</p>","fields":{"slug":"/posts/2020//django/django-models-explained","tagSlugs":["/tag/django/"]},"frontmatter":{"date":"2020-04-19T22:53:37.121Z","description":"Django models explained","tags":["Django"],"title":"Django - Models Explained","socialImage":null}}},"pageContext":{"slug":"/posts/2020//django/django-models-explained"}},"staticQueryHashes":["251939775","288581551","401334301"]}