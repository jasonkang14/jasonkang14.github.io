{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/hadoop/how-yarn-manages-resources","result":{"data":{"markdownRemark":{"id":"701bf3d3-4325-5a8d-ab75-b72cdeb41c75","html":"<h1 id=\"yarn의-정의\" style=\"position:relative;\"><a href=\"#yarn%EC%9D%98-%EC%A0%95%EC%9D%98\" aria-label=\"yarn의 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>YARN의 정의</h1>\n<p><code class=\"language-text\">YARN</code>은 하둡 클러스터 내에서 어떤 node에서 어떤 job을 처리할지 결정하는 역할을 한다. 개발은 용어가 중요하다. YARN은 Yet Another Resource Negotiator의 줄임말이다. <code class=\"language-text\">Yet</code>은 영단어로 만들려고 억지로 붙인 것 같고, <code class=\"language-text\">Another</code>는 처음에 도입 배경이 <code class=\"language-text\">MapReduce</code>를 관리할 수 있는 또다른 툴이기 때문에 붙인 것 같고, 중요한 것은 <code class=\"language-text\">Resource</code>와 <code class=\"language-text\">Negotiator</code>이다. <code class=\"language-text\">Resource</code>는 하둡 클러스터에서 구동되는 다양한 application들이다. 그럼 뭘 협상하는가? 어떤 노드에서 일을 할 수 있을지를 해당 application과 협상한다.</p>\n<h1 id=\"yarn의-작동-방식\" style=\"position:relative;\"><a href=\"#yarn%EC%9D%98-%EC%9E%91%EB%8F%99-%EB%B0%A9%EC%8B%9D\" aria-label=\"yarn의 작동 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>YARN의 작동 방식</h1>\n<p><code class=\"language-text\">YARN</code>은 다양한 요청을 처리할 수 있는 API를 제공하지만, 그 API는 잘 사용되지 않는다. 사용자들은 일반적으로 각 application들(저자는 distributed computing frameworks라고 표현함)의 <code class=\"language-text\">higher-level API</code>를 사용해서 <code class=\"language-text\">YARN</code>과 소통한다.</p>\n<p><code class=\"language-text\">YARN</code>의 코어는</p>\n<ol>\n<li>a resource manager</li>\n<li>node managers</li>\n</ol>\n<p>로 구성되어 있다.</p>\n<p>단어에서 유추할 수 있듯 <code class=\"language-text\">resource manager</code>는 하나이고, <code class=\"language-text\">node managers</code>는 여러개이다. <code class=\"language-text\">resource manager</code>는 하둡 클러스터 전반에서 resource를 관리하는 manager이다. 반면 <code class=\"language-text\">node managers</code>는 각 application이 구동되는 <code class=\"language-text\">container</code>들을 관리하는데, 이 <code class=\"language-text\">node managers</code>들이 <code class=\"language-text\">resource manager</code>와 소통해서 하둡 클러스터의 작업을 처리한다. container는 node 안에서 돌아간다고 보면 된다.</p>\n<p><img src=\"https://i.imgur.com/6JioSAy.png\" alt=\"how-yarn-runs-an-application\"></p>\n<p>위 그림을 순서대로 설명하자면,</p>\n<ol>\n<li>하둡에서 무언가를 하고싶은 client는 우선 <code class=\"language-text\">resource manager</code>에게 요청을 보낸다.</li>\n<li><code class=\"language-text\">resource manager</code>는 client가 구동하고자 하는 <code class=\"language-text\">application</code>의 <code class=\"language-text\">master</code> process를 구동할 수 있는 container를 찾는다.</li>\n<li><code class=\"language-text\">master</code>는 client가 원하는 것을 바로 처리할수도 있고, 필요 시 <code class=\"language-text\">resource manager</code>에게 욫청해서 container를 추가 가동할 수 있다.</li>\n<li>container를 추가 구동한 경우 분산해서 병렬적으로 해당 작업을 처리한다.</li>\n</ol>\n<h3 id=\"resource-requests\" style=\"position:relative;\"><a href=\"#resource-requests\" aria-label=\"resource requests permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resource Requests</h3>\n<p><code class=\"language-text\">YARN</code>은 resource 요청에 유연하게 대처한다. 요청은 일밙거으로 memory, CPU, locality등을 고려해서 처리된다. HDFS와 마찬가지로 <code class=\"language-text\">YARN</code>도 locality—가장 가까운 node에서 job을 처리—하는 것을 중요하게 생각한다. locality 가 보장되어야 bandwidth 효율을 고려해서 클러스터를 관리할 수 있기 때문이다. 따라서 resource를 요청하는 client는 이 locality를 구체적으로 명시해서 요청할 수 있다. 예를들면 어떤 클러스터의 어떤 랙에서 어떤 노드에 이걸 처리해달라 라는 식으로. locality 조건을 맞출 수 없다면, YARN은 해당 랙에있는 node에서 container구동을 시도한다.</p>\n<h3 id=\"application-lifespan\" style=\"position:relative;\"><a href=\"#application-lifespan\" aria-label=\"application lifespan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Application Lifespan</h3>\n<p>lifespan은 제각각이다. 매우 짧을수도, 매우 길 수도 있다. 3가지 옵션이 있다.</p>\n<ol>\n<li>사용자가 요청하는 하나의 job마다 application을 배정하는 것</li>\n<li>사용자가 요청하는 job에서 각 세션마다 application을 배정하는 것\n<ul>\n<li>container가 다양한 job들 사이에서 재사용 될 수 있기 때문에 첫번째보다 효율적이다.</li>\n<li>job들 사이에 공통적으로 필요한 것들은 필요 시 cache를 사용할 수도 있다.</li>\n</ul>\n</li>\n<li>application을 길게 구동하고 다양한 사용자들이 공유하게 하는 것이다.\n<ul>\n<li>새로 구동하는 시간을 아낄 수 있다는 장점이 있다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"yarn-vs-mapreduce1\" style=\"position:relative;\"><a href=\"#yarn-vs-mapreduce1\" aria-label=\"yarn vs mapreduce1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>YARN vs MapReduce1</h3>\n<p>YARN의 등장 배경이 MapReduce를 조금 더 효율적으로 관리하기 위함이기 때문에, 두가지를 비교해본다. <code class=\"language-text\">MapReduce1</code>에는 <code class=\"language-text\">jobtracker</code>와 <code class=\"language-text\">task trakers</code>가 있다. 각각 <code class=\"language-text\">YARN</code>의 <code class=\"language-text\">resource manager</code>와 <code class=\"language-text\">node managers</code>라고 보면 된다. <code class=\"language-text\">job tracker</code>는 job을 관리하고, <code class=\"language-text\">task trakers</code>는 job 안에 task들을 관리한다. <code class=\"language-text\">task trakers</code>는 각 task의 진행상태를 <code class=\"language-text\">job tracker</code>에게 전달하고, 이를 통해 <code class=\"language-text\">job tracker</code>는 전체 job의 진행상태르르 관리한다. 만약 특정 task가 실패한 경우 <code class=\"language-text\">job traker</code>는 해당 trak를 다른 <code class=\"language-text\">task tracker</code>에 할애한다.</p>\n<p>이처럼 <code class=\"language-text\">MapReduce1</code>에서는 <code class=\"language-text\">job tracker</code>가 scheduling과 task progress monitoring을 모두 담당했다. 반면 <code class=\"language-text\">YARN</code>에서는 <code class=\"language-text\">resource manager</code>와 <code class=\"language-text\">application master</code>가 <code class=\"language-text\">job tracker</code>의 일을 나누어하고, <code class=\"language-text\">node manager</code>가 <code class=\"language-text\">task tracker</code>의 일을 담당한다.</p>\n<p>이에따라 <code class=\"language-text\">YARN</code>은 <code class=\"language-text\">MapReduce1</code>에 비해 비교우위에 있는데, 같은 시간내에 최대로 처리할 수 있는 node와 task의 갯수가 훨씬 많기 때문에 scalable하고, <code class=\"language-text\">MapReduce1</code>에서 <code class=\"language-text\">job tracker</code>하나가 담당하는 기능을 여러 곳으로 나눠두었기 때문에 <code class=\"language-text\">high availability</code>측면에서도 유리하다. 또한 <code class=\"language-text\">task manager</code>는 고정된 사이즈의 <code class=\"language-text\">slot</code>만 담당하는 반면, <code class=\"language-text\">node manager</code>는 다른 node에서 container를 올린다는 등의 방법으로 더 큰 공간을 사용할 수 있다.</p>\n<h1 id=\"scheduling-in-yarn\" style=\"position:relative;\"><a href=\"#scheduling-in-yarn\" aria-label=\"scheduling in yarn permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scheduling in YARN</h1>\n<p><code class=\"language-text\">YARN</code>이 scalable한 것은 맞지만 그래도 resource는 한정되어 있다. 따라서 <code class=\"language-text\">YARN</code>에서 scheduling을 하는데는 3가지 정책이 있다.</p>\n<ol>\n<li>\n<p>FIFO Scheduler</p>\n<ul>\n<li>First-in-First-out queue. 들어온 순서대로 처리한다.</li>\n<li>매우 간단하다</li>\n</ul>\n</li>\n<li>\n<p>Capacity Scheduler</p>\n<ul>\n<li>상대적으로 작은 규모의 job이 신규로 생성되면 바로 시작할 수 있도록 queue를 따로 관리한다</li>\n</ul>\n</li>\n<li>\n<p>Fair Scheduler</p>\n<ul>\n<li>큰 job이 많은 resource를 쓰다가, 작은 job이 들어오면 일부 할당해서 resource를 나눠준다.</li>\n</ul>\n</li>\n</ol>\n<p>그림으로 보면 매우 쉽게 이해할 수 있다.</p>\n<p><img src=\"https://i.imgur.com/UDJKazq.png\" alt=\"how-yarn-schedules-jobs\"></p>\n<p><code class=\"language-text\">Capicity Scheduler</code>는 아래처럼 작성 가능하다. 하둡은 xml을 좋아하는 것 같다</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.scheduler.capacity.root.queues<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>prod,dev<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.scheduler.capacity.root.dev.queues<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>eng,science<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.scheduler.capacity.root.prod.capacity<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>40<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.scheduler.capacity.root.dev.capacity<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>60<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.scheduler.capacity.root.dev.maximum-capacity<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>75<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.scheduler.capacity.root.dev.eng.capacity<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>50<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.scheduler.capacity.root.dev.science.capacity<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>50<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>capacity이기 때문에 각 job의 capacity를 수치로 나타낸다. <code class=\"language-text\">prod.capacity</code>, <code class=\"language-text\">dev.capacity</code>등의 설정해서 운영, 개발 모드의 capacity를 확인할 수 있고, <code class=\"language-text\">max</code>와 각 queue의 capacity도 따로 설정할 수 있다.</p>\n<p><code class=\"language-text\">Fair Scheduler</code>는 똑같이 xml을 사용하지만 조금 다르다.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>allocations</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>defaultQueueSchedulingPolicy</span><span class=\"token punctuation\">></span></span>fair<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>defaultQueueSchedulingPolicy</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>queue</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prod<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>weight</span><span class=\"token punctuation\">></span></span>40<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>weight</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>schedulingPolicy</span><span class=\"token punctuation\">></span></span>fifo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>schedulingPolicy</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>queue</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>queue</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dev<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>weight</span><span class=\"token punctuation\">></span></span>60<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>weight</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>queue</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>eng<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>queue</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>science<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>queue</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>queuePlacementPolicy</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rule</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>specified<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">create</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rule</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>primaryGroup<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">create</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rule</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>default<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">queue</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dev.eng<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>queuePlacementPolicy</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>allocations</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>nested level은 hierarchy를 나타낸다. 그리고 queue에서 사용되는 <code class=\"language-text\">weight</code>은 fair scheduler가 resource를 job들에게 나눠줄 때 사용된다.\n그리고 각 queue 별로 policy를 다르게 할 수도 있는데, 위 예제에서는 전반적으로는 <code class=\"language-text\">fair</code>이지만 prod queue는 <code class=\"language-text\">fifo</code>인 것을 확인할 수 있다. 예제에는 없지만 <code class=\"language-text\">minimum</code>과 <code class=\"language-text\">maximum</code>도 설정할 수 있다.\n또한 Fair Scheduler는 하나의 queue가 할당된 양보다 많은 resource를 잡고 있을 때, <code class=\"language-text\">preemption</code>이라는 기능을 통해서 해당 queue가 사용하는 container 들을 처리해서 resource를 free시키고 새로운 queue가 그 resource를 활용하도록 할 수 있다.</p>\n<h3 id=\"delay-scheduling\" style=\"position:relative;\"><a href=\"#delay-scheduling\" aria-label=\"delay scheduling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Delay Scheduling</h3>\n<p><code class=\"language-text\">YARN</code>은 locality를 중시한다. 따라서 특정 queue가 마무리 되는 것을 기다리면 locality를 보장할 수 있는 경우, 해당 job을 바로 시작하지 않고, locality 를 보장할 수 있도록 기다린다. HDFS에서 datanode가 namenode로 heartbeat을 보내는 것처럼, YARN의 node managers들은 resource manager에게 진행상태를 알리는 heartbeat를 보내는데, resource manager는 이를 바탕으로 <code class=\"language-text\">delay scheduling</code>을 할지 말지 결정한다. 기다렸다가 바로 시작하는 것이 아니고, 얼마나 기다릴지를 configuration에 작성할 수 있는데, 최대치로 기다려보고 locality가 보장되지 않는다면 가장 가까운 node에서 container를 가동한다.</p>\n<h3 id=\"dominant-resource-fairnessdrf\" style=\"position:relative;\"><a href=\"#dominant-resource-fairnessdrf\" aria-label=\"dominant resource fairnessdrf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dominant Resource Fairness(DRF)</h3>\n<p>client가 cluster에서 뭔가를 구동할 때, memory, CPU, locality등을 고려한다고 했다. 만약 특정 job이 high memory and low CPU를 필요로하고, 또 다른 job은 low memory and high CPU를 필요로 한다면, <code class=\"language-text\">YARN</code>은 high demand—dominant resource—를 고려해서 node를 배정한다. default로는 <code class=\"language-text\">DRF</code>는 꺼져있기 때문에, 별도로 설정하지 않는다면 CPU demand는 무시되고 memory만을 고려해서 resource를 배정한다</p>","fields":{"slug":"/posts/2022//hadoop/how-yarn-manages-resources","tagSlugs":["/tag/hadoop/"]},"frontmatter":{"date":"2022-10-12T22:35:37.121Z","description":"YARN이 hadoop cluster를 관리하기위해 하는 노력(?)들","tags":["Hadoop"],"title":"YARN이 hadoop을 관리하는 방식","socialImage":null}}},"pageContext":{"slug":"/posts/2022//hadoop/how-yarn-manages-resources"}},"staticQueryHashes":["251939775","288581551","401334301"]}