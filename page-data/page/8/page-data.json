{"componentChunkName":"component---src-templates-index-template-index-template-tsx","path":"/page/8","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"categorySlug":"/category/database/","slug":"/posts/2023//database/data-intensive-app-reliable-scalable-maintainable"},"frontmatter":{"description":"데이터 중심으로 어플리케이션을 설치한다는 것은 어떤것일까?","category":"Database","title":"소프트웨어의 신뢰성, 확장성, 유지보수성","date":"2023-03-21T20:35:37.121Z","slug":"/database/data-intensive-app-reliable-scalable-maintainable"}}},{"node":{"fields":{"categorySlug":"/category/react/","slug":"/posts/2023//react/how-react-renders-jsx"},"frontmatter":{"description":"React 소스코드 분석을 통해 알아보는 JSX 렌더링","category":"React","title":"createRoot()에 render()를 호출하면 어떤 일이 일어날까?","date":"2023-03-19T20:35:37.121Z","slug":"/react/how-react-renders-jsx"}}},{"node":{"fields":{"categorySlug":"/category/react/","slug":"/posts/2023//react/what-is-fiber-architecture"},"frontmatter":{"description":"Fiber Reconciler는 React 렌더링을 어떻게 개선했는가","category":"React","title":"React 효율 개선을 위한 Fiber Reconciler","date":"2023-03-12T20:35:37.121Z","slug":"/react/what-is-fiber-architecture"}}},{"node":{"fields":{"categorySlug":"/category/aws/","slug":"/posts/2023//aws/how-to-manage-lambda-code-storage"},"frontmatter":{"description":"불필요한 버전 제거로 code storage 최적화를 통한 비용 절감","category":"AWS","title":"AWS Lambda Code Storage 최적화","date":"2023-02-26T20:35:37.121Z","slug":"/aws/how-to-manage-lambda-code-storage"}}}]}},"pageContext":{"limit":4,"offset":32,"pagination":{"currentPage":8,"prevPagePath":"/page/7","nextPagePath":"/page/9","hasNextPage":true,"hasPrevPage":true}}},"staticQueryHashes":["251939775","288581551","401334301","63107425"]}