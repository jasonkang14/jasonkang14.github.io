{"componentChunkName":"component---src-templates-index-template-index-template-tsx","path":"/page/6","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"fields":{"categorySlug":"/category/flutter/","slug":"/posts/2023//flutter/what-i-wish-i-had-kwnown-as-a-react-dev"},"frontmatter":{"description":"프론트엔드 개발자가 말하는 플러터 개발 전 알았으면 좋았을 것들","category":"Flutter","title":"플러터 실수 모음","date":"2023-04-22T20:35:37.121Z","slug":"/flutter/what-i-wish-i-had-kwnown-as-a-react-dev"}}},{"node":{"fields":{"categorySlug":"/category/database/","slug":"/posts/2023//database/encoding-and-evolution"},"frontmatter":{"description":"과거 코드와 신규 코드가 정상적으로 조화(?)를 이룰 수 있도록 설계해야한다","category":"Database","title":"Encoding and Evolution","date":"2023-04-16T20:35:37.121Z","slug":"/database/encoding-and-evolution"}}},{"node":{"fields":{"categorySlug":"/category/database/","slug":"/posts/2023//database/column-oriented-storage"},"frontmatter":{"description":"Colum-Oriented가 read효율을 극대화하는 방법","category":"Database","title":"Column-Oriented Storage","date":"2023-04-11T20:35:37.121Z","slug":"/database/column-oriented-storage"}}},{"node":{"fields":{"categorySlug":"/category/react/","slug":"/posts/2023//react/lazy-loading-to-improve-web-vitals"},"frontmatter":{"description":"사용자 경험 개선을 위한 프론트엔드 개발자의 노력","category":"React","title":"Lazy Loading을 활용한 Web Vital개선","date":"2023-04-09T20:35:37.121Z","slug":"/react/lazy-loading-to-improve-web-vitals"}}}]}},"pageContext":{"limit":4,"offset":24,"pagination":{"currentPage":6,"prevPagePath":"/page/5","nextPagePath":"/page/7","hasNextPage":true,"hasPrevPage":true}}},"staticQueryHashes":["251939775","288581551","401334301","63107425"]}