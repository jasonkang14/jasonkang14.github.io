{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/azure/kubernetes-workflow-jobs","result":{"data":{"markdownRemark":{"id":"476be2a1-f8c6-5c37-a6cb-4f90bb389953","html":"<p>I have been trying to deploy my project using Azure Kubernetes. When I created a Azure Kubernetes(AKS) cluster, it looked really easy to integrate my Github repository to implement CI/CD.\n<img src=\"https://i.imgur.com/GgQfBOp.png\" alt=\"selecting-github\">\n<img src=\"https://i.imgur.com/k7wu6Rx.png\" alt=\"integrating-github\"></p>\n<p>It seemed successful. I got to see the Dockerfile I had written</p>\n<p><img src=\"https://i.imgur.com/8e0zYmA.png\" alt=\"dockerfile-found\"></p>\n<p>The Github Action was successful.</p>\n<p><img src=\"https://i.imgur.com/Px3HgqJ.png\" alt=\"action-succeeded\"></p>\n<p>and I got to see the Swagger Document of the FastAPI server that I built.</p>\n<p>However, when I tried to access one of the APIs, I ran into this error.</p>\n<p><img src=\"https://i.imgur.com/sGOq5x3.png\" alt=\"environment-variable-error\"></p>\n<p>The container on the AKS cluster could not access the environment variables that I put in from Github Secrets. I am familiar with Github Actions and workflows. I know how to set up environment variables using <code class=\"language-text\">env</code> or <code class=\"language-text\">with</code> so that I can use Github Secrets by writing down <code class=\"language-text\">${{ secrets.MY_GITHUB_SECRET }}</code>. However, none of them worked.</p>\n<p>So I decided to look into the workflow and see what each job is responsible for.</p>\n<p>When you connect an AKS cluster with a Github repository using the deployment center attribute, there are 7 jobs in <code class=\"language-text\">deploytoAksCluster.yml</code>. Let’s go through it one by one and see where I could possibly put my Github Secrets.</p>\n<ol>\n<li>\n<p>actions/checkout@master</p>\n<ul>\n<li>it clones the repository before building a container.</li>\n</ul>\n</li>\n<li>\n<p>azure/docker-login@v1</p>\n<ul>\n<li>it logs into the docker server from azure.</li>\n<li>the login info was automatically added to Github Secrets when I connected the repository to the AKS cluster</li>\n<li>so this workflow can access Github Secrets</li>\n</ul>\n</li>\n<li>\n<p>Build and push image to ACR</p>\n<ul>\n<li>just like the name says, it builds a docker image from the Dockerfile that was in the repository</li>\n<li>and then it pushed the image to an Azure container registry, which is also connected to the AKS cluster</li>\n<li>but when you think about it, when you run a docker container, you either put your environment variables in your Dockerfile or pass them as arguments when you run the container.</li>\n<li>in this case, you can’t put your environment varibles in the Dockerfile because the Dockerfile cannot access Github Secrets directly. otherwise, you would have to put your secrets into your repository, which is not acceptable.</li>\n<li>so you would now have to pass the environment varibles when you use the <code class=\"language-text\">docker run</code> command. because I tried to pass environment variables like below but failed</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build --build-arg <span class=\"token assign-left variable\">KEY</span><span class=\"token operator\">=</span><span class=\"token variable\">${{ secrets.ENVIRONMENT_VARIABLE}</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token string\">\"<span class=\"token variable\">$GITHUB_WORKSPACE</span>/\"</span> <span class=\"token parameter variable\">-f</span>  <span class=\"token string\">\"Dockerfile\"</span> <span class=\"token parameter variable\">-t</span> <span class=\"token variable\">$AZURE_CONTAINER_REGISTRY</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">${{ github.sha }</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token parameter variable\">--label</span> dockerfile-path<span class=\"token operator\">=</span>Dockerfile</code></pre></div>\n</li>\n<li>\n<p><a href=\"https://github.com/Azure/k8s-set-context\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">azure/k8s-set-context@v1</a></p>\n<ul>\n<li>this action is used to set cluster context</li>\n<li>a cluster context is a set of access parameters that contains a Kubernetes cluster, a user, and a namespace</li>\n<li>I actually tried to put in environment varibles here but it throws an error like below</li>\n</ul>\n<p><img src=\"https://i.imgur.com/heepGFz.png\" alt=\"set-context error\"></p>\n</li>\n<li>\n<p>Create namespace</p>\n<ul>\n<li>just like the name says, it creates <a href=\"https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">namespaces</a> for the AKS.</li>\n<li>there are multiple pods, which are like docker containers, in a namespace</li>\n<li>it gives the Github repository I connected a unique namespace</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/Azure/k8s-create-secret\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">azure/k8s-create-secret@v1</a></p>\n<ul>\n<li>what a name! it says create-secret, but don’t worry about it. I tried to put in secrets here but failed miserably. I pretty much got the same error I got in <code class=\"language-text\">azure/k8s-set-context</code>.</li>\n<li>it says you can create a generic secret or docker-resitry secret in the cluster context which was set earlier through <code class=\"language-text\">azure/k8s-set-context</code></li>\n<li>but this section has to be it. so I am gonna try to manipulate this section. I will post another blog if I succeed.</li>\n<li>I put something like <code class=\"language-text\">GITHUB_SECRET</code> but maybe only <code class=\"language-text\">github-secret</code> works.</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/Azure/k8s-deploy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">azure/k8s-deploy@v1.2</a></p>\n<ul>\n<li>this one is kinda obvious. it deploys the built container to the AKS cluster to make it accesible.</li>\n<li>this job has an input called <code class=\"language-text\">imagepullsecrets</code> where you can put a docker-registry secret that has already been set up with the cluster.</li>\n<li>and this docker-registry secret could be set in <code class=\"language-text\">azure/k8s-create-secret</code></li>\n</ul>\n</li>\n</ol>\n<p>That’s it. I will let you guys know if I succeed in a later post.</p>","fields":{"slug":"/posts/2022//azure/kubernetes-workflow-jobs","tagSlugs":["/tag/kubernetes/","/tag/azure/"]},"frontmatter":{"date":"2022-08-09T23:41:37.121Z","description":"Understanding jobs in deploytoAksCluster.yml","tags":["Kubernetes","Azure"],"title":"Azure Kubernetes Workflow Jobs","socialImage":null}}},"pageContext":{"slug":"/posts/2022//azure/kubernetes-workflow-jobs"}},"staticQueryHashes":["251939775","288581551","401334301"]}