{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/azure/adding-ingress-controller-to-aks","result":{"data":{"markdownRemark":{"id":"99388ec1-0d1c-5b7c-83f1-703d325e0a1a","html":"<p>기존에는 하나의 VM에 여러개의 컨테이너를 띄우고, Nginx에서 해당 컨테이너들로 request를 redirect했다. 쿠버네티스도 마찬가지로 Nginx에서 적절한 pod로 클라이언트의 요청을 redirect 하려고 한다.</p>\n<p>쿠버네티스 용어로 클라이언트가 서버에 요청을 보낼 수 있도록 하는 것을 <a href=\"https://kubernetes.io/docs/concepts/services-networking/ingress/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ingress</a>라고 한다.</p>\n<p><img src=\"https://i.imgur.com/nE0AAaP.png\" alt=\"how-ingress-works\"></p>\n<p>클라이언트는 load balancer로 request를 보내고, 이 load balancer가 ingress에 해당 request를 전달하면, ingress는 routing rule에 따라 service로 request를 전달하고, service는 적절한 pod로 해당 request를 전달한다.</p>\n<p>pod는 일반적으로 yml파일의 replica설정으로 여러개가 돌고있기 때문에, routing rule이 request를 전달하는 service는 load balancer로 해두었다. 외부에서 소통을 할 수 없도록 <a href=\"https://docs.microsoft.com/en-us/azure/aks/internal-lb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">internal load balancer</a>로 설정했고. 그렇게 하기 위해서 yml파일의 metadata에 설정을 추가했다. 그리고 부여된 external IP를 고정시키기 위해 <code class=\"language-text\">loadBalancerIP</code>를 지정했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> SERVICE_NAME\n  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">service.beta.kubernetes.io/azure-load-balancer-internal</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> LoadBalancer\n  <span class=\"token key atrule\">loadBalancerIP</span><span class=\"token punctuation\">:</span> EXTERNAL_IP_ADDRESS\n  <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8000</span>\n  <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> SERVICE_NAME</code></pre></div>\n<p>쿠버네티스는 클라우드마다 설정을 따로 해야한다. 같은 일을 하는데 왜 다르게 설정해야 하는지는 의문이다. AWS는 슬래시 뒤에 단어가 aws이다. AWS는 사용자가 많아서인지 쿠버네티스 공식 문서에도 상세하게 나와있는데, Azure관련 설정은 Azure문서에서 자세히 다룬다.</p>\n<p>그리고 Azure내 Virtual Network에서 연동할 수 있도록 <a href=\"https://cloud-provider-azure.sigs.k8s.io/topics/pls-integration/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Private Link Service</a> 설정을 추가했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> SERVICE_NAME\n  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">service.beta.kubernetes.io/azure-load-balancer-internal</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span>\n    <span class=\"token key atrule\">service.beta.kubernetes.io/azure-pls-create</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span></code></pre></div>\n<p>이제 해당 service의 외부 IP로는 접근이 불가능하다. 이제 nginx로 ingress를 설정하고, 해당 pod로 필요한 request를 redirect 해본다.</p>\n<p><a href=\"https://helm.sh/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">helm</a>이라는 패키지를 설치해야하는데, 쿠버네티스를 관리하는데 도움을 주는 툴이라고 한다. 처음써본다. <a href=\"https://docs.microsoft.com/en-us/azure/aks/ingress-basic?tabs=azure-cli\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">공식문서</a>에서 시키는대로 하면 ingress-controller pod가 잘 올라간 것을 확인할 수 있다.</p>\n<p><img src=\"https://i.imgur.com/NMiiVYR.png\" alt=\"ingress-controller-working\"></p>\n<p>하지만 기존에 올렸던 github repository와 연결된 pod들과 namespace가 다르다는 것을 깨달았다. 그래서 공식문서를 따라서 올렸던 namespace를 삭제하고 다시 설치를 시도했다. namespace만 바꿔서 <code class=\"language-text\">helm install</code>을 하려고 하니 지속적으로 아래와 같은 에러가 발생했다.</p>\n<p><img src=\"https://i.imgur.com/2TPbYpc.png\" alt=\"helm-installation-failed\"></p>\n<p>StackOverflow나 github issue들에서 성공했다는 모든것들(?)을 시도했는데 제대로 먹히지 않았다. 에러 메세지에 있는 <code class=\"language-text\">meta.helm.sh/release-namespace</code>를 열심히 찾아봤지만 실패했다.(나중에 Azure Portal에서 찾았다…)</p>\n<p>이것저것 시도해보다가 에러 메세지를 다시 보니 처음에 설정한 namespace기록이 남아있는 것 같아서 공식문서대로 <code class=\"language-text\">helm install</code>을 다시 한 후에, 같은 명령어에 <code class=\"language-text\">helm uninstall</code>을 하고, namespace를 바꿔서 <code class=\"language-text\">helm install</code>을 했더니 성공했다.</p>\n<p><img src=\"https://i.imgur.com/cRKW3qL.png\" alt=\"helm-install-success\"></p>\n<p>그리고 <a href=\"https://docs.microsoft.com/en-us/azure/aks/static-ip#create-a-static-ip-address\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">static ip</a>를 사용하기위해 발급받아서 추가로 설정해줬다.</p>\n<h3 id=\"공식문서를-보는-것은-좋지만-생각없이-따라하면-오늘처럼-6시간을-날릴-수-있다\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C%EB%A5%BC-%EB%B3%B4%EB%8A%94-%EA%B2%83%EC%9D%80-%EC%A2%8B%EC%A7%80%EB%A7%8C-%EC%83%9D%EA%B0%81%EC%97%86%EC%9D%B4-%EB%94%B0%EB%9D%BC%ED%95%98%EB%A9%B4-%EC%98%A4%EB%8A%98%EC%B2%98%EB%9F%BC-6%EC%8B%9C%EA%B0%84%EC%9D%84-%EB%82%A0%EB%A6%B4-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"공식문서를 보는 것은 좋지만 생각없이 따라하면 오늘처럼 6시간을 날릴 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공식문서를 보는 것은 좋지만, 생각없이 따라하면 오늘처럼 6시간을 날릴 수 있다.</h3>\n<p>이제 예시에 나온 것처럼 ingress controller yml파일을 생성해본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> networking.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Ingress\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> CUSTOM_INGRESS_NAME\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> CUSTOM_NAMESPACE\n  <span class=\"token key atrule\">annotations</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">nginx.ingress.kubernetes.io/ssl-redirect</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"false\"</span>\n    <span class=\"token key atrule\">nginx.ingress.kubernetes.io/use-regex</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span>\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ingressClassName</span><span class=\"token punctuation\">:</span> nginx\n  <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> CUSTOM_DOMAIN\n    <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /\n        <span class=\"token key atrule\">pathType</span><span class=\"token punctuation\">:</span> Prefix\n        <span class=\"token key atrule\">backend</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> CUSTOM_SERVICE_NAME\n            <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">number</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8000</span></code></pre></div>\n<p>설정을 적용하고</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply <span class=\"token parameter variable\">-f</span> ingress.yml</code></pre></div>\n<p>curl에서 로그인을 통해 200을 확인한다\n<img src=\"https://i.imgur.com/nwkyIhg.png\" alt=\"sign-in-success\"></p>","fields":{"slug":"/posts/2022//azure/adding-ingress-controller-to-aks","tagSlugs":["/tag/kubernetes/","/tag/azure/"]},"frontmatter":{"date":"2022-08-23T15:41:37.121Z","description":"Ingress Controller를 활용한 MSA구축","tags":["Kubernetes","Azure"],"title":"Azure Kubernetes(AKS)에서 Ingress Controller 적용법","socialImage":null}}},"pageContext":{"slug":"/posts/2022//azure/adding-ingress-controller-to-aks"}},"staticQueryHashes":["251939775","288581551","401334301"]}