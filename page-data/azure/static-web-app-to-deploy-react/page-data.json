{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/azure/static-web-app-to-deploy-react","result":{"data":{"markdownRemark":{"id":"27feaddd-5556-5772-942a-1d576c1e1224","html":"<p>리액트 프로젝트를 배포하는 방법은 다양하다. 서버에 빌드 시 생성된 디렉토리를 scp로 업로드해서 경로만 지정해줘도 되는데, 이런 경우에는</p>\n<ol>\n<li>서버를 직접 관리해줘야하는 번거로움이 있고,</li>\n<li>발급받은 도메인에 SSL인증서를 적용하고 주기적으로 갱신해줘야한다</li>\n</ol>\n<p>따라서 <a href=\"https://create-react-app.dev/docs/deployment/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React 공식 홈페이지에서 제안하는 다양한 방법들</a>중에 회사에서 사용하는 Azure에서 배포를 해보기로 한다.</p>\n<p>영어로는 Static Web App인데 우리말로는 <a href=\"https://learn.microsoft.com/ko-kr/azure/static-web-apps/?WT.mc_id=build2020_swa-docs-cxa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">정적웹앱</a>이다.</p>\n<p><img src=\"https://i.imgur.com/v5lAsOV.png\" alt=\"azure-static-web-app\"></p>\n<p>클릭한다</p>\n<p>그리고 resource group을 선택하고, 이름을 부여하고, Github인증을 통해 repo와 브랜치를 선택하면 Azure Static Web App과 Github repo를 연동할 수 있다. 아래 스크린샷을 보면 심지어 무료로 호스팅이 가능하고, 3개까지 staging environment를 제공한다. 매우 좋다.</p>\n<p><img src=\"https://i.imgur.com/mh1iqos.png\" alt=\"github-auth\"></p>\n<p>그리고 React를 선택하면, 타겟 빌드 디렉토리를 선택하고. 다음을 누르면 배포까지 바로 이루어진다.</p>\n<p><img src=\"https://i.imgur.com/Hj7ie0V.png\" alt=\"choose-react\"></p>\n<p>Azure가 기본으로 도메인을 제공하고 SSL 인증서도 적용해준다. 매우 편하다. Static Web App과 연동이 끝나면 Azure가 자동으로 <code class=\"language-text\">.github/workflows</code> 디렉토리에 <code class=\"language-text\">yml</code>파일을 생성해준다.</p>\n<p>환경변수를 추가한다면 <code class=\"language-text\">jobs</code> 섹션 위에 Github Secret을 사용해서 아래처럼 추가하면 된다</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">REACT_APP_API_ADDRESS</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DEV_API_ADDRESS <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>그리고 기본적으로 정적이기 때문에, 최초 진입시에는 React.js에서 설정한 route들을 잘 찾아가지만, 새로고침하는 경우 404에러가 발생한다.\n따라서 Azure에서 권장하는대로 <code class=\"language-text\">routes.json</code> 파일을 프로젝트 <code class=\"language-text\">public</code> 디렉토리에 생성하고, 아래와 같은 내용을 추가해줘야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"routes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"route\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/*\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"statusCode\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>경로에 상관없이 모두 <code class=\"language-text\">index.html</code>을 가리키라는 뜻이다. 해당 index.html에 React의 SPA가 구축되기 때문에 새로고침 하더라도 경로를 잘 찾아갈 수 있다.</p>","fields":{"slug":"/posts/2022//azure/static-web-app-to-deploy-react","tagSlugs":["/tag/azure/","/tag/react/"]},"frontmatter":{"date":"2022-12-16T19:35:37.121Z","description":"Azure Static Web App에서 React.js 프로젝트를 배포하는 방법","tags":["Azure","React"],"title":"Azure에서 React.js배포","socialImage":null}}},"pageContext":{"slug":"/posts/2022//azure/static-web-app-to-deploy-react"}},"staticQueryHashes":["251939775","288581551","401334301"]}