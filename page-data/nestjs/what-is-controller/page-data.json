{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/nestjs/what-is-controller","result":{"data":{"markdownRemark":{"id":"95998df0-a05c-55e6-aa1b-5b321362d793","html":"<h3 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h3>\n<p>controller는 클라이언트로부터 request를 받아서 response를 return하는 역할을 담당한다.</p>\n<p>nest init을 하니 아래와 같은 기본 컨셉 설명이 있었다.</p>\n<p><a href=\"https://jasonkang14.github.io/cs/object-oriented-programming\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OOP(Object Oriented Programming)</a>, <a href=\"https://jasonkang14.github.io/cs/functional-programming-pure-function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FP(Functional Programming)</a>, FRP(Functional Reactive Programming)을 혼합해서 사용한다고 한다. OOP와 FP는 아는데 FRP는 잘 모르겠다. 다음 포스트에서 한 번 작성해보도록 하겠다.</p>\n<p>Node.js의 등장으로 자바스크립트가 점점 좋아지고 다양한 라이브러리들이 등장했지만, 아키텍쳐 문제는 해결하지 못했다고 한다. 따라서 Nest.js는 이를 해결하고자 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"npm\"><pre class=\"language-npm\"><code class=\"language-npm\">npm i -g @nestjs/cli\nnest new project-name</code></pre></div>\n<p>위 명령어를 실행하면 npm을 사용해서 nestjs 를 글로벌로 설치하고, create-react-app과 유사하게 새로운 nest 프로젝트를 생성할 수 있다.</p>\n<p>overview 섹션을 따라하면서 어떤식으로 동작하는지 이해해보고자 한다.</p>\n<p>위 명령어를 실행하면 아래 구조의 파일들이 생성된다</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">src\n├── app.controller.spec.ts\n├── app.controller.ts\n├── app.module.ts\n├── app.service.ts\n└── main.ts</code></pre></div>\n<p>대략적인 구조로 봤을 때는 <code class=\"language-text\">service</code>가 <code class=\"language-text\">view</code>의 역할을 하는 MVC 패턴을 따르는 것으로 보인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// main.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NestFactory <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.module'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> NestFactory<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>AppModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">NestFactory</code> 클래스는 application instance를 생성할 수 있는 다양한 method들을 제공한다. <code class=\"language-text\">create()</code>를 호출하면 application object를 리턴하고, 이 객체가 nest.js를 구동하는 다양한 method들을 지원한다.</p>\n<p>Nest.js는 Express를 기반으로 만들어졌는데, 퍼포먼스 향상을 위해 Fastify를 사용할 수도 있다고 한다. Express는 간단한 WebSocket 서버를 만들기 위해 사용한 적이 있는데 Fastify는 처음본다. 문서만 읽어보기로는 더 빠르다고 한다.</p>\n<p>이제 본격적으로 controller에 대해 살펴본다</p>\n<p><img src=\"https://i.imgur.com/s6s39y1.png\" alt=\"nest-js-controller\"></p>\n<p>routing을 지원해서 클라이언트에게 특정 엔드포인트로 요청을 받는다. 특정 클래스가 controller임을 선언하기 위해서 <code class=\"language-text\">@Controller</code> decorator를 사용한다. basic controller의 구조는 아래와 같다. routing하는 법, response를 return하는 법, request 객체에 접근하는 법들을 아래 예제코드에 추가하도록 하겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token comment\">// cats.controller.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    Body<span class=\"token punctuation\">,</span>\n    Controller<span class=\"token punctuation\">,</span> \n    Delete<span class=\"token punctuation\">,</span> \n    Get<span class=\"token punctuation\">,</span> \n    HttpCode<span class=\"token punctuation\">,</span>\n    Param<span class=\"token punctuation\">,</span>\n    Query<span class=\"token punctuation\">,</span>\n    Redirect\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 해당 controller가 요청을 받는 route. </span>\n<span class=\"token comment\">// `/cats`로 들어오는 request는 모두 여기서 처리한다</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'cats'</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatsController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// http method 괄호 안에는 경로가 들어간다.</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n    <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 함수 이름</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'This action returns all cats'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// `/cats/profile`로 들어오는 request를 처리한다</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'profile'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">findProfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 함수 이름</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'This action returns a cat profile'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// abcd, ab_cd, abecd 등의 경로를 지원하나고 한다. </span>\n    <span class=\"token comment\">// 왜 쓰는지는 이해는 안된다.   </span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Delete</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'ab*cd'</span><span class=\"token punctuation\">)</span> \n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">HttpCode</span></span><span class=\"token punctuation\">(</span><span class=\"token number\">204</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// custom http status code를 지정해줄 수 있다. default는 200</span>\n    <span class=\"token function\">findWild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'This action is wild'</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// route parameter로 값을 받아올 수 있다.</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Patch</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">':catId'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">updateCat</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Param</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'catId'</span><span class=\"token punctuation\">)</span> catId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'this updates a cat'</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'docs'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Redirect</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://docs.nestjs.com'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">302</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// redirect</span>\n    <span class=\"token function\">getDocs</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Query</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'version'</span><span class=\"token punctuation\">)</span> version<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// query parameter</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>version <span class=\"token operator\">&amp;&amp;</span> version <span class=\"token operator\">===</span> <span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> url<span class=\"token operator\">:</span> <span class=\"token string\">'https://docs.nestjs.com/v5/'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Post</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Body</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> createCatDto<span class=\"token operator\">:</span> CreateCatDto<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// DTO를 선언해서 request body로 사용한다 </span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">'This action adds a new cat'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Express의 <code class=\"language-text\">Response</code>객체를 사용해서 return할 수도 있다고 하는데, 왜 굳이 그렇게까지 해야하는지 모르겠다. response객체를 컨트롤해서 다양한 커스텀이 가능하다고 하는데. 지금 상황에서는 필요성을 느끼지 못하겠다.</p>","fields":{"slug":"/posts/2023//nestjs/what-is-controller","tagSlugs":["/tag/nestjs/"]},"frontmatter":{"date":"2023-01-10T14:35:37.121Z","description":"Nest.js Controller가 클라이언트의 request를 핸들링하는 방법","tags":["Nestjs"],"title":"Nest.js 의 Controller","socialImage":null}}},"pageContext":{"slug":"/posts/2023//nestjs/what-is-controller"}},"staticQueryHashes":["251939775","288581551","401334301"]}