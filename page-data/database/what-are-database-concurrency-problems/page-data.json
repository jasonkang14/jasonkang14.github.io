{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/database/what-are-database-concurrency-problems","result":{"data":{"markdownRemark":{"id":"b4e13a5c-2158-5827-9b5e-13a7ff664d0e","html":"<p><img src=\"https://i.imgur.com/bwsa7kv.png\" alt=\"database-concurrency\"></p>\n<p>최근 회사에서 신규 프로젝트를 시작했다. 데이터베이스 구조에 대해서 이야기하고, 서버 &#x3C;-> 클라이언트 간 통신을 어떻게 할지 고민중에 내 생각을 전달했더니 CTO님께서 database concurrency 이슈가 있을 것 같다고 하셨다. 단어 뜻만 들어보고 <code class=\"language-text\">write가 끝나지 않은 상태에서 read를 해서 그런가?</code> 라고 생각만 하고 넘어갔다. 생각해보면 그 때 바로 뭔지 질문할 걸 그랬다.</p>\n<p>용어 자체에 답이 숨겨져 있을 것 같아서 단어 뜻을 찾아봤다. 구글에 검색하니 <code class=\"language-text\">여러가지 일이 동시에 일어나는 것</code>이라고 하고, computing에 <code class=\"language-text\">한정짓자면 여러가지 task를 동시에 실행시키는 것</code>이라고 한다. 구글의 친절한 검색엔진 덕분에 <a href=\"https://web.mit.edu/6.005/www/fa14/classes/17-concurrency/#:~:text=Concurrency%20means%20multiple%20computations%20are,cores%20on%20a%20single%20chip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MIT자료</a>를 찾았는데, concurrency는 여러가지 계산이 동시에 일어나는 것이라고 한다.</p>\n<p>단어 뜻만 보면 내가 생각한게 맞는 것 같다. 이제 구체적으로 database concurrency에 대해 알아본다.</p>\n<p>구체적으로 database concurrency에 대해 찾아보니, Transaction A가 일어나는 와중에 Transaction B가 일어나는 경우이다. 이게 문제가 되는 이유는 Transaction도 상태 있기 때문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. Active state\n2. Partially committed state\n3. Committed state\n4. Failed state\n5. Aborted state\n6. Terminated state</code></pre></div>\n<p><img src=\"https://i.imgur.com/UlGqwvb.png\" alt=\"database-transaction\"></p>\n<p>단어에서 알 수 있듯, terminated state에서 하나의 transaction이 완료된다. commited state는 변경될 수 없다는 걸 기억한다면 concurrency 문제들을 이해하는데 더 도움이 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. Temporary Update Problem\n2. Incorrect Summary Problem\n3. Lost Update Problem\n4. Unrepeatable Read Problem\n5. Phantom Read Problem</code></pre></div>\n<p>하나씩 알아본다.</p>\n<h4 id=\"1-temporary-update-problemaka-dirty-read-problem\" style=\"position:relative;\"><a href=\"#1-temporary-update-problemaka-dirty-read-problem\" aria-label=\"1 temporary update problemaka dirty read problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Temporary Update Problem(a.k.a. Dirty Read Problem)</h4>\n<p>Update를 시도한 transaction이 commit 되기 전 read가 발생한 경우이다.\n두가지 경우가 있겠는데</p>\n<ul>\n<li><code class=\"language-text\">Partially Commited State</code>에서 commit 되기 전에 read가 발생한 경우\n<img src=\"https://i.imgur.com/zyCzOQo.png\" alt=\"temporary-update-problem\"></li>\n<li><code class=\"language-text\">Failed Stated</code>에서 <code class=\"language-text\">Aborted State</code>로 rollback되기 전 read가 발생한 경우\n<img src=\"https://i.imgur.com/787imMr.png\" alt=\"temporary-update-problem\"></li>\n</ul>\n<h4 id=\"2-incorrect-summary-problem\" style=\"position:relative;\"><a href=\"#2-incorrect-summary-problem\" aria-label=\"2 incorrect summary problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Incorrect Summary Problem</h4>\n<p>요약을 잘못하는 경우. aggregation을 시도하는 중 update가 발생하는 경우이다.\n<img src=\"https://i.imgur.com/t7CWM2k.png\" alt=\"incorrect-summary-problem\">\n위 표를 보면 X는 A,B를 aggregate하는데, Y가 그 중간에 값을 업데이트 한다. 따라서 X는 정확한 값을 얻을 수 없다.</p>\n<h4 id=\"3-lost-update-problem\" style=\"position:relative;\"><a href=\"#3-lost-update-problem\" aria-label=\"3 lost update problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Lost Update Problem</h4>\n<p>하나의 transaction이 시도한 update를 다른 transaction이 덮어쓰는 것을 뜻한다.\n<img src=\"https://i.imgur.com/aI7ox1U.png\" alt=\"lost-update-problem\"></p>\n<h4 id=\"4-unrepeatable-read-problem\" style=\"position:relative;\"><a href=\"#4-unrepeatable-read-problem\" aria-label=\"4 unrepeatable read problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Unrepeatable Read Problem</h4>\n<p>여러개의 READ operation이 다른 결과를 낳는 것을 뜻한다.\n<img src=\"https://i.imgur.com/dHRNXAy.png\" alt=\"Unrepeatable-read-problem\">\n이게 왜 문제가 되는지 이해하기 어려워서 조금 더 찾아봤다. 다른 transaction이 update했으니, update된 값을 불러오는게 맞지 않나?\nUnrepeatable Read Problem은 같은 사용자가 두 번 READ할 때 보다는, 다른 사용자가 동시(?)에 같은 값을 read하려고 할 때 발생하는 문제이다.\n따라서 첨부한 표도 아래와 같이 보면 조금 더 이해하기 쉽다.</p>\n<p><img src=\"https://i.imgur.com/ZHAME7I.png\" alt=\"Unrepeatable\"></p>\n<h4 id=\"5-phantom-read-problem\" style=\"position:relative;\"><a href=\"#5-phantom-read-problem\" aria-label=\"5 phantom read problem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Phantom Read Problem</h4>\n<p>한 번 READ를 시도하고 같은 값을 다시 READ를 시도하는 사이에 해당 값이 지워지는 경우이다.\n<img src=\"https://i.imgur.com/eUW9xkw.png\" alt=\"phantom-read-problem\"></p>\n<p>글 처음에 CTO님께서 언급한 database concurrency 문제는 Temporary Update Problem인 것 같다. 업데이트가 마무리 되기 전 사용자가 값을 read할 수 있는 문제가 발생할 수 있다. 지금 생각으로는 pub/sub을 통해서 sub이 일어나기 전에는 read할 수 없게 하려고 하는데 이게 맞는 방향인지는 조금 더 고민이 필요하다.</p>","fields":{"slug":"/posts/2022//database/what-are-database-concurrency-problems","tagSlugs":["/tag/database/"]},"frontmatter":{"date":"2022-07-24T12:44:37.121Z","description":"Database concurrency는 어떤 문제들을 야기할 수 있는가","tags":["Database"],"title":"Database Concurrency Problems","socialImage":null}}},"pageContext":{"slug":"/posts/2022//database/what-are-database-concurrency-problems"}},"staticQueryHashes":["251939775","288581551","401334301"]}