{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/react/introducing-recoil","result":{"data":{"markdownRemark":{"id":"60075330-7cb1-5762-974b-58b9cd42c11d","html":"<h1 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h1>\n<h3 id=\"recoil의-사용으로-불필요한-rendering이-줄어들어-효율이-개선되었다\" style=\"position:relative;\"><a href=\"#recoil%EC%9D%98-%EC%82%AC%EC%9A%A9%EC%9C%BC%EB%A1%9C-%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-rendering%EC%9D%B4-%EC%A4%84%EC%96%B4%EB%93%A4%EC%96%B4-%ED%9A%A8%EC%9C%A8%EC%9D%B4-%EA%B0%9C%EC%84%A0%EB%90%98%EC%97%88%EB%8B%A4\" aria-label=\"recoil의 사용으로 불필요한 rendering이 줄어들어 효율이 개선되었다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recoil의 사용으로 불필요한 rendering이 줄어들어 효율이 개선되었다.</h3>\n<p><a href=\"https://jasonkang14.github.io/react/introducing-react-query\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이전 포스트</a>에서 <code class=\"language-text\">react-query</code> 도입의 타당성은 찾았고, 이제 Recoil을 사용하면 좋은 이유에 대해 찾아본다.</p>\n<p><a href=\"https://recoiljs.org/ko/docs/introduction/motivation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">recoil 공식문서</a>를 보면 리액트의 한계에 대해 설명하면서 왜 recoil을 개발했는지 잘 설명되어 있다.</p>\n<p>그럼 메타에서 어떻게 리액트스러운 상태관리 툴을 만들었는지 적용해보도록 한다.</p>\n<p>Recoil에는 <code class=\"language-text\">atom</code>과 <code class=\"language-text\">selector</code>가 있다.</p>\n<p><code class=\"language-text\">atom</code>이 기존의 Context API reducer의 state와 유사한 개념이라고 보면 된다. 차이점은 Context API의 경우, context에 특정 값에 의존한다면, 의존하지 않는 값이 변할때도 렌더링이 일어난다. 하지만 <code class=\"language-text\">atom</code>의 경우에는 해당 값에 의존하는 경우에만 렌더링이 일어나기 때문에 훨씬 효율적이다.</p>\n<p><code class=\"language-text\">select</code>는 <code class=\"language-text\">atom</code>에 있는 값을 변경할 때 사용된다. 지금 느끼기에는 component에서 할 작업들을 <code class=\"language-text\">select</code>에서 해주는 정도로만 느껴진다. 예제 코드를 보고 조금 더 잘 이해해보도록 하자. 우선 Context API를 사용해서 작성된 코드를 본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// provider.tsx</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Provider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleRemoteUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>remoteUsers<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'SET_REMOTE_USER'</span><span class=\"token punctuation\">,</span>\n      paylaod<span class=\"token operator\">:</span> remoteUsers\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// MediaContent.tsx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">MediaContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> remoteUsers <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useCall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// custom hook syntax를위해 useContext(CallContext) 를 useCall로 export()한다.</span>\n\n  <span class=\"token keyword\">const</span> rtcUsers <span class=\"token operator\">=</span> remoteUsers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>uid <span class=\"token operator\">!==</span> <span class=\"token string\">'screen'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>rtcUsers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rtcUser<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>rtcUser<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>비대면 진료 프로젝트이기 때문에 화상연결이 필수인데, 새로운 사용자가 연결될 때마다 렌더링이 일어난다. 하지만 여기의 문제는 <code class=\"language-text\">remoteUsers</code>라는 값은 화상연결된 사용자를 보여주는 component만 다시 렌더하면 되는데, <code class=\"language-text\">CallContext</code>를 사용하는 다른 component들에서도 새로운 사용자가 나타날 때마다 렌더된다는 문제가 있다. 또한 화면공유를 위해 사용되는 RTCPeerConnection을 예외처리 하기 위해 <code class=\"language-text\">filter</code>라는 연산을 하게된다. 가장 확실한 것은 시간을 측정하는 것이니 Profiler를 사용해서 rendering 시간을 측정하도록 한다.</p>\n<p><img src=\"https://i.imgur.com/8oPGB2L.png\" alt=\"context-api\"></p>\n<p>Context API를 사용하면 화상연결 Component를 렌더링하는데 약 <strong>11.3ms</strong>가 소요된다. 스크린샷에 나오지는 않았지만 Context가 업데이트 되면서, Context.Provider에서도 추가로 <strong>22.7ms</strong>가 소요되었다. 사용자가 한 명 입장하고, 그 영상을 렌더링하는데 <strong>34ms</strong>가 소요된다. remote user의 video component만 렌더되는데는 <strong>5.3ms</strong> 소요됐다</p>\n<p>이제 recoil의 <code class=\"language-text\">atom</code>을 사용해서 <code class=\"language-text\">remoteUsers</code>라는 값을 관리해보도록 한다. 기존 provider.tsx에서 변수를 reducer를 사용하지 않고 <code class=\"language-text\">atom</code>을 사용해서 업데이트한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// provider.tsx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> remoteUserState <span class=\"token operator\">=</span> <span class=\"token function\">atom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'remoteUserState'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Provider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> setRemoteUsers <span class=\"token operator\">=</span> <span class=\"token function\">useSetRecoilState</span><span class=\"token punctuation\">(</span>remoteUserState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleRemoteUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>remoteUsers<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setRemoteUsers</span><span class=\"token punctuation\">(</span>remoteUsers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// MediaContent.tsx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">MediaContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>remoteUsers<span class=\"token punctuation\">,</span> setRemoteUsers<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRecoilState</span><span class=\"token punctuation\">(</span>remoteUserState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> rtcUsers <span class=\"token operator\">=</span> remoteUsers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>uid <span class=\"token operator\">!==</span> <span class=\"token string\">'screen'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>rtcUsers<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>rtcUser<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>rtcUser<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://i.imgur.com/FXPKInC.png\" alt=\"recoil\"></p>\n<p>사용자 한 명이 늘어나고, 그 영상을 렌더링하는데 <strong>6.8ms</strong> 소요된다. remote user의 video component만 렌더되는데는 <strong>4.7ms</strong> 소요됐다. 스크린샷을 비교하면 rendering이 일어난 최상단의 component가 다른 것을 확인할 수 있다. Recoil에서 제공하는 <code class=\"language-text\">atom</code>을 사용하면 MediaContent.tsx에서만 렌더링이 일어나지만, Context API를 사용하면 MediaContent.tsx 컴포넌트의 부모 component와 해당 Context의 값에 의존하는 다른 component들에서 렌더링이 일어나기 때문이다.</p>\n<p>단순히 시간만 측정한다고 해도, Context API를 들어내면 렌더링 시간이 <strong>27.2ms</strong> 감소하고, 비율로 측정하면 약 <strong>80%</strong> 개선된다. 앞으로 Context API는 사용하지 말아야겠다.</p>","fields":{"slug":"/posts/2022//react/introducing-recoil","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2022-07-13T02:21:37.121Z","description":"Context API를 들어내고 Recoil을 사용해본다","tags":["React"],"title":"Context API -> Recoil","socialImage":null}}},"pageContext":{"slug":"/posts/2022//react/introducing-recoil"}},"staticQueryHashes":["251939775","288581551","401334301"]}