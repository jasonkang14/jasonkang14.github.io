{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/react/functional-programming-with-react-part-three","result":{"data":{"markdownRemark":{"id":"8fbd4263-dd46-5057-95ab-3f2d11b98403","html":"<p>함수형 프로그래밍에 대해 공부하면서 <a href=\"https://jasonkang14.github.io/cs/functional-programming-pure-function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pure Function</a> 과 <a href=\"https://jasonkang14.github.io/cs/functional-programming-currying\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Currying</a>에 대해 학습했다. 이제 <code class=\"language-text\">Pure Function</code>의 개념을 React의 <code class=\"language-text\">Pure Component</code>에 적용시켜보고자 한다.</p>\n<p>Pure function에서 중요한 개념 중 하나는, 함수의 인자를 조작할 수 없다는 것이다. 따라서 React Component를 함수라고 볼 때 (함수형 컴포넌트기 때문에), 이와 유사하게 component는 인자로 받게되는 prop을 수정하면 안된다.</p>\n<p>사내 세미나 일환으로 발표를 하다보니 예제를 들으면 좋을 것 같아서 회사 레포에서 prop을 변형하는 컴포넌트를 찾아봤더니 아래와 같은 코드가 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  prop<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ComponentA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> prop <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>showStatus<span class=\"token punctuation\">,</span> setShowStatus<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleStatusChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setShowStatus</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>showStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ComponentB status<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showStatus<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ComponentC status<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>showStatus<span class=\"token punctuation\">}</span> changeStatus<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleStatusChange<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">showStatus</code>라는 값이 <code class=\"language-text\">ComponentB</code> 와 <code class=\"language-text\">ComponentC</code> 의 prop인데, <code class=\"language-text\">ComponentC</code> 에게는 해당 prop을 변경할 수 있는 함수를 prop으로 내려준다. 따라서 prop을 변형할 수 있기 때문에, pure component가 아니다. 하지만 <code class=\"language-text\">showStatus</code>라는 값은 변경이 필요하고, 두개의 component에 사용된다. 이럴 경우에는 어떻게 해야할까?</p>\n<p><code class=\"language-text\">prop</code>을 수정하면 안된다는 원칙을 지키기 위해 <code class=\"language-text\">showStatus</code>를 <a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Context API</a>를 사용해서 전역변수로 변경했다. <code class=\"language-text\">ComponentA</code>는 더이상 state를 갖지 않는 stateless component가 되고. 자식 component들은 더이상 prop을 수정하지 않도록 수정했다.</p>\n<p><a href=\"https://reactjs.org/docs/profiler.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Profiler</a>를 사용해서 이렇게 하는 것이 무슨 의미가 있는지 검증해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  prop<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ComponentA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> prop <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Profiler id<span class=\"token operator\">=</span><span class=\"token string\">\"component-a\"</span> onRender<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onRenderCallback<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ComponentB <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>ComponentC <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Profiler<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">onRenderCallback</code>은 react 공식문서의 예제를 그대로 가져왔고, 실제 렌더링 시간인 <code class=\"language-text\">actualDuration</code>을 비교했다.</p>\n<p>특정 액션을 취하는데 지역변수를 활용한 경우 <strong>6.8</strong> 소요 되었는데, 전역변수로 활용하니 <strong>4.2</strong>로 약 38% 개선되었다. 다른 액션들도 취해보았을 때, 적게는 9%에서 많게는 42%정도 rendering 효율이 개선된 것을 확인할 수 있었다. profiler를 통해서 보면 전반적인 렌더시간도 많이 감소한 것을 볼 수 있다.</p>\n<p><img src=\"https://i.imgur.com/8iD6PvO.png\" alt=\"rendering time check via profiler\"></p>\n<p>프런트엔드팀에서 지속적으로 리액트 효율 개선을 위해 많은 시도를 할 예정인데, 공유가 가능한 선에서 블로깅을 계속 해보도록 하겠다.</p>","fields":{"slug":"/posts/2022//react/functional-programming-with-react-part-three","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2022-06-13T12:53:37.121Z","description":"리액트 컴포넌트를 pure component로 변환하는 법","tags":["React"],"title":"Functional Programming with React [3] - Pure Component","socialImage":null}}},"pageContext":{"slug":"/posts/2022//react/functional-programming-with-react-part-three"}},"staticQueryHashes":["251939775","288581551","401334301"]}