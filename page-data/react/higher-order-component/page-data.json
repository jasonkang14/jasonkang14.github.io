{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/react/higher-order-component","result":{"data":{"markdownRemark":{"id":"0f7890d8-7555-5460-82fc-8d4392ca4fea","html":"<h1 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h1>\n<p>A higher-order component is a function that takes a component and returns a new component.</p>\n<h1 id=\"explanation\" style=\"position:relative;\"><a href=\"#explanation\" aria-label=\"explanation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Explanation</h1>\n<p>A HOC is a wrapper that wraps a component and returns another component. The wrapper will allow you to use the same code in multiple components so that you don’t have to rewrite same codes—or similar codes—over and over again.</p>\n<p>For example, if you have a component that deals with a blog post with comments and another component with a video with subscriptions, you can reuse your codes for comments for both components without having to write a code for comments for both components. You can reuse your code for comments by wrapping such components. Because comments and subscriptions would have a similar structure.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> BlogWithComments <span class=\"token operator\">=</span> <span class=\"token function\">withComments</span><span class=\"token punctuation\">(</span>CommentList<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">DataSource</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getComments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> VideoWithSubscription <span class=\"token operator\">=</span> <span class=\"token function\">withSubscription</span><span class=\"token punctuation\">(</span>Video<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">DataSource<span class=\"token punctuation\">,</span> props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  DataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getVideo</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>According to the <a href=\"https://reactjs.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">official website</a>, libraries that allow you to maintain global states like <code class=\"language-text\">Redux</code> and <code class=\"language-text\">MobX</code> are somewhat higher order components. You wrap your components with <code class=\"language-text\">connect()</code> or <code class=\"language-text\">provider()</code> so that you can reuse your codes in <code class=\"language-text\">store</code> in various components.</p>\n<p>React also provides <code class=\"language-text\">Context API</code> so that you don’t have to use a third-party library. I will post about <code class=\"language-text\">Context-API</code> after using it in my personal project later on.</p>","fields":{"slug":"/posts/2020//react/higher-order-component","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2020-02-13T14:53:37.121Z","description":"React higher order component explained","tags":["React"],"title":"React - Higher Order Component","socialImage":null}}},"pageContext":{"slug":"/posts/2020//react/higher-order-component"}},"staticQueryHashes":["251939775","288581551","401334301"]}