{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/react/functional-programming-with-react-part-one","result":{"data":{"markdownRemark":{"id":"31ab8a28-0df8-517d-9603-585a8d87d6fd","html":"<p>On the very first page of <a href=\"https://reactjs.org\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">reactjs.org</a>, it says that <code class=\"language-text\">React</code> is <strong>declarative</strong>, which is a major property of Functional codes.</p>\n<p>Before talking about why functional programming is important when building a project with <code class=\"language-text\">React</code>, I want to talk about some basic concepts of functional programming.</p>\n<h3 id=\"pure-function\" style=\"position:relative;\"><a href=\"#pure-function\" aria-label=\"pure function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pure Function</h3>\n<ul>\n<li>A pure function always returns the same output if the same inputs are given.</li>\n<li>This means that a pure function does not have any side effects</li>\n</ul>\n<p>In order to understand the definition of a pure function, you need to understand what side effects are. A side effect is anything that is observable other than the return value of the function such as <code class=\"language-text\">console.log()</code> as it allows you to observe a state change even when the value is not the return value of a function.</p>\n<h3 id=\"shared-state\" style=\"position:relative;\"><a href=\"#shared-state\" aria-label=\"shared state permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shared State</h3>\n<ul>\n<li>Shared state is any variable, object, or memory space that exists in a shared scope, or as a property of an object being passed between scopes.</li>\n<li>Shared state must be avoided in functional programming</li>\n</ul>\n<p>Share states could be helpful if you need to pass values to different componentsâ€”like <code class=\"language-text\">props</code> in React. This is dangerous especially when the order of function execution is critical. If function B gets called before function A when a variable in function B must be updated via function A before its execution, it would lead you to a bug.</p>\n<p>By avoiding shared state, <strong>the timing and order of function calls do not change the result of calling the function</strong></p>\n<h3 id=\"immutability\" style=\"position:relative;\"><a href=\"#immutability\" aria-label=\"immutability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Immutability</h3>\n<ul>\n<li>An immutable object is an object that cannot be modified after it is created while a mutable object can be modified.</li>\n</ul>\n<p>To be honest, I do not completely understand why this is important with Functional Programming, but apparently the data flow of your project gets messy. I believe this is related to how a <code class=\"language-text\">React state</code> must be treated as <strong>immutable</strong>. And a <code class=\"language-text\">React prop</code> is literally <strong>immutable</strong>. This means that you cannot directly change a state in a React project without using <code class=\"language-text\">setState</code>.</p>\n<h3 id=\"higher-order-function\" style=\"position:relative;\"><a href=\"#higher-order-function\" aria-label=\"higher order function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Higher Order Function</h3>\n<ul>\n<li>Functional programming tends to reuse a common set of functional utilities to process data</li>\n<li>This is related to Higher Order Component in React, which can be reused, or used to wrap another components</li>\n</ul>\n<p>A higher order function is a function whith takes a function as an argument and returns a function, or both the argument and a function.</p>","fields":{"slug":"/posts/2020//react/functional-programming-with-react-part-one","tagSlugs":["/tag/react/"]},"frontmatter":{"date":"2020-03-22T12:53:37.121Z","description":"Understanding basic concepts of functional programming","tags":["React"],"title":"Functional Programming with React [1]","socialImage":null}}},"pageContext":{"slug":"/posts/2020//react/functional-programming-with-react-part-one"}},"staticQueryHashes":["251939775","288581551","401334301"]}