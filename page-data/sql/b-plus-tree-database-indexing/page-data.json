{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/sql/b-plus-tree-database-indexing","result":{"data":{"markdownRemark":{"id":"1b4a91e9-d2b2-5c5c-a2e8-7dd71f060211","html":"<h1 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h1>\n<h3 id=\"btree-구조는-insertupdatedelete에-쉽게-대응할-수-있고-search가-빠르기-때문에-데이터베이스-인덱싱에-적합하다\" style=\"position:relative;\"><a href=\"#btree-%EA%B5%AC%EC%A1%B0%EB%8A%94-insertupdatedelete%EC%97%90-%EC%89%BD%EA%B2%8C-%EB%8C%80%EC%9D%91%ED%95%A0-%EC%88%98-%EC%9E%88%EA%B3%A0-search%EA%B0%80-%EB%B9%A0%EB%A5%B4%EA%B8%B0-%EB%95%8C%EB%AC%B8%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%9D%B8%EB%8D%B1%EC%8B%B1%EC%97%90-%EC%A0%81%ED%95%A9%ED%95%98%EB%8B%A4\" aria-label=\"btree 구조는 insertupdatedelete에 쉽게 대응할 수 있고 search가 빠르기 때문에 데이터베이스 인덱싱에 적합하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>B+Tree 구조는 insert/update/delete에 쉽게 대응할 수 있고, Search가 빠르기 때문에 데이터베이스 인덱싱에 적합하다.</h3>\n<p><a href=\"https://jasonkang14.github.io/sql/database-indexing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Database indexing</a>에 대해 공부해보니, 효율성이 B+ Tree구조에서 온다고한다.</p>\n<p>인덱싱이 왜 빠른지는 이해했으니, B+ Tree구조를 적용한 이유에 대해서 공부하고자 한다. B+ Tree를 학습하기 전에, B Tree 를 먼저 보자.</p>\n<p>B Tree는 이런 구조로 이루어져 있다.\n<img src=\"https://i.imgur.com/zGU03Yj.png\" alt=\"B Tree Structure\"></p>\n<p>Tree 구조라는 이름 때문에 root, branch, leaf 등의 이름을 쓰는 것 같다. 각 박스는 node라고 불린다. binary search tree와 유사한 구조인데, Binary tree와 다르게 하나의 노드가 2개가 넘는 자식(?) node를 가질 수 있다. B Tree의 장점은 leaf node에 있는 항목들을 검색할 때, 모두 같은 시간 내에 찾을 수 있다는 점이고, 단순 리스트를 검색하는 것 과 비교했을 때 훨씬 빠르다 <code class=\"language-text\">log(n) vs n</code></p>\n<p>하지만 B Tree 의 문제점은, update가 빈번하게 발생하는 테이블의 경우 Tree의 균형이 깨져서 효율이 떨어지기 때문에 주기적으로 인덱싱을 업데이트 해줘야하는 단점이 있다 또한 모든 값들이 순서대로 저장되기 때문에, 인덱싱을 업데이트 할 때 비효율적이다.</p>\n<hr>\n<p>B+Tree는 B Tree의 확장형 개념인데, 가장 큰 차이점은 leaf nodes 들이 Linked Lists로 연결되어 있고, branch node에는 key만 담아두고 모든 값들은 Leaf node에 저장된다.</p>\n<p>leaf node를 제외하고는 데이터를 가지고 있지 않아서 메모리에 여유가 있고, 하나의 node에 B Tree보다 더 많은 값들을 담을 수 있기 때문에, tree의 높이가 낮아지는 장점이 있다.</p>\n<p>또한 데이터베이스 전체를 풀스캔 하는 경우에는값을 가지고 있는 leaf node만 보면 된다. 그리고 leaf node들이 linked list로 이루어지기 때문에, B Tree에서 겪는 균형이 깨진다던지, 인덱싱을 업데이트 해줘야 한다던지의 문제가 없다.</p>\n<p>두가지를 비교한다면,</p>\n<p><img src=\"https://i.imgur.com/Mh6KdDb.png\" alt=\"Compare B+ Tree with B Tree\"></p>\n<p>참고\n<a href=\"https://www.guru99.com/introduction-b-plus-tree.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.guru99.com/introduction-b-plus-tree.html</a>\n<a href=\"https://www.geeksforgeeks.org/difference-between-b-tree-and-b-tree/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.geeksforgeeks.org/difference-between-b-tree-and-b-tree/</a></p>","fields":{"slug":"/posts/2022//sql/b-plus-tree-database-indexing","tagSlugs":["/tag/database/"]},"frontmatter":{"date":"2022-06-06T13:34:37.121Z","description":"B+ Tree 구조가 Database Indexing에 미치는 영향","tags":["Database"],"title":"B+ Tree","socialImage":null}}},"pageContext":{"slug":"/posts/2022//sql/b-plus-tree-database-indexing"}},"staticQueryHashes":["251939775","288581551","401334301"]}