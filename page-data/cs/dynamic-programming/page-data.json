{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/cs/dynamic-programming","result":{"data":{"markdownRemark":{"id":"c9952a98-aa4c-547c-bf40-baf04e2e4600","html":"<p>When I first started programming, a senior engineer asked me how I would solve a certain problem. I do not recall the exact question, but he said the answer is dynamic programming.</p>\n<p>From then I knew dynamic programming is a powerful tool to use in programming. And now I finally got to see what it means as I watched Introduction to Computer Science Lectures on MIT Open Courseware</p>\n<p>The word <b>dynamic</b> means <strong>characterized by constant change</strong>.</p>\n<p>So dynamic programming is a way to store - or memoize - results of subproblems that change constantly in order to prevent the computer from re-computing those values.</p>\n<p>Let’s take a look at a Fibonacci algorithm as an example.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> num_calls\n    num_calls <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>now let me add some <code class=\"language-text\">print</code> lines to the code.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> num_calls\n    num_calls <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">F\"fib called with </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\"> number of calls == </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>num_calls<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\nnum_calls <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nn <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\nans <span class=\"token operator\">=</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">F\"fib of </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\"> == </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ans<span class=\"token punctuation\">}</span></span><span class=\"token string\"> with num_calls == </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>num_calls<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you run the code above, below is the result</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fib called with 9 number of calls == 1\nfib called with 8 number of calls == 2\nfib called with 7 number of calls == 3\nfib called with 6 number of calls == 4\nfib called with 5 number of calls == 5\nfib called with 4 number of calls == 6\nfib called with 3 number of calls == 7\nfib called with 2 number of calls == 8\nfib called with 1 number of calls == 9\nfib called with 2 number of calls == 10\nfib called with 3 number of calls == 11\nfib called with 2 number of calls == 12\nfib called with 1 number of calls == 13\nfib called with 4 number of calls == 14\nfib called with 3 number of calls == 15\nfib called with 2 number of calls == 16\nfib called with 1 number of calls == 17\nfib called with 2 number of calls == 18\nfib called with 5 number of calls == 19\nfib called with 4 number of calls == 20\nfib called with 3 number of calls == 21\nfib called with 2 number of calls == 22\nfib called with 1 number of calls == 23\nfib called with 2 number of calls == 24\nfib called with 3 number of calls == 25\nfib called with 2 number of calls == 26\nfib called with 1 number of calls == 27\nfib called with 6 number of calls == 28\nfib called with 5 number of calls == 29\nfib called with 4 number of calls == 30\nfib called with 3 number of calls == 31\nfib called with 2 number of calls == 32\nfib called with 1 number of calls == 33\nfib called with 2 number of calls == 34\nfib called with 3 number of calls == 35\nfib called with 2 number of calls == 36\nfib called with 1 number of calls == 37\nfib called with 4 number of calls == 38\nfib called with 3 number of calls == 39\nfib called with 2 number of calls == 40\nfib called with 1 number of calls == 41\nfib called with 2 number of calls == 42\nfib called with 7 number of calls == 43\nfib called with 6 number of calls == 44\nfib called with 5 number of calls == 45\nfib called with 4 number of calls == 46\nfib called with 3 number of calls == 47\nfib called with 2 number of calls == 48\nfib called with 1 number of calls == 49\nfib called with 2 number of calls == 50\nfib called with 3 number of calls == 51\nfib called with 2 number of calls == 52\nfib called with 1 number of calls == 53\nfib called with 4 number of calls == 54\nfib called with 3 number of calls == 55\nfib called with 2 number of calls == 56\nfib called with 1 number of calls == 57\nfib called with 2 number of calls == 58\nfib called with 5 number of calls == 59\nfib called with 4 number of calls == 60\nfib called with 3 number of calls == 61\nfib called with 2 number of calls == 62\nfib called with 1 number of calls == 63\nfib called with 2 number of calls == 64\nfib called with 3 number of calls == 65\nfib called with 2 number of calls == 66\nfib called with 1 number of calls == 67\nfib of 9 == 34 with num_calls == 67</code></pre></div>\n<p>You can see that the fib function was called <strong>67</strong> times</p>\n<p>But if you memoize the value, you can save a lot of time. Let’s look at the updated code below.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">fast_fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> num_calls\n    num_calls <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">F\"fib called with </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\"> number of calls == </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>num_calls<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> n <span class=\"token keyword\">in</span> memo<span class=\"token punctuation\">:</span>\n        memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fast_fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fast_fib<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    memo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> fast_fib<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span>\n\nnum_calls <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nn <span class=\"token operator\">=</span> <span class=\"token number\">9</span>\nans <span class=\"token operator\">=</span> fib<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">F\"fib of </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">}</span></span><span class=\"token string\"> == </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>ans<span class=\"token punctuation\">}</span></span><span class=\"token string\"> with num_calls == </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>num_calls<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you run the code with a memoized value, the result is like below.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fib called with 9 number of calls == 1\nfib called with 8 number of calls == 2\nfib called with 7 number of calls == 3\nfib called with 6 number of calls == 4\nfib called with 5 number of calls == 5\nfib called with 4 number of calls == 6\nfib called with 3 number of calls == 7\nfib called with 2 number of calls == 8\nfib called with 1 number of calls == 9\nfib called with 0 number of calls == 10\nfib called with 1 number of calls == 11\nfib called with 2 number of calls == 12\nfib called with 3 number of calls == 13\nfib called with 4 number of calls == 14\nfib called with 5 number of calls == 15\nfib called with 6 number of calls == 16\nfib called with 7 number of calls == 17\nfib of 9 == 34 with num_calls == 17</code></pre></div>\n<p>You get the same result, but the fib — or the fast_fib — function was called <strong>17</strong> times, which is <strong>about a third of the number of the times called compared to the original function.</strong> This is because dynamic programming saves the previously calculated number in the memo.</p>\n<p>Another important thing for you to notice is that the argument to the fib function remains the same. This is the idea of <code class=\"language-text\">Abstraction</code>. A user does not have to know exactly what is going on behind the scene, but the function returns the expected value in the most efficient way. I would like to talk about this in a later post.</p>\n<p>If the size of data gets bigger, dynamic programming would play a bigger role than it did in the simple example that I provided.</p>\n<p>If you want to learn more in detail, please watch this video on YouTube presented by MIT Open Courseware. Hope this helps.</p>","fields":{"slug":"/posts/2022//cs/dynamic-programming","tagSlugs":["/tag/cs/"]},"frontmatter":{"date":"2022-05-22T23:34:37.121Z","description":"See how dynamic programming can improve your performance","tags":["CS"],"title":"Dynamic Programming","socialImage":null}}},"pageContext":{"slug":"/posts/2022//cs/dynamic-programming"}},"staticQueryHashes":["251939775","288581551","401334301"]}